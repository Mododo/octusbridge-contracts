{
  "address": "0xDABd8eaF10A172FB0425804b06420362cf6F6EC1",
  "abi": [
    {
      "inputs": [],
      "name": "apiVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "api_version",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "decodeWithdrawEventData",
      "outputs": [
        {
          "internalType": "int8",
          "name": "sender_wid",
          "type": "int8"
        },
        {
          "internalType": "uint256",
          "name": "sender_addr",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint160",
          "name": "_recipient",
          "type": "uint160"
        },
        {
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int128",
              "name": "wid",
              "type": "int128"
            },
            {
              "internalType": "uint256",
              "name": "addr",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.TONAddress",
          "name": "recipient",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int128",
              "name": "wid",
              "type": "int128"
            },
            {
              "internalType": "uint256",
              "name": "addr",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.TONAddress",
          "name": "recipient",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "pendingWithdrawalsToFill",
          "type": "address[]"
        }
      ],
      "name": "depositWithFillings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        }
      ],
      "name": "saveWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf95b92514f4fb91b14a4c8d1a79767f7e4c77ee1a9ce2cbbb0d8d8688bc9808",
  "receipt": {
    "to": null,
    "from": "0xD843CC69C8fe379809fB757C934c310Ec89bC63F",
    "contractAddress": "0xDABd8eaF10A172FB0425804b06420362cf6F6EC1",
    "transactionIndex": 2,
    "gasUsed": "1014765",
    "logsBloom": "0x
    "blockHash": "0x27433ae389cb9fe3bea0e0742b3760a832394ac68a84602f1db98887ac9b5824",
    "transactionHash": "0xaf95b92514f4fb91b14a4c8d1a79767f7e4c77ee1a9ce2cbbb0d8d8688bc9808",
    "logs": [],
    "blockNumber": 11067697,
    "cumulativeGasUsed": "1404591",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "08b2cf5de0422650c74c59ba8bfa7a30",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"api_version\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"decodeWithdrawEventData\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"sender_wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"sender_addr\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint160\",\"name\":\"_recipient\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"wid\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.TONAddress\",\"name\":\"recipient\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"wid\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.TONAddress\",\"name\":\"recipient\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pendingWithdrawalsToFill\",\"type\":\"address[]\"}],\"name\":\"depositWithFillings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"saveWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit((int128,uint256),uint256)\":{\"params\":{\"amount\":\"Amount of tokens to be deposited\",\"recipient\":\"Recipient TON address\"}},\"depositWithFillings((int128,uint256),uint256,address[])\":{\"params\":{\"amount\":\"Amount of tokens to be deposited, should be gte than sum(fillings)\",\"pendingWithdrawalsToFill\":\"List of addresses, whose pending withdrawals will be filled with deposit\",\"recipient\":\"Recipient TON address\"}},\"saveWithdraw(bytes,bytes[],uint256)\":{\"params\":{\"bounty\":\"Pending withdraw bounty, can be set only by withdraw recipient. Ignores otherwise.\",\"payload\":\"Bytes encoded `IBridge.TONEvent` structure\",\"signatures\":\"Set of relay's signatures\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit((int128,uint256),uint256)\":{\"notice\":\"Most common entry point for Broxus Bridge.this Simply transfers tokens to the FreeTON side.\"},\"depositWithFillings((int128,uint256),uint256,address[])\":{\"notice\":\"Special type of deposit, which allows to fill specified pending withdrawals. Set of fillings should be created off-chain. Usually allows depositor to receive additional reward (bounty) on the FreeTON side.\"},\"saveWithdraw(bytes,bytes[],uint256)\":{\"notice\":\"Entry point for withdrawing tokens from the Broxus Bridge. Expects payload with withdraw details and list of relay's signatures.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/VaultWrapper.sol\":\"VaultWrapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IBridge {\\n    struct TONEvent {\\n        uint64 eventTransactionLt;\\n        uint32 eventTimestamp;\\n        bytes eventData;\\n        int8 configurationWid;\\n        uint256 configurationAddress;\\n        int8 eventContractWid;\\n        uint256 eventContractAddress;\\n        address proxy;\\n        uint32 round;\\n    }\\n\\n    struct Round {\\n        uint32 end;\\n        uint32 ttl;\\n        uint32 requiredSignatures;\\n    }\\n\\n    struct TONAddress {\\n        int8 wid;\\n        uint256 addr;\\n    }\\n\\n    function updateMinimumRequiredSignatures(uint32 _minimumRequiredSignatures) external;\\n    function updateRoundRelaysConfiguration(TONAddress calldata _roundRelaysConfiguration) external;\\n    function updateRoundTTL(uint32 _roundTTL) external;\\n\\n    function isRelay(\\n        uint32 round,\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isBanned(\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isRoundRotten(\\n        uint32 round\\n    ) external view returns(bool);\\n\\n    function verifySignedTonEvent(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external view returns(uint32);\\n\\n    function setRoundRelays(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) external;\\n\\n    function forceRoundRelays(\\n        uint160[] calldata _relays,\\n        uint32 roundEnd\\n    ) external;\\n\\n    function banRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function unbanRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function pause() external;\\n    function unpause() external;\\n\\n    function setRoundSubmitter(address _roundSubmitter) external;\\n\\n    event EmergencyShutdown(bool active);\\n\\n    event UpdateMinimumRequiredSignatures(uint32 value);\\n    event UpdateRoundTTL(uint32 value);\\n    event UpdateRoundRelaysConfiguration(TONAddress configuration);\\n    event UpdateRoundSubmitter(address _roundSubmitter);\\n\\n    event NewRound(uint32 indexed round, Round meta);\\n    event RoundRelay(uint32 indexed round, address indexed relay);\\n    event BanRelay(address indexed relay, bool status);\\n}\\n\",\"keccak256\":\"0x0d679466c00e8ce09b0f5dbfc8f2e0b4138371db62321731cfff83037aec39bc\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\n\\ninterface IVault {\\n    struct TONAddress {\\n        int128 wid;\\n        uint256 addr;\\n    }\\n\\n    function saveWithdraw(\\n        bytes32 id,\\n        address recipient,\\n        uint256 amount,\\n        uint256 bounty\\n    ) external;\\n\\n    function deposit(\\n        address sender,\\n        TONAddress calldata recipient,\\n        uint256 _amount,\\n        address pendingWithdrawalToFill\\n    ) external;\\n\\n    function configuration() external view returns(TONAddress memory _configuration);\\n    function bridge() external view returns(address);\\n    function apiVersion() external view returns(string memory api_version);\\n\\n    function initialize(\\n        address _token,\\n        address _governance,\\n        address _bridge,\\n        address wrapper,\\n        address guardian,\\n        address management\\n    ) external;\\n\\n    function governance() external view returns(address);\\n    function token() external view returns(address);\\n}\\n\",\"keccak256\":\"0x91411a4859dbc2915c024711f0ce269a7f110db63afe4de8aa3f2e6107285d90\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IVaultWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\n\\ninterface IVaultWrapper {\\n    function initialize(address _vault) external;\\n    function apiVersion() external view returns(string memory);\\n}\\n\",\"keccak256\":\"0x9d63623d6ec9ba918970c0e96220bbc809225b6da34d075e0653f53a0af9ff0b\",\"license\":\"Apache-2.0\"},\"contracts/utils/ChainId.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\n\\ncontract ChainId {\\n    function getChainID() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\",\"keccak256\":\"0x1e748295ee5ae2e88bd47905c4a64c0cb9b703146cfa86150cf65f31b9d69905\",\"license\":\"Apache-2.0\"},\"contracts/vault/VaultWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./../interfaces/IBridge.sol\\\";\\nimport \\\"./../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IVaultWrapper.sol\\\";\\nimport \\\"../utils/ChainId.sol\\\";\\n\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n\\ncontract VaultWrapper is ChainId, Initializable, IVaultWrapper {\\n    address constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\\n    string constant API_VERSION = \\\"1.0.0\\\";\\n\\n    address public vault;\\n\\n    function initialize(\\n        address _vault\\n    ) external override initializer {\\n        vault = _vault;\\n    }\\n\\n    function apiVersion()\\n        external\\n        override\\n        view\\n    returns (\\n        string memory api_version\\n    ) {\\n        return API_VERSION;\\n    }\\n\\n    /**\\n        @notice\\n            Most common entry point for Broxus Bridge.this\\n            Simply transfers tokens to the FreeTON side.\\n        @param recipient Recipient TON address\\n        @param amount Amount of tokens to be deposited\\n    */\\n    function deposit(\\n        IVault.TONAddress memory recipient,\\n        uint256 amount\\n    ) external {\\n        IVault(vault).deposit(\\n            msg.sender,\\n            recipient,\\n            amount,\\n            ZERO_ADDRESS\\n        );\\n    }\\n\\n    /**\\n        @notice\\n            Special type of deposit, which allows to fill specified\\n            pending withdrawals. Set of fillings should be created off-chain.\\n            Usually allows depositor to receive additional reward (bounty) on the FreeTON side.\\n        @param recipient Recipient TON address\\n        @param amount Amount of tokens to be deposited, should be gte than sum(fillings)\\n        @param pendingWithdrawalsToFill List of addresses, whose pending withdrawals will be filled with deposit\\n    */\\n    function depositWithFillings(\\n        IVault.TONAddress calldata recipient,\\n        uint256 amount,\\n        address[] calldata pendingWithdrawalsToFill\\n    ) external {\\n        require(\\n            pendingWithdrawalsToFill.length > 0,\\n            'Wrapper: no pending withdrawals specified'\\n        );\\n\\n        for (uint i = 0; i < pendingWithdrawalsToFill.length; i++) {\\n            IVault(vault).deposit(\\n                msg.sender,\\n                recipient,\\n                amount,\\n                pendingWithdrawalsToFill[i]\\n            );\\n        }\\n    }\\n\\n    function decodeWithdrawEventData(\\n        bytes memory payload\\n    ) public pure returns (\\n        int8 sender_wid,\\n        uint256 sender_addr,\\n        uint128 amount,\\n        uint160 _recipient,\\n        uint32 chainId\\n    ) {\\n        (IBridge.TONEvent memory tonEvent) = abi.decode(payload, (IBridge.TONEvent));\\n\\n        return abi.decode(\\n            tonEvent.eventData,\\n            (int8, uint256, uint128, uint160, uint32)\\n        );\\n    }\\n\\n    /**\\n        @notice Entry point for withdrawing tokens from the Broxus Bridge.\\n        Expects payload with withdraw details and list of relay's signatures.\\n        @param payload Bytes encoded `IBridge.TONEvent` structure\\n        @param signatures Set of relay's signatures\\n        @param bounty Pending withdraw bounty, can be set only by withdraw recipient. Ignores otherwise.\\n    */\\n    function saveWithdraw(\\n        bytes calldata payload,\\n        bytes[] calldata signatures,\\n        uint256 bounty\\n    ) external {\\n        address bridge = IVault(vault).bridge();\\n\\n        // Check signatures correct\\n        require(\\n            IBridge(bridge).verifySignedTonEvent(\\n                payload,\\n                signatures\\n            ) == 0,\\n            \\\"Vault wrapper: signatures verification failed\\\"\\n        );\\n\\n        // Decode TON event\\n        (IBridge.TONEvent memory tonEvent) = abi.decode(payload, (IBridge.TONEvent));\\n\\n        // Check event proxy is correct\\n        require(\\n            tonEvent.proxy == vault,\\n            \\\"Vault wrapper: wrong event proxy\\\"\\n        );\\n\\n        // dev: fix stack too deep\\n        {\\n            // Check event configuration matches Vault's configuration\\n            IVault.TONAddress memory configuration = IVault(vault).configuration();\\n\\n            require(\\n                tonEvent.configurationWid == configuration.wid &&\\n                tonEvent.configurationAddress == configuration.addr,\\n                \\\"Vault wrapper: wrong event configuration\\\"\\n            );\\n        }\\n\\n        // Decode event data\\n        (\\n            int8 sender_wid,\\n            uint256 sender_addr,\\n            uint128 amount,\\n            uint160 _recipient,\\n            uint32 chainId\\n        ) = decodeWithdrawEventData(payload);\\n\\n        // Check chain id\\n        require(chainId == getChainID(), \\\"Vault wrapper: wrong chain id\\\");\\n\\n        address recipient = address(_recipient);\\n\\n        IVault(vault).saveWithdraw(\\n            keccak256(payload),\\n            recipient,\\n            amount,\\n            recipient == msg.sender ? bounty : 0\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa07bb00e1c0803149aaae56ce643f110c947883da5fbd3cbe76c961ebd2989da\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit((int128,uint256),uint256)": {
        "params": {
          "amount": "Amount of tokens to be deposited",
          "recipient": "Recipient TON address"
        }
      },
      "depositWithFillings((int128,uint256),uint256,address[])": {
        "params": {
          "amount": "Amount of tokens to be deposited, should be gte than sum(fillings)",
          "pendingWithdrawalsToFill": "List of addresses, whose pending withdrawals will be filled with deposit",
          "recipient": "Recipient TON address"
        }
      },
      "saveWithdraw(bytes,bytes[],uint256)": {
        "params": {
          "bounty": "Pending withdraw bounty, can be set only by withdraw recipient. Ignores otherwise.",
          "payload": "Bytes encoded `IBridge.TONEvent` structure",
          "signatures": "Set of relay's signatures"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit((int128,uint256),uint256)": {
        "notice": "Most common entry point for Broxus Bridge.this Simply transfers tokens to the FreeTON side."
      },
      "depositWithFillings((int128,uint256),uint256,address[])": {
        "notice": "Special type of deposit, which allows to fill specified pending withdrawals. Set of fillings should be created off-chain. Usually allows depositor to receive additional reward (bounty) on the FreeTON side."
      },
      "saveWithdraw(bytes,bytes[],uint256)": {
        "notice": "Entry point for withdrawing tokens from the Broxus Bridge. Expects payload with withdraw details and list of relay's signatures."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1280,
        "contract": "contracts/vault/VaultWrapper.sol:VaultWrapper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1283,
        "contract": "contracts/vault/VaultWrapper.sol:VaultWrapper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4258,
        "contract": "contracts/vault/VaultWrapper.sol:VaultWrapper",
        "label": "vault",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}