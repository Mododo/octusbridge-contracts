{
  "address": "0x398f0eee161118dAF22759d7554BCA08a0b48240",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "UpdateBridge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "int8",
              "name": "wid",
              "type": "int8"
            },
            {
              "internalType": "uint256",
              "name": "addr",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBridge.TONAddress",
          "name": "configuration",
          "type": "tuple"
        }
      ],
      "name": "UpdateConfiguration",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configuration",
      "outputs": [
        {
          "internalType": "int8",
          "name": "wid",
          "type": "int8"
        },
        {
          "internalType": "uint256",
          "name": "addr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "decodeEthActionsEventData",
      "outputs": [
        {
          "internalType": "int8",
          "name": "_wid",
          "type": "int8"
        },
        {
          "internalType": "uint256",
          "name": "_addr",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "target",
              "type": "uint160"
            },
            {
              "internalType": "string",
              "name": "signature",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDAO.EthAction[]",
          "name": "actions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "responses",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "updateBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int8",
              "name": "wid",
              "type": "int8"
            },
            {
              "internalType": "uint256",
              "name": "addr",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBridge.TONAddress",
          "name": "_configuration",
          "type": "tuple"
        }
      ],
      "name": "updateConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xde029868903c53b2e41ecbd88002c636c4087d11443e3405b4b5a8b156bde7b4",
  "receipt": {
    "to": null,
    "from": "0xD843CC69C8fe379809fB757C934c310Ec89bC63F",
    "contractAddress": "0x398f0eee161118dAF22759d7554BCA08a0b48240",
    "transactionIndex": 0,
    "gasUsed": "1276672",
    "logsBloom": "0x
    "blockHash": "0x9099ef0879ec375fa1fbe37170a264fcd49b350efd2ecba449040ed5c2193242",
    "transactionHash": "0xde029868903c53b2e41ecbd88002c636c4087d11443e3405b4b5a8b156bde7b4",
    "logs": [],
    "blockNumber": 11074296,
    "cumulativeGasUsed": "1276672",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "22e20508f4b2a1ab67c19d71655d7ca9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"UpdateBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBridge.TONAddress\",\"name\":\"configuration\",\"type\":\"tuple\"}],\"name\":\"UpdateConfiguration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configuration\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"decodeEthActionsEventData\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"_wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"_addr\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"target\",\"type\":\"uint160\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDAO.EthAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"responses\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"updateBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IBridge.TONAddress\",\"name\":\"_configuration\",\"type\":\"tuple\"}],\"name\":\"updateConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Executes proposals confirmed in TON DAO. Proposals are submitted in form of payloads and signatures\",\"kind\":\"dev\",\"methods\":{\"execute(bytes,bytes[])\":{\"details\":\"@param payload Encoded TON event with payload details\",\"params\":{\"signatures\":\"Payload signatures\"},\"returns\":{\"responses\":\"Bytes-encoded payload action responses\"}},\"initialize(address,address)\":{\"params\":{\"_bridge\":\"Bridge address\",\"_owner\":\"DAO owner. Should be used only for initial set up, than ownership should be transferred to DAO itself.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBridge(address)\":{\"details\":\"Update bridge address\",\"params\":{\"_bridge\":\"New bridge address\"}},\"updateConfiguration((int8,uint256))\":{\"params\":{\"_configuration\":\"New configuration TON address\"}}},\"title\":\"DAO contract for Broxus TON-Ethereum bridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute(bytes,bytes[])\":{\"notice\":\"Execute set of actions.\"},\"initialize(address,address)\":{\"notice\":\"Initializer\"},\"updateConfiguration((int8,uint256))\":{\"notice\":\"Update address of the TON configuration, that emits actions for this DAO\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"DAO\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IBridge.sol\\\";\\nimport \\\"./interfaces/IDAO.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./utils/Cache.sol\\\";\\nimport \\\"./utils/ChainId.sol\\\";\\n\\n\\n/// @title DAO contract for Broxus TON-Ethereum bridge\\n/// @dev Executes proposals confirmed in TON DAO.\\n/// Proposals are submitted in form of payloads and signatures\\ncontract DAO is IDAO, ReentrancyGuard, OwnableUpgradeable, Cache, ChainId {\\n    address public bridge;\\n    IBridge.TONAddress public configuration;\\n\\n    /**\\n        @notice\\n            Initializer\\n        @param _owner DAO owner. Should be used only for initial set up,\\n            than ownership should be transferred to DAO itself.\\n        @param _bridge Bridge address\\n    */\\n    function initialize(\\n        address _owner,\\n        address _bridge\\n    ) public initializer {\\n        bridge = _bridge;\\n\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n    }\\n\\n    /**\\n        @notice\\n            Update address of the TON configuration, that emits actions for this DAO\\n        @param _configuration New configuration TON address\\n    */\\n    function updateConfiguration(\\n        IBridge.TONAddress calldata _configuration\\n    ) public onlyOwner {\\n        configuration = _configuration;\\n    }\\n\\n    /// @dev Update bridge address\\n    /// @param _bridge New bridge address\\n    function updateBridge(\\n        address _bridge\\n    ) override external onlyOwner {\\n        bridge = _bridge;\\n    }\\n\\n    function decodeEthActionsEventData(\\n        bytes memory payload\\n    ) public pure returns(\\n        int8 _wid,\\n        uint256 _addr,\\n        uint32 chainId,\\n        EthAction[] memory actions\\n    ) {\\n        (IBridge.TONEvent memory tonEvent) = abi.decode(payload, (IBridge.TONEvent));\\n\\n        return abi.decode(\\n            tonEvent.eventData,\\n            (int8, uint256, uint32, EthAction[])\\n        );\\n    }\\n\\n    /**\\n        @notice\\n            Execute set of actions.\\n        @dev\\n\\n        @param payload Encoded TON event with payload details\\n        @param signatures Payload signatures\\n        @return responses Bytes-encoded payload action responses\\n    */\\n    function execute(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) override external nonReentrant notCached(payload) returns(\\n        bytes[] memory responses\\n    ) {\\n        require(\\n            IBridge(bridge).verifySignedTonEvent(\\n                payload,\\n                signatures\\n            ) == 0,\\n            \\\"DAO: signatures verification failed\\\"\\n        );\\n\\n        (IBridge.TONEvent memory tonEvent) = abi.decode(payload, (IBridge.TONEvent));\\n\\n        require(\\n            tonEvent.proxy == address(this),\\n            \\\"DAO: wrong event proxy\\\"\\n        );\\n\\n        require(\\n            tonEvent.configurationWid == configuration.wid &&\\n            tonEvent.configurationAddress == configuration.addr,\\n            \\\"DAO: wrong event configuration\\\"\\n        );\\n\\n        (\\n            int8 _wid,\\n            uint256 _addr,\\n            uint32 chainId,\\n            EthAction[] memory actions\\n        ) = decodeEthActionsEventData(payload);\\n\\n        require(\\n            chainId == getChainID(),\\n            \\\"DAO: wrong chain id\\\"\\n        );\\n\\n        responses = new bytes[](actions.length);\\n\\n        for (uint i=0; i<actions.length; i++) {\\n            EthAction memory action = actions[i];\\n\\n            bytes memory callData;\\n\\n            if (bytes(action.signature).length == 0) {\\n                callData = action.data;\\n            } else {\\n                callData = abi.encodePacked(\\n                    bytes4(keccak256(bytes(action.signature))),\\n                    action.data\\n                );\\n            }\\n\\n            (bool success, bytes memory response) = address(action.target)\\n                .call{value: action.value}(callData);\\n\\n            require(success, \\\"DAO: execution fail\\\");\\n\\n            responses[i] = response;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05b4fc65e998629f8058bae3e86b4cc52250cc957682346b69a6cb1a63511823\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IBridge {\\n    struct TONEvent {\\n        uint64 eventTransactionLt;\\n        uint32 eventTimestamp;\\n        bytes eventData;\\n        int8 configurationWid;\\n        uint256 configurationAddress;\\n        int8 eventContractWid;\\n        uint256 eventContractAddress;\\n        address proxy;\\n        uint32 round;\\n    }\\n\\n    struct Round {\\n        uint32 end;\\n        uint32 ttl;\\n        uint32 relays;\\n        uint32 requiredSignatures;\\n    }\\n\\n    struct TONAddress {\\n        int8 wid;\\n        uint256 addr;\\n    }\\n\\n    function updateMinimumRequiredSignatures(uint32 _minimumRequiredSignatures) external;\\n    function updateRoundRelaysConfiguration(TONAddress calldata _roundRelaysConfiguration) external;\\n    function updateRoundTTL(uint32 _roundTTL) external;\\n\\n    function isRelay(\\n        uint32 round,\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isBanned(\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isRoundRotten(\\n        uint32 round\\n    ) external view returns(bool);\\n\\n    function verifySignedTonEvent(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external view returns(uint32);\\n\\n    function setRoundRelays(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) external;\\n\\n    function forceRoundRelays(\\n        uint160[] calldata _relays,\\n        uint32 roundEnd\\n    ) external;\\n\\n    function banRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function unbanRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function pause() external;\\n    function unpause() external;\\n\\n    function setRoundSubmitter(address _roundSubmitter) external;\\n\\n    event EmergencyShutdown(bool active);\\n\\n    event UpdateMinimumRequiredSignatures(uint32 value);\\n    event UpdateRoundTTL(uint32 value);\\n    event UpdateRoundRelaysConfiguration(TONAddress configuration);\\n    event UpdateRoundSubmitter(address _roundSubmitter);\\n\\n    event NewRound(uint32 indexed round, Round meta);\\n    event RoundRelay(uint32 indexed round, address indexed relay);\\n    event BanRelay(address indexed relay, bool status);\\n}\\n\",\"keccak256\":\"0xecdb868ccae38fa3ceb8ce535e44e9c322422c6ab7c319bac85aecc5cd7f1c41\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\nimport \\\"./IBridge.sol\\\";\\n\\n\\ninterface IDAO {\\n    struct EthAction {\\n        uint value;\\n        uint160 target;\\n        string signature;\\n        bytes data;\\n    }\\n\\n    function updateBridge(\\n        address _bridge\\n    ) external;\\n\\n    function execute(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external returns(bytes[] memory responses);\\n\\n    event UpdateBridge(address indexed bridge);\\n    event UpdateConfiguration(IBridge.TONAddress configuration);\\n}\\n\",\"keccak256\":\"0xf6334a2fed76617f5c9b69ffeacb0dfa68f11aa514a2754aba0b8db1ac04bdba\",\"license\":\"Apache-2.0\"},\"contracts/utils/Cache.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\ncontract Cache {\\n    mapping (bytes32 => bool) public cache;\\n\\n    modifier notCached(bytes memory payload) {\\n        bytes32 hash_ = keccak256(abi.encode(payload));\\n\\n        require(cache[hash_] == false, \\\"Cache: payload already seen\\\");\\n\\n        _;\\n\\n        cache[hash_] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xfbf832c15d7193fc6624a5a9c926e234a63fcaefb27ea08d6ceb7b951e538c3d\",\"license\":\"Apache-2.0\"},\"contracts/utils/ChainId.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\n\\ncontract ChainId {\\n    function getChainID() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\",\"keccak256\":\"0x1e748295ee5ae2e88bd47905c4a64c0cb9b703146cfa86150cf65f31b9d69905\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80636eb38212116100715780636eb3821214610166578063715018a6146101795780638da5cb5b1461018157806399eb59b9146101a6578063e78cea92146101d9578063f2fde38b146101ec576100b4565b806308d44dac146100b957806324856bc3146100e557806335c042e014610105578063485cc9551461011a578063564b81ef1461012d5780636c70bee91461013b575b600080fd5b6100cc6100c7366004610d94565b6101ff565b6040516100dc9493929190611307565b60405180910390f35b6100f86100f3366004610cd6565b610246565b6040516100dc91906111e9565b610118610113366004610f48565b6107bd565b005b610118610128366004610c86565b6107f9565b6040514681526020016100dc565b60685460695461014c9160000b9082565b6040805160009390930b83526020830191909152016100dc565b610118610174366004610c6a565b61089a565b6101186108e6565b6034546001600160a01b03165b6040516001600160a01b0390911681526020016100dc565b6101c96101b4366004610cbe565b60666020526000908152604090205460ff1681565b60405190151581526020016100dc565b60675461018e906001600160a01b031681565b6101186101fa366004610c6a565b61091c565b6000806000606060008580602001905181019061021c919061104c565b905080604001518060200190518101906102369190610dce565b9450945094509450509193509193565b6060600260005414156102a05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055604080516020601f870181900481028201810190925285815290869086908190840183828082843760009201829052506040519093506102eb92508491506020016112f4565b60408051601f1981840301815291815281516020928301206000818152606690935291205490915060ff16156103635760405162461bcd60e51b815260206004820152601b60248201527f43616368653a207061796c6f616420616c7265616479207365656e00000000006044820152606401610297565b60675460405163a40b9e7360e01b81526001600160a01b039091169063a40b9e7390610399908a908a908a908a90600401611249565b60206040518083038186803b1580156103b157600080fd5b505afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e9919061112a565b63ffffffff16156104485760405162461bcd60e51b815260206004820152602360248201527f44414f3a207369676e61747572657320766572696669636174696f6e206661696044820152621b195960ea1b6064820152608401610297565b600061045687890189610f5f565b60e08101519091506001600160a01b031630146104ae5760405162461bcd60e51b815260206004820152601660248201527544414f3a2077726f6e67206576656e742070726f787960501b6044820152606401610297565b6068546060820151600091820b820b910b1480156104d157506069546080820151145b61051d5760405162461bcd60e51b815260206004820152601e60248201527f44414f3a2077726f6e67206576656e7420636f6e66696775726174696f6e00006044820152606401610297565b6000806000806105628c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101ff92505050565b93509350935093506105714690565b8263ffffffff16146105bb5760405162461bcd60e51b8152602060048201526013602482015272111053ce881ddc9bdb99c818da185a5b881a59606a1b6044820152606401610297565b80516001600160401b038111156105e257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561061557816020015b60608152602001906001900390816106005790505b50975060005b815181101561079057600082828151811061064657634e487b7160e01b600052603260045260246000fd5b6020026020010151905060608160400151516000141561066b5750606081015161069f565b816040015180519060200120826060015160405160200161068d92919061119c565b60405160208183030381529060405290505b60008083602001516001600160a01b03168460000151846040516106c391906111cd565b60006040518083038185875af1925050503d8060008114610700576040519150601f19603f3d011682016040523d82523d6000602084013e610705565b606091505b50915091508161074d5760405162461bcd60e51b8152602060048201526013602482015272111053ce88195e1958dd5d1a5bdb8819985a5b606a1b6044820152606401610297565b808d868151811061076e57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505050508080610788906114d0565b91505061061b565b5050506000938452505060666020525060408120805460ff19166001908117909155905550949350505050565b6034546001600160a01b031633146107e75760405162461bcd60e51b815260040161029790611414565b8060686107f4828261150d565b505050565b600154610100900460ff1680610812575060015460ff16155b61082e5760405162461bcd60e51b8152600401610297906113c6565b600154610100900460ff16158015610858576001805460ff1961ff00199091166101001716811790555b606780546001600160a01b0319166001600160a01b03841617905561087b6109b7565b6108848361091c565b80156107f4576001805461ff0019169055505050565b6034546001600160a01b031633146108c45760405162461bcd60e51b815260040161029790611414565b606780546001600160a01b0319166001600160a01b0392909216919091179055565b6034546001600160a01b031633146109105760405162461bcd60e51b815260040161029790611414565b61091a6000610a3a565b565b6034546001600160a01b031633146109465760405162461bcd60e51b815260040161029790611414565b6001600160a01b0381166109ab5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610297565b6109b481610a3a565b50565b600154610100900460ff16806109d0575060015460ff16155b6109ec5760405162461bcd60e51b8152600401610297906113c6565b600154610100900460ff16158015610a16576001805460ff1961ff00199091166101001716811790555b610a1e610a8c565b610a26610afe565b80156109b4576001805461ff001916905550565b603480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600154610100900460ff1680610aa5575060015460ff16155b610ac15760405162461bcd60e51b8152600401610297906113c6565b600154610100900460ff16158015610a26576001805460ff1961ff001990911661010017168117905580156109b4576001805461ff001916905550565b600154610100900460ff1680610b17575060015460ff16155b610b335760405162461bcd60e51b8152600401610297906113c6565b600154610100900460ff16158015610b5d576001805460ff1961ff00199091166101001716811790555b610a2633610a3a565b6000610b79610b7484611479565b611449565b9050828152838383011115610b8d57600080fd5b610b9b8360208301846114a0565b9392505050565b8035610bad81611539565b919050565b8051610bad81611539565b600082601f830112610bcd578081fd5b8135610bdb610b7482611479565b818152846020838601011115610bef578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112610c19578081fd5b610b9b83835160208501610b66565b8035610bad8161154e565b8051610bad8161154e565b8035610bad8161155d565b8051610bad8161155d565b8035610bad8161156f565b8051610bad8161156f565b600060208284031215610c7b578081fd5b8135610b9b81611539565b60008060408385031215610c98578081fd5b8235610ca381611539565b91506020830135610cb381611539565b809150509250929050565b600060208284031215610ccf578081fd5b5035919050565b60008060008060408587031215610ceb578182fd5b84356001600160401b0380821115610d01578384fd5b818701915087601f830112610d14578384fd5b813581811115610d22578485fd5b60208981838601011115610d34578586fd5b808401975081965080890135935082841115610d4e578586fd5b838901935089601f850112610d61578586fd5b8335915082821115610d71578586fd5b89818284028601011115610d83578586fd5b969995985091909501955093505050565b600060208284031215610da5578081fd5b81356001600160401b03811115610dba578182fd5b610dc684828501610bbd565b949350505050565b60008060008060808587031215610de3578182fd5b8451610dee8161154e565b602086015160408701519195509350610e068161155d565b60608601519092506001600160401b03811115610e21578182fd5b86601f8288010112610e31578182fd5b808601516001600160401b03811115610e4c57610e4c6114f7565b610e5a602080830201611449565b8181526020808201919089850101855b84811015610f365781518b8701016080818e03601f19011215610e8b578788fd5b610e956080611449565b602082015181526040820151610eaa81611539565b602082015260608201516001600160401b03811115610ec757898afd5b8e603f8285010112610ed757898afd5b610eed8f60208386010151604084870101610b66565b60408301525060808201516001600160401b03811115610f0b57898afd5b610f1a8f602083860101610c09565b6060830152508552506020938401939190910190600101610e6a565b50508094505050505092959194509250565b600060408284031215610f59578081fd5b50919050565b600060208284031215610f70578081fd5b81356001600160401b0380821115610f86578283fd5b8184019150610120808387031215610f9c578384fd5b610fa581611449565b9050610fb083610c54565b8152610fbe60208401610c3e565b6020820152604083013582811115610fd4578485fd5b610fe087828601610bbd565b604083015250610ff260608401610c28565b60608201526080830135608082015261100d60a08401610c28565b60a082015260c083013560c082015261102860e08401610ba2565b60e0820152610100915061103d828401610c3e565b91810191909152949350505050565b60006020828403121561105d578081fd5b81516001600160401b0380821115611073578283fd5b8184019150610120808387031215611089578384fd5b61109281611449565b905061109d83610c5f565b81526110ab60208401610c49565b60208201526040830151828111156110c1578485fd5b6110cd87828601610c09565b6040830152506110df60608401610c33565b6060820152608083015160808201526110fa60a08401610c33565b60a082015260c083015160c082015261111560e08401610bb2565b60e0820152610100915061103d828401610c49565b60006020828403121561113b578081fd5b8151610b9b8161155d565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600081518084526111888160208601602086016114a0565b601f01601f19169290920160200192915050565b6001600160e01b03198316815281516000906111bf8160048501602087016114a0565b919091016004019392505050565b600082516111df8184602087016114a0565b9190910192915050565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561123c57603f1988860301845261122a858351611170565b9450928501929085019060010161120e565b5092979650505050505050565b60006040825261125d604083018688611146565b6020838203818501528185835281830190508182870284010187855b888110156112e457858303601f190184528135368b9003601e1901811261129e578788fd5b8a0180356001600160401b038111156112b5578889fd5b8036038c13156112c3578889fd5b6112d08582898501611146565b958701959450505090840190600101611279565b50909a9950505050505050505050565b600060208252610b9b6020830184611170565b6000608080830187830b845260208781860152604063ffffffff8816818701526060848188015283885180865260a08901915060a08582028a01019550848a01885b828110156113b3578a8803609f19018452815180518952878101516001600160a01b0316888a015286810151878a018b90526113878b8b0182611170565b918701518a83038b89015291905061139f8183611170565b995050509286019290860190600101611349565b50959d9c50505050505050505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f191681016001600160401b0381118282101715611471576114716114f7565b604052919050565b60006001600160401b03821115611492576114926114f7565b50601f01601f191660200190565b60005b838110156114bb5781810151838201526020016114a3565b838111156114ca576000848401525b50505050565b60006000198214156114f057634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b81356115188161154e565b60ff1982541660ff8260000b16811783555050602082013560018201555050565b6001600160a01b03811681146109b457600080fd5b8060000b81146109b457600080fd5b63ffffffff811681146109b457600080fd5b6001600160401b03811681146109b457600080fdfea2646970667358221220f603dd63cad923cc90ded1475ff1baa2c5587e43d749902531a368821c0abab664736f6c63430008020033",
  "devdoc": {
    "details": "Executes proposals confirmed in TON DAO. Proposals are submitted in form of payloads and signatures",
    "kind": "dev",
    "methods": {
      "execute(bytes,bytes[])": {
        "details": "@param payload Encoded TON event with payload details",
        "params": {
          "signatures": "Payload signatures"
        },
        "returns": {
          "responses": "Bytes-encoded payload action responses"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_bridge": "Bridge address",
          "_owner": "DAO owner. Should be used only for initial set up, than ownership should be transferred to DAO itself."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBridge(address)": {
        "details": "Update bridge address",
        "params": {
          "_bridge": "New bridge address"
        }
      },
      "updateConfiguration((int8,uint256))": {
        "params": {
          "_configuration": "New configuration TON address"
        }
      }
    },
    "title": "DAO contract for Broxus TON-Ethereum bridge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "execute(bytes,bytes[])": {
        "notice": "Execute set of actions."
      },
      "initialize(address,address)": {
        "notice": "Initializer"
      },
      "updateConfiguration((int8,uint256))": {
        "notice": "Update address of the TON configuration, that emits actions for this DAO"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1331,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 130,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 325,
        "contract": "contracts/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_owner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3641,
        "contract": "contracts/DAO.sol:DAO",
        "label": "cache",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 2063,
        "contract": "contracts/DAO.sol:DAO",
        "label": "bridge",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 2066,
        "contract": "contracts/DAO.sol:DAO",
        "label": "configuration",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(TONAddress)3169_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(TONAddress)3169_storage": {
        "encoding": "inplace",
        "label": "struct IBridge.TONAddress",
        "members": [
          {
            "astId": 3166,
            "contract": "contracts/DAO.sol:DAO",
            "label": "wid",
            "offset": 0,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 3168,
            "contract": "contracts/DAO.sol:DAO",
            "label": "addr",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}