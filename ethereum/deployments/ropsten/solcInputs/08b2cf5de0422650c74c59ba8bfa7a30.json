{
  "language": "Solidity",
  "sources": {
    "contracts/bridge/Bridge.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\nimport \"./../interfaces/IBridge.sol\";\nimport \"./../libraries/ECDSA.sol\";\n\nimport \"./../utils/Cache.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\n\n/// @title Ethereum Bridge contract\n/// @author https://github.com/broxus\n/// @dev Stores relays for each round, implements slashing, helps in validating TON-ETH events\ncontract Bridge is OwnableUpgradeable, PausableUpgradeable, Cache, IBridge {\n    using ECDSA for bytes32;\n\n    // NOTE: round number -> address -> is relay?\n    mapping (uint32 => mapping(address => bool)) public relays;\n\n    // NOTE: is relay banned or not\n    mapping (address => bool) public blacklist;\n\n    // NOTE: round meta data\n    mapping (uint32 => Round) public rounds;\n\n    // NOTE: signature verifications always fails is emergency is on\n    bool public emergencyShutdown;\n\n    // NOTE: The required signatures per round can't be less than this\n    uint32 public minimumRequiredSignatures;\n\n    // NOTE: how long round signatures are considered valid after the end of the round\n    uint32 public roundTTL;\n\n    // NOTE: initial round number\n    uint32 public initialRound;\n\n    // NOTE: last round with known relays\n    uint32 public lastRound;\n\n    // NOTE: special address, can set up rounds without relays's signatures\n    address public roundSubmitter;\n\n    // NOTE: Broxus Bridge TON-ETH configuration address, that emits event with round relays\n    TONAddress public roundRelaysConfiguration;\n\n    /**\n        @notice\n            Bridge initializer\n        @dev\n            `roundRelaysConfiguration` should be specified later.\n        @param _owner Bridge owner\n        @param _roundSubmitter Round submitter\n        @param _minimumRequiredSignatures Minimum required signatures per round.\n        @param _roundTTL Round TTL after round ends.\n        @param _initialRound Initial round number. Useful in case new EVM network is connected to the bridge.\n        @param _initialRoundEnd Initial round end timestamp.\n        @param _relays Initial set of relays. Encode addresses as uint160\n    */\n    function initialize(\n        address _owner,\n        address _roundSubmitter,\n        uint32 _minimumRequiredSignatures,\n        uint32 _roundTTL,\n        uint32 _initialRound,\n        uint32 _initialRoundEnd,\n        uint160[] calldata _relays\n    ) external initializer {\n        __Pausable_init();\n        __Ownable_init();\n        transferOwnership(_owner);\n\n        roundSubmitter = _roundSubmitter;\n        emit UpdateRoundSubmitter(_roundSubmitter);\n\n        minimumRequiredSignatures = _minimumRequiredSignatures;\n        emit UpdateMinimumRequiredSignatures(minimumRequiredSignatures);\n\n        roundTTL = _roundTTL;\n        emit UpdateRoundTTL(roundTTL);\n\n        require(\n            _initialRoundEnd >= block.timestamp,\n            \"Bridge: initial round end should be in the future\"\n        );\n\n        initialRound = _initialRound;\n        _setRound(initialRound, _relays, _initialRoundEnd);\n\n        lastRound = initialRound;\n    }\n\n    /**\n        @notice\n            Update address of configuration, that emits event with next round relays.\n        @param _roundRelaysConfiguration TON address of configuration\n    */\n    function updateRoundRelaysConfiguration(\n        TONAddress calldata _roundRelaysConfiguration\n    ) external override onlyOwner {\n        emit UpdateRoundRelaysConfiguration(_roundRelaysConfiguration);\n\n        roundRelaysConfiguration = _roundRelaysConfiguration;\n    }\n\n    /**\n        @notice\n            Pause Bridge contract.\n        @dev\n            When Bridge paused, signature verification fails.\n    */\n    function pause() external override onlyOwner {\n        _pause();\n    }\n\n    /**\n        @notice\n            Unpause Bridge contract.\n    */\n    function unpause() external override onlyOwner {\n        _unpause();\n    }\n\n    /**\n        @notice\n            Update minimum amount of required signatures per round\n        @param _minimumRequiredSignatures New value\n    */\n    function updateMinimumRequiredSignatures(\n        uint32 _minimumRequiredSignatures\n    ) external override onlyOwner {\n        minimumRequiredSignatures = _minimumRequiredSignatures;\n\n        emit UpdateMinimumRequiredSignatures(_minimumRequiredSignatures);\n    }\n\n    /**\n        @notice\n            Update round TTL\n        @dev\n            This affects only future rounds. Rounds, that were already set,\n            keep their current TTL.\n        @param _roundTTL New TTL value\n    */\n    function updateRoundTTL(\n        uint32 _roundTTL\n    ) external override onlyOwner {\n        roundTTL = _roundTTL;\n\n        emit UpdateRoundTTL(_roundTTL);\n    }\n\n    /// @dev Check if relay is banned.\n    /// Ban is global. If the relay is banned it means it lost\n    /// relay power in all rounds, past and future.\n    /// @param candidate Address to check\n    function isBanned(\n        address candidate\n    ) override public view returns(bool) {\n        return blacklist[candidate];\n    }\n\n    /// @dev Check if some address is relay at specific round\n    /// @param round Round id\n    /// @param candidate Address to check\n    function isRelay(\n        uint32 round,\n        address candidate\n    ) override public view returns (bool) {\n        return relays[round][candidate];\n    }\n\n    /// @dev Check if round is rotten\n    /// @param round Round id\n    function isRoundRotten(\n        uint32 round\n    ) override public view returns (bool) {\n        return block.timestamp > rounds[round].ttl;\n    }\n\n    /**\n        @notice\n            Verify payload signatures.\n        @dev\n            Signatures should be sorted by the ascending signers.\n            Error codes:\n                0. Verification passed (no error)\n                1. Specified round is less than `initialRound`\n                2. Specified round is more than `lastRound`\n                3. Not enough correct signatures. Possible reasons:\n                    - Some of the signers are not relays at the specified round\n                    - Some of the signers are banned\n                4. Round is rotten.\n                5. Everything is correct, but bridge is in \"paused\" state\n\n        @param payload Bytes encoded TONEvent structure\n        @param signatures Payload signatures\n        @return errorCode Error code\n    */\n    function verifySignedTonEvent(\n        bytes memory payload,\n        bytes[] memory signatures\n    )\n        override\n        public\n        view\n    returns (\n        uint32 errorCode\n    ) {\n        (TONEvent memory tonEvent) = abi.decode(payload, (TONEvent));\n\n        uint32 round = tonEvent.round;\n\n        // Check round is not less than initial round\n        if (round < initialRound) return 1;\n\n        // Check round is not more than last initialized round\n        if (round > lastRound) return 2;\n\n        // Check there are enough correct signatures\n        uint32 count = _countRelaySignatures(payload, signatures, round);\n        if (count < rounds[round].requiredSignatures) return 3;\n\n        // Check round rotten\n        if (isRoundRotten(round)) return 4;\n\n        // Check bridge has been paused\n        if (paused()) return 5;\n\n        return 0;\n    }\n\n    /**\n        @notice\n            Recover signer from the payload and signature\n        @param payload Payload\n        @param signature Signature\n    */\n    function recoverSignature(\n        bytes memory payload,\n        bytes memory signature\n    ) public pure returns (address signer) {\n        signer = keccak256(payload)\n            .toBytesPrefixed()\n            .recover(signature);\n    }\n\n    /**\n        @notice Forced set of next round relays\n        @dev Can be called only by `roundSubmitter`\n        @param _relays Next round relays\n        @param roundEnd Round end\n    */\n    function forceRoundRelays(\n        uint160[] calldata _relays,\n        uint32 roundEnd\n    ) override external {\n        require(msg.sender == roundSubmitter, \"Bridge: sender not round submitter\");\n\n        _setRound(lastRound + 1, _relays, roundEnd);\n\n        lastRound++;\n    }\n\n    /**\n        @notice Set round submitter\n        @dev Can be called only by owner\n        @param _roundSubmitter New round submitter address\n    */\n    function setRoundSubmitter(\n        address _roundSubmitter\n    ) override external onlyOwner {\n        roundSubmitter = _roundSubmitter;\n\n        emit UpdateRoundSubmitter(roundSubmitter);\n    }\n\n    /**\n        @dev Grant relay permission for set of addresses at specific round\n        @param payload Bytes encoded TONEvent structure\n        @param signatures Payload signatures\n    */\n    function setRoundRelays(\n        bytes calldata payload,\n        bytes[] calldata signatures\n    ) override external notCached(payload) {\n        require(\n            verifySignedTonEvent(\n                payload,\n                signatures\n            ) == 0,\n            \"Bridge: signatures verification failed\"\n        );\n\n        (TONEvent memory tonEvent) = abi.decode(payload, (TONEvent));\n\n        require(\n            tonEvent.proxy == address(this),\n            \"Bridge: wrong event proxy\"\n        );\n\n        require(\n            tonEvent.configurationWid == roundRelaysConfiguration.wid &&\n            tonEvent.configurationAddress == roundRelaysConfiguration.addr,\n            \"Bridge: wrong event configuration\"\n        );\n\n        (uint32 round, uint160[] memory _relays, uint32 roundEnd) = decodeRoundRelaysEventData(payload);\n\n        require(round == lastRound + 1, \"Bridge: wrong round\");\n\n        _setRound(round, _relays, roundEnd);\n\n        lastRound++;\n    }\n\n    function decodeRoundRelaysEventData(\n        bytes memory payload\n    ) public pure returns(\n        uint32 round,\n        uint160[] memory _relays,\n        uint32 roundEnd\n    ) {\n        (TONEvent memory tonEvent) = abi.decode(payload, (TONEvent));\n\n        (round, _relays, roundEnd) = abi.decode(\n            tonEvent.eventData,\n            (uint32, uint160[], uint32)\n        );\n    }\n\n    /**\n        @notice\n            Ban relays\n        @param _relays List of relay addresses to ban\n    */\n    function banRelays(\n        address[] calldata _relays\n    ) override external onlyOwner {\n        for (uint i=0; i<_relays.length; i++) {\n            blacklist[_relays[i]] = true;\n\n            emit BanRelay(_relays[i], true);\n        }\n    }\n\n    /**\n        @notice\n            Unban relays\n        @param _relays List of relay addresses to unban\n    */\n    function unbanRelays(\n        address[] calldata _relays\n    ) override external onlyOwner {\n        for (uint i=0; i<_relays.length; i++) {\n            blacklist[_relays[i]] = false;\n\n            emit BanRelay(_relays[i], false);\n        }\n    }\n\n    function _setRound(\n        uint32 round,\n        uint160[] memory _relays,\n        uint32 roundEnd\n    ) internal {\n        uint32 requiredSignatures = uint32(_relays.length * 2 / 3) + 1;\n\n        rounds[round] = Round(\n            roundEnd,\n            roundEnd + roundTTL,\n            requiredSignatures < minimumRequiredSignatures ? minimumRequiredSignatures : requiredSignatures\n        );\n\n        emit NewRound(round, rounds[round]);\n\n        for (uint i=0; i<_relays.length; i++) {\n            address relay = address(_relays[i]);\n\n            relays[round][relay] = true;\n\n            emit RoundRelay(round, relay);\n        }\n    }\n\n    function _countRelaySignatures(\n        bytes memory payload,\n        bytes[] memory signatures,\n        uint32 round\n    ) internal view returns (uint32) {\n        address lastSigner = address(0);\n        uint32 count = 0;\n\n        for (uint i=0; i<signatures.length; i++) {\n            address signer = recoverSignature(payload, signatures[i]);\n\n            require(signer > lastSigner, \"Bridge: signatures sequence wrong\");\n            lastSigner = signer;\n\n            if (isRelay(round, signer) && !isBanned(signer)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n"
    },
    "contracts/interfaces/IBridge.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n\ninterface IBridge {\n    struct TONEvent {\n        uint64 eventTransactionLt;\n        uint32 eventTimestamp;\n        bytes eventData;\n        int8 configurationWid;\n        uint256 configurationAddress;\n        int8 eventContractWid;\n        uint256 eventContractAddress;\n        address proxy;\n        uint32 round;\n    }\n\n    struct Round {\n        uint32 end;\n        uint32 ttl;\n        uint32 requiredSignatures;\n    }\n\n    struct TONAddress {\n        int8 wid;\n        uint256 addr;\n    }\n\n    function updateMinimumRequiredSignatures(uint32 _minimumRequiredSignatures) external;\n    function updateRoundRelaysConfiguration(TONAddress calldata _roundRelaysConfiguration) external;\n    function updateRoundTTL(uint32 _roundTTL) external;\n\n    function isRelay(\n        uint32 round,\n        address candidate\n    ) external view returns(bool);\n\n    function isBanned(\n        address candidate\n    ) external view returns(bool);\n\n    function isRoundRotten(\n        uint32 round\n    ) external view returns(bool);\n\n    function verifySignedTonEvent(\n        bytes memory payload,\n        bytes[] memory signatures\n    ) external view returns(uint32);\n\n    function setRoundRelays(\n        bytes calldata payload,\n        bytes[] calldata signatures\n    ) external;\n\n    function forceRoundRelays(\n        uint160[] calldata _relays,\n        uint32 roundEnd\n    ) external;\n\n    function banRelays(\n        address[] calldata _relays\n    ) external;\n\n    function unbanRelays(\n        address[] calldata _relays\n    ) external;\n\n    function pause() external;\n    function unpause() external;\n\n    function setRoundSubmitter(address _roundSubmitter) external;\n\n    event EmergencyShutdown(bool active);\n\n    event UpdateMinimumRequiredSignatures(uint32 value);\n    event UpdateRoundTTL(uint32 value);\n    event UpdateRoundRelaysConfiguration(TONAddress configuration);\n    event UpdateRoundSubmitter(address _roundSubmitter);\n\n    event NewRound(uint32 indexed round, Round meta);\n    event RoundRelay(uint32 indexed round, address indexed relay);\n    event BanRelay(address indexed relay, bool status);\n}\n"
    },
    "contracts/libraries/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.2;\n\nlibrary ECDSA {\n\n    /**\n     * @dev Recover signer address from a message by using their signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes memory signature)\n    internal\n    pure\n    returns (address)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        if (signature.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables with inline assembly.\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            // solium-disable-next-line arg-overflow\n            return ecrecover(hash, v, r, s);\n        }\n    }\n\n    /**\n      * toBytesPrefixed\n      * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n      * and hash the result\n      */\n    function toBytesPrefixed(bytes32 hash)\n    internal\n    pure\n    returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n        );\n    }\n}\n"
    },
    "contracts/utils/Cache.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n\ncontract Cache {\n    mapping (bytes32 => bool) public cache;\n\n    modifier notCached(bytes memory payload) {\n        bytes32 hash_ = keccak256(abi.encode(payload));\n\n        require(cache[hash_] == false, \"Cache: payload already seen\");\n\n        _;\n\n        cache[hash_] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/DAO.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBridge.sol\";\nimport \"./interfaces/IDAO.sol\";\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./utils/Cache.sol\";\nimport \"./utils/ChainId.sol\";\n\n\n/// @title DAO contract for Broxus TON-Ethereum bridge\n/// @dev Executes proposals confirmed in TON DAO.\n/// Proposals are submitted in form of payloads and signatures\ncontract DAO is IDAO, ReentrancyGuard, OwnableUpgradeable, Cache, ChainId {\n    address public bridge;\n    IBridge.TONAddress public configuration;\n\n    /**\n        @notice\n            Initializer\n        @param _owner DAO owner. Should be used only for initial set up,\n            than ownership should be transferred to DAO itself.\n        @param _bridge Bridge address\n    */\n    function initialize(\n        address _owner,\n        address _bridge\n    ) public initializer {\n        bridge = _bridge;\n\n        __Ownable_init();\n        transferOwnership(_owner);\n    }\n\n    /**\n        @notice\n            Update address of the TON configuration, that emits actions for this DAO\n        @param _configuration New configuration TON address\n    */\n    function updateConfiguration(\n        IBridge.TONAddress calldata _configuration\n    ) public onlyOwner {\n        configuration = _configuration;\n    }\n\n    /// @dev Update bridge address\n    /// @param _bridge New bridge address\n    function updateBridge(\n        address _bridge\n    ) override external onlyOwner {\n        bridge = _bridge;\n    }\n\n    function decodeEthActionsEventData(\n        bytes memory payload\n    ) public pure returns(\n        int8 _wid,\n        uint256 _addr,\n        uint32 chainId,\n        EthAction[] memory actions\n    ) {\n        (IBridge.TONEvent memory tonEvent) = abi.decode(payload, (IBridge.TONEvent));\n\n        return abi.decode(\n            tonEvent.eventData,\n            (int8, uint256, uint32, EthAction[])\n        );\n    }\n\n    /**\n        @notice\n            Execute set of actions.\n        @dev\n\n        @param payload Encoded TON event with payload details\n        @param signatures Payload signatures\n        @return responses Bytes-encoded payload action responses\n    */\n    function execute(\n        bytes calldata payload,\n        bytes[] calldata signatures\n    ) override external nonReentrant notCached(payload) returns(\n        bytes[] memory responses\n    ) {\n        require(\n            IBridge(bridge).verifySignedTonEvent(\n                payload,\n                signatures\n            ) == 0,\n            \"DAO: signatures verification failed\"\n        );\n\n        (IBridge.TONEvent memory tonEvent) = abi.decode(payload, (IBridge.TONEvent));\n\n        require(\n            tonEvent.proxy == address(this),\n            \"DAO: wrong event proxy\"\n        );\n\n        require(\n            tonEvent.configurationWid == configuration.wid &&\n            tonEvent.configurationAddress == configuration.addr,\n            \"DAO: wrong event configuration\"\n        );\n\n        (\n            int8 _wid,\n            uint256 _addr,\n            uint32 chainId,\n            EthAction[] memory actions\n        ) = decodeEthActionsEventData(payload);\n\n        require(\n            chainId == getChainID(),\n            \"DAO: wrong chain id\"\n        );\n\n        responses = new bytes[](actions.length);\n\n        for (uint i=0; i<actions.length; i++) {\n            EthAction memory action = actions[i];\n\n            bytes memory callData;\n\n            if (bytes(action.signature).length == 0) {\n                callData = action.data;\n            } else {\n                callData = abi.encodePacked(\n                    bytes4(keccak256(bytes(action.signature))),\n                    action.data\n                );\n            }\n\n            (bool success, bytes memory response) = address(action.target)\n                .call{value: action.value}(callData);\n\n            require(success, \"DAO: execution fail\");\n\n            responses[i] = response;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IDAO.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n\nimport \"./IBridge.sol\";\n\n\ninterface IDAO {\n    struct EthAction {\n        uint value;\n        uint160 target;\n        string signature;\n        bytes data;\n    }\n\n    function updateBridge(\n        address _bridge\n    ) external;\n\n    function execute(\n        bytes memory payload,\n        bytes[] memory signatures\n    ) external returns(bytes[] memory responses);\n\n    event UpdateBridge(address indexed bridge);\n    event UpdateConfiguration(IBridge.TONAddress configuration);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/utils/ChainId.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.2;\n\n\ncontract ChainId {\n    function getChainID() public view returns (uint256) {\n        uint256 id;\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n}\n"
    },
    "contracts/vault/VaultWrapper.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.2;\n\nimport \"./../interfaces/IBridge.sol\";\nimport \"./../interfaces/IVault.sol\";\nimport \"../interfaces/IVaultWrapper.sol\";\nimport \"../utils/ChainId.sol\";\n\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\n\ncontract VaultWrapper is ChainId, Initializable, IVaultWrapper {\n    address constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\n    string constant API_VERSION = \"1.0.0\";\n\n    address public vault;\n\n    function initialize(\n        address _vault\n    ) external override initializer {\n        vault = _vault;\n    }\n\n    function apiVersion()\n        external\n        override\n        view\n    returns (\n        string memory api_version\n    ) {\n        return API_VERSION;\n    }\n\n    /**\n        @notice\n            Most common entry point for Broxus Bridge.this\n            Simply transfers tokens to the FreeTON side.\n        @param recipient Recipient TON address\n        @param amount Amount of tokens to be deposited\n    */\n    function deposit(\n        IVault.TONAddress memory recipient,\n        uint256 amount\n    ) external {\n        IVault(vault).deposit(\n            msg.sender,\n            recipient,\n            amount,\n            ZERO_ADDRESS\n        );\n    }\n\n    /**\n        @notice\n            Special type of deposit, which allows to fill specified\n            pending withdrawals. Set of fillings should be created off-chain.\n            Usually allows depositor to receive additional reward (bounty) on the FreeTON side.\n        @param recipient Recipient TON address\n        @param amount Amount of tokens to be deposited, should be gte than sum(fillings)\n        @param pendingWithdrawalsToFill List of addresses, whose pending withdrawals will be filled with deposit\n    */\n    function depositWithFillings(\n        IVault.TONAddress calldata recipient,\n        uint256 amount,\n        address[] calldata pendingWithdrawalsToFill\n    ) external {\n        require(\n            pendingWithdrawalsToFill.length > 0,\n            'Wrapper: no pending withdrawals specified'\n        );\n\n        for (uint i = 0; i < pendingWithdrawalsToFill.length; i++) {\n            IVault(vault).deposit(\n                msg.sender,\n                recipient,\n                amount,\n                pendingWithdrawalsToFill[i]\n            );\n        }\n    }\n\n    function decodeWithdrawEventData(\n        bytes memory payload\n    ) public pure returns (\n        int8 sender_wid,\n        uint256 sender_addr,\n        uint128 amount,\n        uint160 _recipient,\n        uint32 chainId\n    ) {\n        (IBridge.TONEvent memory tonEvent) = abi.decode(payload, (IBridge.TONEvent));\n\n        return abi.decode(\n            tonEvent.eventData,\n            (int8, uint256, uint128, uint160, uint32)\n        );\n    }\n\n    /**\n        @notice Entry point for withdrawing tokens from the Broxus Bridge.\n        Expects payload with withdraw details and list of relay's signatures.\n        @param payload Bytes encoded `IBridge.TONEvent` structure\n        @param signatures Set of relay's signatures\n        @param bounty Pending withdraw bounty, can be set only by withdraw recipient. Ignores otherwise.\n    */\n    function saveWithdraw(\n        bytes calldata payload,\n        bytes[] calldata signatures,\n        uint256 bounty\n    ) external {\n        address bridge = IVault(vault).bridge();\n\n        // Check signatures correct\n        require(\n            IBridge(bridge).verifySignedTonEvent(\n                payload,\n                signatures\n            ) == 0,\n            \"Vault wrapper: signatures verification failed\"\n        );\n\n        // Decode TON event\n        (IBridge.TONEvent memory tonEvent) = abi.decode(payload, (IBridge.TONEvent));\n\n        // Check event proxy is correct\n        require(\n            tonEvent.proxy == vault,\n            \"Vault wrapper: wrong event proxy\"\n        );\n\n        // dev: fix stack too deep\n        {\n            // Check event configuration matches Vault's configuration\n            IVault.TONAddress memory configuration = IVault(vault).configuration();\n\n            require(\n                tonEvent.configurationWid == configuration.wid &&\n                tonEvent.configurationAddress == configuration.addr,\n                \"Vault wrapper: wrong event configuration\"\n            );\n        }\n\n        // Decode event data\n        (\n            int8 sender_wid,\n            uint256 sender_addr,\n            uint128 amount,\n            uint160 _recipient,\n            uint32 chainId\n        ) = decodeWithdrawEventData(payload);\n\n        // Check chain id\n        require(chainId == getChainID(), \"Vault wrapper: wrong chain id\");\n\n        address recipient = address(_recipient);\n\n        IVault(vault).saveWithdraw(\n            keccak256(payload),\n            recipient,\n            amount,\n            recipient == msg.sender ? bounty : 0\n        );\n    }\n}\n"
    },
    "contracts/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.2;\n\n\ninterface IVault {\n    struct TONAddress {\n        int128 wid;\n        uint256 addr;\n    }\n\n    function saveWithdraw(\n        bytes32 id,\n        address recipient,\n        uint256 amount,\n        uint256 bounty\n    ) external;\n\n    function deposit(\n        address sender,\n        TONAddress calldata recipient,\n        uint256 _amount,\n        address pendingWithdrawalToFill\n    ) external;\n\n    function configuration() external view returns(TONAddress memory _configuration);\n    function bridge() external view returns(address);\n    function apiVersion() external view returns(string memory api_version);\n\n    function initialize(\n        address _token,\n        address _governance,\n        address _bridge,\n        address wrapper,\n        address guardian,\n        address management\n    ) external;\n\n    function governance() external view returns(address);\n    function token() external view returns(address);\n}\n"
    },
    "contracts/interfaces/IVaultWrapper.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.2;\n\n\ninterface IVaultWrapper {\n    function initialize(address _vault) external;\n    function apiVersion() external view returns(string memory);\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/vault/Registry.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.2;\n\nimport \"./../interfaces/IBridge.sol\";\nimport \"./../interfaces/IVault.sol\";\nimport \"./../interfaces/IRegistry.sol\";\nimport \"./../interfaces/IVaultWrapper.sol\";\n\nimport \"./VaultWrapper.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\n\ncontract Registry is Ownable, IRegistry {\n    address constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\n\n    // len(releases)\n    uint256 public numReleases;\n    mapping(uint256 => address) public releases;\n    // Token => len(vaults)\n    mapping(address => uint256) public numVaults;\n    mapping(address => mapping(uint256 => address)) vaults;\n\n    // Index of token added => token address\n    mapping(uint256 => address) tokens;\n    // len(tokens)\n    uint256 public numTokens;\n    // Inclusion check for token\n    mapping(address => bool) public isRegistered;\n\n    address public bridge;\n    address public proxyAdmin;\n    address public wrapper;\n\n    mapping(address => string) public tags;\n    mapping(address => bool) public banksy;\n\n    function compareStrings(\n        string memory a,\n        string memory b\n    ) internal pure returns (bool) {\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\n    }\n\n    constructor(\n        address _bridge,\n        address _proxyAdmin,\n        address _wrapper\n    ) {\n        bridge = _bridge;\n        proxyAdmin = _proxyAdmin;\n        wrapper = _wrapper;\n    }\n\n    function setBridge(\n        address _bridge\n    ) external onlyOwner {\n        bridge = _bridge;\n    }\n\n    function setProxyAdmin(\n        address _proxyAdmin\n    ) external onlyOwner {\n        proxyAdmin = _proxyAdmin;\n    }\n\n    function latestRelease()\n        external\n        view\n    returns(\n        string memory api_version\n    ) {\n        return IVault(releases[numReleases - 1]).apiVersion();\n    }\n\n    function latestVault(\n        address token\n    )\n        external\n        view\n    returns(\n        address\n    ) {\n        return vaults[token][numVaults[token] - 1];\n    }\n\n    function newRelease(\n        address vault\n    ) external onlyOwner {\n        uint256 release_id = numReleases;\n\n        if (release_id > 0) {\n            require(\n                !compareStrings(\n                    IVault(releases[release_id - 1]).apiVersion(),\n                    IVault(vault).apiVersion()\n                ),\n                \"Registry: new release should have different api version\"\n            );\n        }\n\n        releases[release_id] = vault;\n        numReleases = release_id + 1;\n\n        emit NewRelease(release_id, vault, IVault(vault).apiVersion());\n    }\n\n    function _newProxyVault(\n        address token,\n        address governance,\n        address guardian,\n        uint256 releaseTarget\n    ) internal returns(address) {\n        address release = releases[releaseTarget];\n\n        require(release != ZERO_ADDRESS, \"Registry: release target is wrong\");\n\n        // Deploy Vault release proxy, owned by proxy admin\n        TransparentUpgradeableProxy vaultProxy = new TransparentUpgradeableProxy(\n            release,\n            proxyAdmin,\n            \"\"\n        );\n\n        // Deploy wrapper proxy\n        TransparentUpgradeableProxy _wrapper = new TransparentUpgradeableProxy(\n            wrapper,\n            proxyAdmin,\n            \"\"\n        );\n\n        // Initialize wrapper\n        IVaultWrapper(address(_wrapper)).initialize(\n            address(vaultProxy)\n        );\n\n        // Initialize Vault\n        IVault(address(vaultProxy)).initialize(\n            token,\n            governance,\n            bridge,\n            address(_wrapper),\n            guardian,\n            ZERO_ADDRESS\n        );\n\n        return address(vaultProxy);\n    }\n\n    function _registerVault(\n        address token,\n        address vault\n    ) internal {\n        uint256 vault_id = numVaults[token];\n\n        if (vault_id > 0) {\n            require(\n                !compareStrings(\n                    IVault(vaults[token][vault_id - 1]).apiVersion(),\n                    IVault(vault).apiVersion()\n                ),\n                \"Registry: new vault should have different api version\"\n            );\n        }\n\n        vaults[token][vault_id] = vault;\n        numVaults[token] = vault_id + 1;\n\n        if (!isRegistered[token]) {\n            isRegistered[token] = true;\n            tokens[numTokens] = token;\n            numTokens += 1;\n        }\n\n        emit NewVault(token, vault_id, vault, IVault(vault).apiVersion());\n    }\n\n    function newVault(\n        address token,\n        address guardian,\n        uint256 releaseDelta\n    ) external onlyOwner returns (address) {\n        uint256 releaseTarget = numReleases - 1 - releaseDelta;\n\n        address vault = _newProxyVault(\n            token,\n            msg.sender,\n            guardian,\n            releaseTarget\n        );\n\n        _registerVault(token, vault);\n\n        return vault;\n    }\n\n    function newExperimentalVault(\n        address token,\n        address governance,\n        address guardian,\n        uint256 releaseDelta\n    ) external returns(address) {\n        uint256 releaseTarget = numReleases - 1 - releaseDelta;\n\n        address vault = _newProxyVault(\n            token,\n            governance,\n            guardian,\n            releaseTarget\n        );\n\n        emit NewExperimentalVault(\n            token,\n            msg.sender,\n            vault,\n            IVault(vault).apiVersion()\n        );\n\n        return vault;\n    }\n\n    function endorseVault(\n        address vault,\n        uint256 releaseDelta\n    ) external onlyOwner {\n        require(\n            IVault(vault).governance() == msg.sender,\n            \"Registry: wrong vault governance\"\n        );\n\n        uint256 releaseTarget = numReleases - 1 - releaseDelta;\n        string memory api_version = IVault(releases[releaseTarget]).apiVersion();\n\n        require(\n            compareStrings(IVault(vault).apiVersion(), api_version),\n            \"Registry: vault should have same api version as release\"\n        );\n\n        _registerVault(IVault(vault).token(), vault);\n    }\n\n    function setBanksy(\n        address tagger,\n        bool allowed\n    ) external onlyOwner {\n        banksy[tagger] = allowed;\n    }\n\n    function tagVault(\n        address vault,\n        string memory tag\n    ) external {\n        if (msg.sender != owner()) {\n            require(\n                banksy[msg.sender],\n                \"Registry: only owner or banksy allowed to tag\"\n            );\n        }\n\n        tags[vault] = tag;\n        emit VaultTagged(vault, tag);\n    }\n}\n"
    },
    "contracts/interfaces/IRegistry.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.2;\n\ninterface IRegistry {\n    event NewRelease(\n        uint256 indexed release_id,\n        address template,\n        string api_version\n    );\n\n    event NewVault(\n        address indexed token,\n        uint256 indexed vault_id,\n        address vault,\n        string api_version\n    );\n\n    event NewExperimentalVault(\n        address indexed token,\n        address indexed deployer,\n        address vault,\n        string api_version\n    );\n\n    event VaultTagged(address vault, string tag);\n\n    event UpdateVaultWrapper(address indexed vaultWrapper);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/libraries/UniversalERC20.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary UniversalERC20 {\n    using SafeERC20 for IERC20;\n\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\n        if (amount == 0) {\n            return;\n        }\n\n        token.safeTransferFrom(from, to, amount);\n    }\n\n    function universalTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal returns(bool) {\n        if (amount == 0) {\n            return true;\n        }\n\n        token.safeTransfer(to, amount);\n        return true;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}