{
  "language": "Solidity",
  "sources": {
    "contracts/bridge/Bridge.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./../interfaces/IBridge.sol\";\nimport \"./../libraries/ECDSA.sol\";\n\nimport \"./../utils/Cache.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\n\n/// @title Ethereum Bridge contract\n/// @author https://github.com/broxus\n/// @dev Stores relays for each round, implements slashing, helps in validating TON-ETH events\ncontract Bridge is OwnableUpgradeable, PausableUpgradeable, Cache, IBridge {\n    using ECDSA for bytes32;\n\n    // NOTE: round number -> address -> is relay?\n    mapping (uint32 => mapping(address => bool)) public relays;\n\n    // NOTE: is relay banned or not\n    mapping (address => bool) public blacklist;\n\n    // NOTE: round meta data\n    mapping (uint32 => Round) public rounds;\n\n    // NOTE: signature verifications always fails is emergency is on\n    bool public emergencyShutdown;\n\n    // NOTE: The required signatures per round can't be less than this\n    uint32 public minimumRequiredSignatures;\n\n    // NOTE: how long round signatures are considered valid after the end of the round\n    uint32 public roundTTL;\n\n    // NOTE: initial round number\n    uint32 public initialRound;\n\n    // NOTE: last round with known relays\n    uint32 public lastRound;\n\n    // NOTE: Broxus Bridge TON-ETH configuration address, that emits event with round relays\n    TONAddress public roundRelaysConfiguration;\n\n    /**\n        @notice\n            Bridge initializer\n        @dev\n            `roundRelaysConfiguration` should be specified later.\n        @param _owner Bridge owner\n        @param _minimumRequiredSignatures Minimum required signatures per round.\n        @param _roundTTL Round TTL after round ends.\n        @param _initialRound Initial round number. Useful in case new EVM network is connected to the bridge.\n        @param _initialRoundEnd Initial round end timestamp.\n        @param _relays Initial set of relays. Encode addresses as uint160\n    */\n    function initialize(\n        address _owner,\n        uint32 _minimumRequiredSignatures,\n        uint32 _roundTTL,\n        uint32 _initialRound,\n        uint32 _initialRoundEnd,\n        uint160[] calldata _relays\n    ) external initializer {\n        __Pausable_init();\n        __Ownable_init();\n        transferOwnership(_owner);\n\n        minimumRequiredSignatures = _minimumRequiredSignatures;\n        emit UpdateMinimumRequiredSignatures(minimumRequiredSignatures);\n\n        roundTTL = _roundTTL;\n        emit UpdateRoundTTL(roundTTL);\n\n        require(\n            _initialRoundEnd >= block.timestamp,\n            \"Bridge: initial round end should be in the future\"\n        );\n\n        initialRound = _initialRound;\n        _setRound(initialRound, _relays, _initialRoundEnd);\n\n        lastRound = initialRound;\n    }\n\n    /**\n        @notice\n            Update address of configuration, that emits event with next round relays.\n        @param _roundRelaysConfiguration TON address of configuration\n    */\n    function updateRoundRelaysConfiguration(\n        TONAddress calldata _roundRelaysConfiguration\n    ) external override onlyOwner {\n        emit UpdateRoundRelaysConfiguration(_roundRelaysConfiguration);\n\n        roundRelaysConfiguration = _roundRelaysConfiguration;\n    }\n\n    /**\n        @notice\n            Pause Bridge contract.\n        @dev\n            When Bridge paused, signature verification fails.\n    */\n    function pause() external override onlyOwner {\n        _pause();\n    }\n\n    /**\n        @notice\n            Unpause Bridge contract.\n    */\n    function unpause() external override onlyOwner {\n        _unpause();\n    }\n\n    /**\n        @notice\n            Update minimum amount of required signatures per round\n        @param _minimumRequiredSignatures New value\n    */\n    function updateMinimumRequiredSignatures(\n        uint32 _minimumRequiredSignatures\n    ) external override onlyOwner {\n        minimumRequiredSignatures = _minimumRequiredSignatures;\n\n        emit UpdateMinimumRequiredSignatures(_minimumRequiredSignatures);\n    }\n\n    /**\n        @notice\n            Update round TTL\n        @dev\n            This affects only future rounds. Rounds, that were already set,\n            keep their current TTL.\n        @param _roundTTL New TTL value\n    */\n    function updateRoundTTL(\n        uint32 _roundTTL\n    ) external override onlyOwner {\n        roundTTL = _roundTTL;\n\n        emit UpdateRoundTTL(_roundTTL);\n    }\n\n    /// @dev Check if relay is banned.\n    /// Ban is global. If the relay is banned it means it lost\n    /// relay power in all rounds, past and future.\n    /// @param candidate Address to check\n    function isBanned(\n        address candidate\n    ) override public view returns(bool) {\n        return blacklist[candidate];\n    }\n\n    /// @dev Check if some address is relay at specific round\n    /// @param round Round id\n    /// @param candidate Address to check\n    function isRelay(\n        uint32 round,\n        address candidate\n    ) override public view returns (bool) {\n        return relays[round][candidate];\n    }\n\n    /// @dev Check if round is rotten\n    /// @param round Round id\n    function isRoundRotten(\n        uint32 round\n    ) override public view returns (bool) {\n        return block.timestamp > rounds[round].ttl;\n    }\n\n    /**\n        @notice\n            Verify payload signatures.\n        @dev\n            Signatures should be sorted by the ascending signers.\n            Error codes:\n                0. Verification passed (no error)\n                1. Specified round is less than `initialRound`\n                2. Specified round is more than `lastRound`\n                3. Not enough correct signatures. Possible reasons:\n                    - Some of the signers are not relays at the specified round\n                    - Some of the signers are banned\n                4. Round is rotten.\n                5. Everything is correct, but bridge is in \"paused\" state\n\n        @param payload Bytes encoded TONEvent structure\n        @param signatures Payload signatures\n        @return errorCode Error code\n    */\n    function verifySignedTonEvent(\n        bytes memory payload,\n        bytes[] memory signatures\n    )\n        override\n        public\n        view\n    returns (\n        uint32 errorCode\n    ) {\n        (TONEvent memory tonEvent) = abi.decode(payload, (TONEvent));\n\n        if (tonEvent.round < initialRound) return 1;\n        if (tonEvent.round > lastRound) return 2;\n\n        // Check there are enough correct signatures\n        uint32 count = _countRelaySignatures(payload, signatures, tonEvent.round);\n        if (count < rounds[tonEvent.round].requiredSignatures) return 3;\n\n        // Check round rotten\n        if (isRoundRotten(tonEvent.round)) return 4;\n\n        // Check bridge has been paused\n        if (paused()) return 5;\n\n        return 0;\n    }\n\n    /**\n        @notice\n            Recover signer from the payload and signature\n        @param payload Payload\n        @param signature Signature\n    */\n    function recoverSignature(\n        bytes memory payload,\n        bytes memory signature\n    ) public pure returns (address signer) {\n        signer = keccak256(payload)\n            .toBytesPrefixed()\n            .recover(signature);\n    }\n\n    /// @dev Grant relay permission for set of addresses at specific round\n    /// @param payload Bytes encoded TONEvent structure\n    /// @param signatures Payload signatures\n    function setRoundRelays(\n        bytes calldata payload,\n        bytes[] calldata signatures\n    ) override external notCached(payload) {\n        require(\n            verifySignedTonEvent(\n                payload,\n                signatures\n            ) == 0,\n            \"Bridge: signatures verification failed\"\n        );\n\n        (TONEvent memory tonEvent) = abi.decode(payload, (TONEvent));\n\n        require(\n            tonEvent.proxy == address(this),\n            \"Bridge: wrong event proxy\"\n        );\n\n        require(\n            tonEvent.configurationWid == roundRelaysConfiguration.wid &&\n            tonEvent.configurationAddress == roundRelaysConfiguration.addr,\n            \"Bridge: wrong event configuration\"\n        );\n\n        (uint32 round, uint160[] memory _relays, uint32 roundEnd) = abi.decode(\n            tonEvent.eventData,\n            (uint32, uint160[], uint32)\n        );\n\n        require(round == lastRound + 1, \"Bridge: wrong round\");\n\n        _setRound(round, _relays, roundEnd);\n\n        lastRound++;\n    }\n\n    /**\n        @notice\n            Ban relays\n        @param _relays List of relay addresses to ban\n    */\n    function banRelays(\n        address[] calldata _relays\n    ) override external onlyOwner {\n        for (uint i=0; i<_relays.length; i++) {\n            blacklist[_relays[i]] = true;\n\n            emit BanRelay(_relays[i], true);\n        }\n    }\n\n    /**\n        @notice\n            Unban relays\n        @param _relays List of relay addresses to unban\n    */\n    function unbanRelays(\n        address[] calldata _relays\n    ) override external onlyOwner {\n        for (uint i=0; i<_relays.length; i++) {\n            blacklist[_relays[i]] = false;\n\n            emit BanRelay(_relays[i], false);\n        }\n    }\n\n    function _setRound(\n        uint32 round,\n        uint160[] memory _relays,\n        uint32 roundEnd\n    ) internal {\n        uint32 requiredSignatures = uint32(_relays.length * 2 / 3) + 1;\n\n        rounds[round] = Round(\n            roundEnd,\n            roundEnd + roundTTL,\n            requiredSignatures < minimumRequiredSignatures ? minimumRequiredSignatures : requiredSignatures\n        );\n\n        emit NewRound(round, rounds[round]);\n\n        for (uint i=0; i<_relays.length; i++) {\n            address relay = address(_relays[i]);\n\n            relays[round][relay] = true;\n\n            emit RoundRelay(round, relay);\n        }\n    }\n\n    function _countRelaySignatures(\n        bytes memory payload,\n        bytes[] memory signatures,\n        uint32 round\n    ) internal view returns (uint32) {\n        address lastSigner = address(0);\n        uint32 count = 0;\n\n        for (uint i=0; i<signatures.length; i++) {\n            address signer = recoverSignature(payload, signatures[i]);\n\n            require(signer > lastSigner, \"Bridge: signatures sequence wrong\");\n            lastSigner = signer;\n\n            if (isRelay(round, signer) && !isBanned(signer)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n"
    },
    "contracts/interfaces/IBridge.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n\ninterface IBridge {\n    struct TONEvent {\n        uint64 eventTransactionLt;\n        uint32 eventTimestamp;\n        bytes eventData;\n        int8 configurationWid;\n        uint256 configurationAddress;\n        int8 eventContractWid;\n        uint256 eventContractAddress;\n        address proxy;\n        uint32 round;\n    }\n\n    struct Round {\n        uint32 end;\n        uint32 ttl;\n        uint32 requiredSignatures;\n    }\n\n    struct TONAddress {\n        int8 wid;\n        uint256 addr;\n    }\n\n    function updateMinimumRequiredSignatures(uint32 _minimumRequiredSignatures) external;\n    function updateRoundRelaysConfiguration(TONAddress calldata _roundRelaysConfiguration) external;\n    function updateRoundTTL(uint32 _roundTTL) external;\n\n    function isRelay(\n        uint32 round,\n        address candidate\n    ) external view returns(bool);\n\n    function isBanned(\n        address candidate\n    ) external view returns(bool);\n\n    function isRoundRotten(\n        uint32 round\n    ) external view returns(bool);\n\n    function verifySignedTonEvent(\n        bytes memory payload,\n        bytes[] memory signatures\n    ) external view returns(uint32);\n\n    function setRoundRelays(\n        bytes calldata payload,\n        bytes[] calldata signatures\n    ) external;\n\n    function banRelays(\n        address[] calldata _relays\n    ) external;\n\n    function unbanRelays(\n        address[] calldata _relays\n    ) external;\n\n    function pause() external;\n    function unpause() external;\n\n    event EmergencyShutdown(bool active);\n\n    event UpdateMinimumRequiredSignatures(uint32 value);\n    event UpdateRoundTTL(uint32 value);\n    event UpdateRoundRelaysConfiguration(TONAddress configuration);\n\n    event NewRound(uint32 indexed round, Round meta);\n    event RoundRelay(uint32 indexed round, address indexed relay);\n    event BanRelay(address indexed relay, bool status);\n}\n"
    },
    "contracts/libraries/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nlibrary ECDSA {\n\n    /**\n     * @dev Recover signer address from a message by using their signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes memory signature)\n    internal\n    pure\n    returns (address)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        if (signature.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables with inline assembly.\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            // solium-disable-next-line arg-overflow\n            return ecrecover(hash, v, r, s);\n        }\n    }\n\n    /**\n      * toBytesPrefixed\n      * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n      * and hash the result\n      */\n    function toBytesPrefixed(bytes32 hash)\n    internal\n    pure\n    returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n        );\n    }\n}\n"
    },
    "contracts/utils/Cache.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n\ncontract Cache {\n    mapping (bytes32 => bool) public cache;\n\n    modifier notCached(bytes memory payload) {\n        bytes32 hash_ = keccak256(abi.encode(payload));\n\n        require(cache[hash_] == false, \"Cache: payload already seen\");\n\n        _;\n\n        cache[hash_] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/vault/VaultWrapper.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./../interfaces/IBridge.sol\";\nimport \"../utils/ChainId.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n\ninterface IVault {\n    struct TONAddress {\n        int128 wid;\n        uint256 addr;\n    }\n\n    function saveWithdraw(\n        bytes32 id,\n        address recipient,\n        uint256 amount,\n        uint256 bounty\n    ) external;\n\n    function configuration() external view returns(TONAddress memory _configuration);\n    function bridge() external view returns(address);\n}\n\ncontract VaultWrapper is ChainId, Initializable {\n    address public vault;\n\n    function initialize(\n        address _vault\n    ) initializer external {\n        vault = _vault;\n    }\n\n    function saveWithdraw(\n        bytes calldata payload,\n        bytes[] calldata signatures,\n        uint256 bounty\n    ) external {\n        address bridge = IVault(vault).bridge();\n\n        // Check signatures correct\n        require(\n            IBridge(bridge).verifySignedTonEvent(\n                payload,\n                signatures\n            ) == 0,\n            \"Vault wrapper: signatures verification failed\"\n        );\n\n        // Decode TON event\n        (IBridge.TONEvent memory tonEvent) = abi.decode(payload, (IBridge.TONEvent));\n\n        // Check event proxy is correct\n        require(\n            tonEvent.proxy == vault,\n            \"Vault wrapper: wrong event proxy\"\n        );\n\n        // dev: fix stack too deep\n        {\n            // Check event configuration matches Vault's configuration\n            IVault.TONAddress memory configuration = IVault(vault).configuration();\n\n            require(\n                tonEvent.configurationWid == configuration.wid &&\n                tonEvent.configurationAddress == configuration.addr,\n                \"Vault wrapper: wrong event configuration\"\n            );\n        }\n\n        // Decode event data\n        (\n            int8 sender_wid,\n            uint256 sender_addr,\n            uint128 amount,\n            uint160 _recipient,\n            uint32 chainId\n        ) = abi.decode(\n            tonEvent.eventData,\n            (int8, uint256, uint128, uint160, uint32)\n        );\n\n        // Check chain id\n        require(chainId == getChainID(), \"Vault wrapper: wrong chain id\");\n\n        address recipient = address(_recipient);\n\n        IVault(vault).saveWithdraw(\n            keccak256(payload),\n            recipient,\n            amount,\n            recipient == msg.sender ? bounty : 0\n        );\n    }\n}\n"
    },
    "contracts/utils/ChainId.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n\ncontract ChainId {\n    function getChainID() public view returns (uint256) {\n        uint256 id;\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n}\n"
    },
    "contracts/DAO.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBridge.sol\";\nimport \"./interfaces/IDAO.sol\";\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./utils/Cache.sol\";\nimport \"./utils/ChainId.sol\";\n\n\n/// @title DAO contract for Broxus TON-Ethereum bridge\n/// @dev Executes proposals confirmed in TON DAO.\n/// Proposals are submitted in form of payloads and signatures\ncontract DAO is IDAO, ReentrancyGuard, OwnableUpgradeable, Cache, ChainId {\n    address public bridge;\n    IBridge.TONAddress public configuration;\n\n    /**\n        @notice\n            Initializer\n        @param _owner DAO owner. Should be used only for initial set up,\n            than ownership should be transferred to DAO itself.\n        @param _bridge Bridge address\n    */\n    function initialize(\n        address _owner,\n        address _bridge\n    ) public initializer {\n        bridge = _bridge;\n\n        __Ownable_init();\n        transferOwnership(_owner);\n    }\n\n    /**\n        @notice\n            Update address of the TON configuration, that emits actions for this DAO\n        @param _configuration New configuration TON address\n    */\n    function updateConfiguration(\n        IBridge.TONAddress calldata _configuration\n    ) public onlyOwner {\n        configuration = _configuration;\n    }\n\n    /// @dev Update bridge address\n    /// @param _bridge New bridge address\n    function updateBridge(\n        address _bridge\n    ) override external onlyOwner {\n        bridge = _bridge;\n    }\n\n    /**\n        @notice\n            Execute set of actions.\n        @dev\n\n        @param payload Encoded TON event with payload details\n        @param signatures Payload signatures\n        @return responses Bytes-encoded payload action responses\n    */\n    function execute(\n        bytes calldata payload,\n        bytes[] calldata signatures\n    ) override external nonReentrant notCached(payload) returns(\n        bytes[] memory responses\n    ) {\n        require(\n            IBridge(bridge).verifySignedTonEvent(\n                payload,\n                signatures\n            ) == 0,\n            \"DAO: signatures verification failed\"\n        );\n\n        (IBridge.TONEvent memory tonEvent) = abi.decode(payload, (IBridge.TONEvent));\n\n        require(\n            tonEvent.proxy == address(this),\n            \"DAO: wrong event proxy\"\n        );\n\n        require(\n            tonEvent.configurationWid == configuration.wid &&\n            tonEvent.configurationAddress == configuration.addr,\n            \"DAO: wrong event configuration\"\n        );\n\n        (int8 _wid, uint256 _addr, uint32 chainId, EthAction[] memory actions) = abi.decode(\n            tonEvent.eventData,\n            (int8, uint256, uint32, EthAction[])\n        );\n\n        require(\n            chainId == getChainID(),\n            \"DAO: wrong chain id\"\n        );\n\n        responses = new bytes[](actions.length);\n\n        for (uint i=0; i<actions.length; i++) {\n            EthAction memory action = actions[i];\n\n            bytes memory callData;\n\n            if (bytes(action.signature).length == 0) {\n                callData = action.data;\n            } else {\n                callData = abi.encodePacked(\n                    bytes4(keccak256(bytes(action.signature))),\n                    action.data\n                );\n            }\n\n            (bool success, bytes memory response) = address(action.target)\n                .call{value: action.value}(callData);\n\n            require(success, \"DAO: execution fail\");\n\n            responses[i] = response;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IDAO.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n\nimport \"./IBridge.sol\";\n\n\ninterface IDAO {\n    struct EthAction {\n        uint value;\n        uint160 target;\n        string signature;\n        bytes data;\n    }\n\n    function updateBridge(\n        address _bridge\n    ) external;\n\n    function execute(\n        bytes memory payload,\n        bytes[] memory signatures\n    ) external returns(bytes[] memory responses);\n\n    event UpdateBridge(address indexed bridge);\n    event UpdateConfiguration(IBridge.TONAddress configuration);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
