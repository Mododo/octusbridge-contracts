{
  "address": "0x0F45d589f9B629bEE44Df2d8E9a58B5CC42961BB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "BanRelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "EmergencyShutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "round",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "end",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "ttl",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "relays",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "requiredSignatures",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IBridge.Round",
          "name": "meta",
          "type": "tuple"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "round",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "relay",
          "type": "address"
        }
      ],
      "name": "RoundRelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "UpdateMinimumRequiredSignatures",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "int8",
              "name": "wid",
              "type": "int8"
            },
            {
              "internalType": "uint256",
              "name": "addr",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBridge.TONAddress",
          "name": "configuration",
          "type": "tuple"
        }
      ],
      "name": "UpdateRoundRelaysConfiguration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_roundSubmitter",
          "type": "address"
        }
      ],
      "name": "UpdateRoundSubmitter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "UpdateRoundTTL",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_relays",
          "type": "address[]"
        }
      ],
      "name": "banRelays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "decodeRoundRelaysEventData",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "round",
          "type": "uint32"
        },
        {
          "internalType": "uint160[]",
          "name": "_relays",
          "type": "uint160[]"
        },
        {
          "internalType": "uint32",
          "name": "roundEnd",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "decodeTonEvent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "eventTransactionLt",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "eventTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "eventData",
              "type": "bytes"
            },
            {
              "internalType": "int8",
              "name": "configurationWid",
              "type": "int8"
            },
            {
              "internalType": "uint256",
              "name": "configurationAddress",
              "type": "uint256"
            },
            {
              "internalType": "int8",
              "name": "eventContractWid",
              "type": "int8"
            },
            {
              "internalType": "uint256",
              "name": "eventContractAddress",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "proxy",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "round",
              "type": "uint32"
            }
          ],
          "internalType": "struct IBridge.TONEvent",
          "name": "tonEvent",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyShutdown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160[]",
          "name": "_relays",
          "type": "uint160[]"
        },
        {
          "internalType": "uint32",
          "name": "roundEnd",
          "type": "uint32"
        }
      ],
      "name": "forceRoundRelays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialRound",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roundSubmitter",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_minimumRequiredSignatures",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_roundTTL",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_initialRound",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_initialRoundEnd",
          "type": "uint32"
        },
        {
          "internalType": "uint160[]",
          "name": "_relays",
          "type": "uint160[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "isBanned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "round",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "isRelay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "round",
          "type": "uint32"
        }
      ],
      "name": "isRoundRotten",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRound",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumRequiredSignatures",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "recoverSignature",
      "outputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "relays",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundRelaysConfiguration",
      "outputs": [
        {
          "internalType": "int8",
          "name": "wid",
          "type": "int8"
        },
        {
          "internalType": "uint256",
          "name": "addr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundSubmitter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundTTL",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "end",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "ttl",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "relays",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "requiredSignatures",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "setRoundRelays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roundSubmitter",
          "type": "address"
        }
      ],
      "name": "setRoundSubmitter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_relays",
          "type": "address[]"
        }
      ],
      "name": "unbanRelays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_minimumRequiredSignatures",
          "type": "uint32"
        }
      ],
      "name": "updateMinimumRequiredSignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int8",
              "name": "wid",
              "type": "int8"
            },
            {
              "internalType": "uint256",
              "name": "addr",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBridge.TONAddress",
          "name": "_roundRelaysConfiguration",
          "type": "tuple"
        }
      ],
      "name": "updateRoundRelaysConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_roundTTL",
          "type": "uint32"
        }
      ],
      "name": "updateRoundTTL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "verifySignedTonEvent",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "errorCode",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x25ce7fea2227e80fab25a807bc40bf11f90f778973813526e9e0c2b8824edfc9",
  "receipt": {
    "to": null,
    "from": "0xD843CC69C8fe379809fB757C934c310Ec89bC63F",
    "contractAddress": "0x0F45d589f9B629bEE44Df2d8E9a58B5CC42961BB",
    "transactionIndex": 4,
    "gasUsed": "2278992",
    "logsBloom": "0x
    "blockHash": "0xf98e385182d440c1fb1d009c975983a3d98980443d580fefed5d82b269b18241",
    "transactionHash": "0x25ce7fea2227e80fab25a807bc40bf11f90f778973813526e9e0c2b8824edfc9",
    "logs": [],
    "blockNumber": 5532765,
    "cumulativeGasUsed": "2612300",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "22e20508f4b2a1ab67c19d71655d7ca9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BanRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"ttl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"relays\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"requiredSignatures\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IBridge.Round\",\"name\":\"meta\",\"type\":\"tuple\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"RoundRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"UpdateMinimumRequiredSignatures\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBridge.TONAddress\",\"name\":\"configuration\",\"type\":\"tuple\"}],\"name\":\"UpdateRoundRelaysConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundSubmitter\",\"type\":\"address\"}],\"name\":\"UpdateRoundSubmitter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"UpdateRoundTTL\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_relays\",\"type\":\"address[]\"}],\"name\":\"banRelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"decodeRoundRelaysEventData\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"internalType\":\"uint160[]\",\"name\":\"_relays\",\"type\":\"uint160[]\"},{\"internalType\":\"uint32\",\"name\":\"roundEnd\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"decodeTonEvent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"eventTransactionLt\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"eventTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"},{\"internalType\":\"int8\",\"name\":\"configurationWid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"configurationAddress\",\"type\":\"uint256\"},{\"internalType\":\"int8\",\"name\":\"eventContractWid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"eventContractAddress\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"}],\"internalType\":\"struct IBridge.TONEvent\",\"name\":\"tonEvent\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160[]\",\"name\":\"_relays\",\"type\":\"uint160[]\"},{\"internalType\":\"uint32\",\"name\":\"roundEnd\",\"type\":\"uint32\"}],\"name\":\"forceRoundRelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialRound\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roundSubmitter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_minimumRequiredSignatures\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_roundTTL\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_initialRound\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_initialRoundEnd\",\"type\":\"uint32\"},{\"internalType\":\"uint160[]\",\"name\":\"_relays\",\"type\":\"uint160[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isRelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"}],\"name\":\"isRoundRotten\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRound\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumRequiredSignatures\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recoverSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundRelaysConfiguration\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundSubmitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundTTL\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"ttl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"relays\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"requiredSignatures\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setRoundRelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roundSubmitter\",\"type\":\"address\"}],\"name\":\"setRoundSubmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_relays\",\"type\":\"address[]\"}],\"name\":\"unbanRelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minimumRequiredSignatures\",\"type\":\"uint32\"}],\"name\":\"updateMinimumRequiredSignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IBridge.TONAddress\",\"name\":\"_roundRelaysConfiguration\",\"type\":\"tuple\"}],\"name\":\"updateRoundRelaysConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_roundTTL\",\"type\":\"uint32\"}],\"name\":\"updateRoundTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"verifySignedTonEvent\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"errorCode\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"https://github.com/broxus\",\"details\":\"Stores relays for each round, implements slashing, helps in validating TON-ETH events\",\"kind\":\"dev\",\"methods\":{\"banRelays(address[])\":{\"params\":{\"_relays\":\"List of relay addresses to ban\"}},\"forceRoundRelays(uint160[],uint32)\":{\"details\":\"Can be called only by `roundSubmitter`\",\"params\":{\"_relays\":\"Next round relays\",\"roundEnd\":\"Round end\"}},\"initialize(address,address,uint32,uint32,uint32,uint32,uint160[])\":{\"details\":\"`roundRelaysConfiguration` should be specified later.\",\"params\":{\"_initialRound\":\"Initial round number. Useful in case new EVM network is connected to the bridge.\",\"_initialRoundEnd\":\"Initial round end timestamp.\",\"_minimumRequiredSignatures\":\"Minimum required signatures per round.\",\"_owner\":\"Bridge owner\",\"_relays\":\"Initial set of relays. Encode addresses as uint160\",\"_roundSubmitter\":\"Round submitter\",\"_roundTTL\":\"Round TTL after round ends.\"}},\"isBanned(address)\":{\"details\":\"Check if relay is banned. Ban is global. If the relay is banned it means it lost relay power in all rounds, past and future.\",\"params\":{\"candidate\":\"Address to check\"}},\"isRelay(uint32,address)\":{\"details\":\"Check if some address is relay at specific round\",\"params\":{\"candidate\":\"Address to check\",\"round\":\"Round id\"}},\"isRoundRotten(uint32)\":{\"details\":\"Check if round is rotten\",\"params\":{\"round\":\"Round id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"When Bridge paused, signature verification fails.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoverSignature(bytes,bytes)\":{\"params\":{\"payload\":\"Payload\",\"signature\":\"Signature\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRoundRelays(bytes,bytes[])\":{\"details\":\"Grant relay permission for set of addresses at specific round\",\"params\":{\"payload\":\"Bytes encoded TONEvent structure\",\"signatures\":\"Payload signatures\"}},\"setRoundSubmitter(address)\":{\"details\":\"Can be called only by owner\",\"params\":{\"_roundSubmitter\":\"New round submitter address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unbanRelays(address[])\":{\"params\":{\"_relays\":\"List of relay addresses to unban\"}},\"updateMinimumRequiredSignatures(uint32)\":{\"params\":{\"_minimumRequiredSignatures\":\"New value\"}},\"updateRoundRelaysConfiguration((int8,uint256))\":{\"params\":{\"_roundRelaysConfiguration\":\"TON address of configuration\"}},\"updateRoundTTL(uint32)\":{\"details\":\"This affects only future rounds. Rounds, that were already set, keep their current TTL.\",\"params\":{\"_roundTTL\":\"New TTL value\"}},\"verifySignedTonEvent(bytes,bytes[])\":{\"details\":\"Signatures should be sorted by the ascending signers. Error codes: 0. Verification passed (no error) 1. Specified round is less than `initialRound` 2. Specified round is more than `lastRound` 3. Not enough correct signatures. Possible reasons: - Some of the signers are not relays at the specified round - Some of the signers are banned 4. Round is rotten. 5. Everything is correct, but bridge is in \\\"paused\\\" state\",\"params\":{\"payload\":\"Bytes encoded TONEvent structure\",\"signatures\":\"Payload signatures\"},\"returns\":{\"errorCode\":\"Error code\"}}},\"title\":\"Ethereum Bridge contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"banRelays(address[])\":{\"notice\":\"Ban relays\"},\"forceRoundRelays(uint160[],uint32)\":{\"notice\":\"Forced set of next round relays\"},\"initialize(address,address,uint32,uint32,uint32,uint32,uint160[])\":{\"notice\":\"Bridge initializer\"},\"pause()\":{\"notice\":\"Pause Bridge contract.\"},\"recoverSignature(bytes,bytes)\":{\"notice\":\"Recover signer from the payload and signature\"},\"setRoundSubmitter(address)\":{\"notice\":\"Set round submitter\"},\"unbanRelays(address[])\":{\"notice\":\"Unban relays\"},\"unpause()\":{\"notice\":\"Unpause Bridge contract.\"},\"updateMinimumRequiredSignatures(uint32)\":{\"notice\":\"Update minimum amount of required signatures per round\"},\"updateRoundRelaysConfiguration((int8,uint256))\":{\"notice\":\"Update address of configuration, that emits event with next round relays.\"},\"updateRoundTTL(uint32)\":{\"notice\":\"Update round TTL\"},\"verifySignedTonEvent(bytes,bytes[])\":{\"notice\":\"Verify payload signatures.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"contracts/bridge/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./../interfaces/IBridge.sol\\\";\\nimport \\\"./../libraries/ECDSA.sol\\\";\\n\\nimport \\\"./../utils/Cache.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n\\n/// @title Ethereum Bridge contract\\n/// @author https://github.com/broxus\\n/// @dev Stores relays for each round, implements slashing, helps in validating TON-ETH events\\ncontract Bridge is OwnableUpgradeable, PausableUpgradeable, Cache, IBridge {\\n    using ECDSA for bytes32;\\n\\n    // NOTE: round number -> address -> is relay?\\n    mapping (uint32 => mapping(address => bool)) public relays;\\n\\n    // NOTE: is relay banned or not\\n    mapping (address => bool) public blacklist;\\n\\n    // NOTE: round meta data\\n    mapping (uint32 => Round) public rounds;\\n\\n    // NOTE: signature verifications always fails is emergency is on\\n    bool public emergencyShutdown;\\n\\n    // NOTE: The required signatures per round can't be less than this\\n    uint32 public minimumRequiredSignatures;\\n\\n    // NOTE: how long round signatures are considered valid after the end of the round\\n    uint32 public roundTTL;\\n\\n    // NOTE: initial round number\\n    uint32 public initialRound;\\n\\n    // NOTE: last round with known relays\\n    uint32 public lastRound;\\n\\n    // NOTE: special address, can set up rounds without relays's signatures\\n    address public roundSubmitter;\\n\\n    // NOTE: Broxus Bridge TON-ETH configuration address, that emits event with round relays\\n    TONAddress public roundRelaysConfiguration;\\n\\n    /**\\n        @notice\\n            Bridge initializer\\n        @dev\\n            `roundRelaysConfiguration` should be specified later.\\n        @param _owner Bridge owner\\n        @param _roundSubmitter Round submitter\\n        @param _minimumRequiredSignatures Minimum required signatures per round.\\n        @param _roundTTL Round TTL after round ends.\\n        @param _initialRound Initial round number. Useful in case new EVM network is connected to the bridge.\\n        @param _initialRoundEnd Initial round end timestamp.\\n        @param _relays Initial set of relays. Encode addresses as uint160\\n    */\\n    function initialize(\\n        address _owner,\\n        address _roundSubmitter,\\n        uint32 _minimumRequiredSignatures,\\n        uint32 _roundTTL,\\n        uint32 _initialRound,\\n        uint32 _initialRoundEnd,\\n        uint160[] calldata _relays\\n    ) external initializer {\\n        __Pausable_init();\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n\\n        roundSubmitter = _roundSubmitter;\\n        emit UpdateRoundSubmitter(_roundSubmitter);\\n\\n        minimumRequiredSignatures = _minimumRequiredSignatures;\\n        emit UpdateMinimumRequiredSignatures(minimumRequiredSignatures);\\n\\n        roundTTL = _roundTTL;\\n        emit UpdateRoundTTL(roundTTL);\\n\\n        require(\\n            _initialRoundEnd >= block.timestamp,\\n            \\\"Bridge: initial round end should be in the future\\\"\\n        );\\n\\n        initialRound = _initialRound;\\n        _setRound(initialRound, _relays, _initialRoundEnd);\\n\\n        lastRound = initialRound;\\n    }\\n\\n    /**\\n        @notice\\n            Update address of configuration, that emits event with next round relays.\\n        @param _roundRelaysConfiguration TON address of configuration\\n    */\\n    function updateRoundRelaysConfiguration(\\n        TONAddress calldata _roundRelaysConfiguration\\n    ) external override onlyOwner {\\n        emit UpdateRoundRelaysConfiguration(_roundRelaysConfiguration);\\n\\n        roundRelaysConfiguration = _roundRelaysConfiguration;\\n    }\\n\\n    /**\\n        @notice\\n            Pause Bridge contract.\\n        @dev\\n            When Bridge paused, signature verification fails.\\n    */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n        @notice\\n            Unpause Bridge contract.\\n    */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n        @notice\\n            Update minimum amount of required signatures per round\\n        @param _minimumRequiredSignatures New value\\n    */\\n    function updateMinimumRequiredSignatures(\\n        uint32 _minimumRequiredSignatures\\n    ) external override onlyOwner {\\n        minimumRequiredSignatures = _minimumRequiredSignatures;\\n\\n        emit UpdateMinimumRequiredSignatures(_minimumRequiredSignatures);\\n    }\\n\\n    /**\\n        @notice\\n            Update round TTL\\n        @dev\\n            This affects only future rounds. Rounds, that were already set,\\n            keep their current TTL.\\n        @param _roundTTL New TTL value\\n    */\\n    function updateRoundTTL(\\n        uint32 _roundTTL\\n    ) external override onlyOwner {\\n        roundTTL = _roundTTL;\\n\\n        emit UpdateRoundTTL(_roundTTL);\\n    }\\n\\n    /// @dev Check if relay is banned.\\n    /// Ban is global. If the relay is banned it means it lost\\n    /// relay power in all rounds, past and future.\\n    /// @param candidate Address to check\\n    function isBanned(\\n        address candidate\\n    ) override public view returns(bool) {\\n        return blacklist[candidate];\\n    }\\n\\n    /// @dev Check if some address is relay at specific round\\n    /// @param round Round id\\n    /// @param candidate Address to check\\n    function isRelay(\\n        uint32 round,\\n        address candidate\\n    ) override public view returns (bool) {\\n        return relays[round][candidate];\\n    }\\n\\n    /// @dev Check if round is rotten\\n    /// @param round Round id\\n    function isRoundRotten(\\n        uint32 round\\n    ) override public view returns (bool) {\\n        return block.timestamp > rounds[round].ttl;\\n    }\\n\\n    /**\\n        @notice\\n            Verify payload signatures.\\n        @dev\\n            Signatures should be sorted by the ascending signers.\\n            Error codes:\\n                0. Verification passed (no error)\\n                1. Specified round is less than `initialRound`\\n                2. Specified round is more than `lastRound`\\n                3. Not enough correct signatures. Possible reasons:\\n                    - Some of the signers are not relays at the specified round\\n                    - Some of the signers are banned\\n                4. Round is rotten.\\n                5. Everything is correct, but bridge is in \\\"paused\\\" state\\n\\n        @param payload Bytes encoded TONEvent structure\\n        @param signatures Payload signatures\\n        @return errorCode Error code\\n    */\\n    function verifySignedTonEvent(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    )\\n        override\\n        public\\n        view\\n    returns (\\n        uint32 errorCode\\n    ) {\\n        (TONEvent memory tonEvent) = abi.decode(payload, (TONEvent));\\n\\n        uint32 round = tonEvent.round;\\n\\n        // Check round is not less than initial round\\n        if (round < initialRound) return 1;\\n\\n        // Check round is not more than last initialized round\\n        if (round > lastRound) return 2;\\n\\n        // Check there are enough correct signatures\\n        uint32 count = _countRelaySignatures(payload, signatures, round);\\n        if (count < rounds[round].requiredSignatures) return 3;\\n\\n        // Check round rotten\\n        if (isRoundRotten(round)) return 4;\\n\\n        // Check bridge has been paused\\n        if (paused()) return 5;\\n\\n        return 0;\\n    }\\n\\n    /**\\n        @notice\\n            Recover signer from the payload and signature\\n        @param payload Payload\\n        @param signature Signature\\n    */\\n    function recoverSignature(\\n        bytes memory payload,\\n        bytes memory signature\\n    ) public pure returns (address signer) {\\n        signer = keccak256(payload)\\n            .toBytesPrefixed()\\n            .recover(signature);\\n    }\\n\\n    /**\\n        @notice Forced set of next round relays\\n        @dev Can be called only by `roundSubmitter`\\n        @param _relays Next round relays\\n        @param roundEnd Round end\\n    */\\n    function forceRoundRelays(\\n        uint160[] calldata _relays,\\n        uint32 roundEnd\\n    ) override external {\\n        require(msg.sender == roundSubmitter, \\\"Bridge: sender not round submitter\\\");\\n\\n        _setRound(lastRound + 1, _relays, roundEnd);\\n\\n        lastRound++;\\n    }\\n\\n    /**\\n        @notice Set round submitter\\n        @dev Can be called only by owner\\n        @param _roundSubmitter New round submitter address\\n    */\\n    function setRoundSubmitter(\\n        address _roundSubmitter\\n    ) override external onlyOwner {\\n        roundSubmitter = _roundSubmitter;\\n\\n        emit UpdateRoundSubmitter(roundSubmitter);\\n    }\\n\\n    /**\\n        @dev Grant relay permission for set of addresses at specific round\\n        @param payload Bytes encoded TONEvent structure\\n        @param signatures Payload signatures\\n    */\\n    function setRoundRelays(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) override external notCached(payload) {\\n        require(\\n            verifySignedTonEvent(\\n                payload,\\n                signatures\\n            ) == 0,\\n            \\\"Bridge: signatures verification failed\\\"\\n        );\\n\\n        (TONEvent memory tonEvent) = abi.decode(payload, (TONEvent));\\n\\n        require(\\n            tonEvent.proxy == address(this),\\n            \\\"Bridge: wrong event proxy\\\"\\n        );\\n\\n        require(\\n            tonEvent.configurationWid == roundRelaysConfiguration.wid &&\\n            tonEvent.configurationAddress == roundRelaysConfiguration.addr,\\n            \\\"Bridge: wrong event configuration\\\"\\n        );\\n\\n        (uint32 round, uint160[] memory _relays, uint32 roundEnd) = decodeRoundRelaysEventData(payload);\\n\\n        require(round == lastRound + 1, \\\"Bridge: wrong round\\\");\\n\\n        _setRound(round, _relays, roundEnd);\\n\\n        lastRound++;\\n    }\\n\\n    function decodeRoundRelaysEventData(\\n        bytes memory payload\\n    ) public pure returns(\\n        uint32 round,\\n        uint160[] memory _relays,\\n        uint32 roundEnd\\n    ) {\\n        (TONEvent memory tonEvent) = abi.decode(payload, (TONEvent));\\n\\n        (round, _relays, roundEnd) = abi.decode(\\n            tonEvent.eventData,\\n            (uint32, uint160[], uint32)\\n        );\\n    }\\n\\n    function decodeTonEvent(\\n        bytes memory payload\\n    ) external pure returns (TONEvent memory tonEvent) {\\n        (tonEvent) = abi.decode(payload, (TONEvent));\\n    }\\n\\n    /**\\n        @notice\\n            Ban relays\\n        @param _relays List of relay addresses to ban\\n    */\\n    function banRelays(\\n        address[] calldata _relays\\n    ) override external onlyOwner {\\n        for (uint i=0; i<_relays.length; i++) {\\n            blacklist[_relays[i]] = true;\\n\\n            emit BanRelay(_relays[i], true);\\n        }\\n    }\\n\\n    /**\\n        @notice\\n            Unban relays\\n        @param _relays List of relay addresses to unban\\n    */\\n    function unbanRelays(\\n        address[] calldata _relays\\n    ) override external onlyOwner {\\n        for (uint i=0; i<_relays.length; i++) {\\n            blacklist[_relays[i]] = false;\\n\\n            emit BanRelay(_relays[i], false);\\n        }\\n    }\\n\\n    function _setRound(\\n        uint32 round,\\n        uint160[] memory _relays,\\n        uint32 roundEnd\\n    ) internal {\\n        uint32 requiredSignatures = uint32(_relays.length * 2 / 3) + 1;\\n\\n        rounds[round] = Round(\\n            roundEnd,\\n            roundEnd + roundTTL,\\n            uint32(_relays.length),\\n            requiredSignatures < minimumRequiredSignatures ? minimumRequiredSignatures : requiredSignatures\\n        );\\n\\n        emit NewRound(round, rounds[round]);\\n\\n        for (uint i=0; i<_relays.length; i++) {\\n            address relay = address(_relays[i]);\\n\\n            relays[round][relay] = true;\\n\\n            emit RoundRelay(round, relay);\\n        }\\n    }\\n\\n    function _countRelaySignatures(\\n        bytes memory payload,\\n        bytes[] memory signatures,\\n        uint32 round\\n    ) internal view returns (uint32) {\\n        address lastSigner = address(0);\\n        uint32 count = 0;\\n\\n        for (uint i=0; i<signatures.length; i++) {\\n            address signer = recoverSignature(payload, signatures[i]);\\n\\n            require(signer > lastSigner, \\\"Bridge: signatures sequence wrong\\\");\\n            lastSigner = signer;\\n\\n            if (isRelay(round, signer) && !isBanned(signer)) {\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n\",\"keccak256\":\"0xe190914ba6a3e1bc29c13e6730156d8293ab390547f41ccfa2f1c7242b4569e0\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IBridge {\\n    struct TONEvent {\\n        uint64 eventTransactionLt;\\n        uint32 eventTimestamp;\\n        bytes eventData;\\n        int8 configurationWid;\\n        uint256 configurationAddress;\\n        int8 eventContractWid;\\n        uint256 eventContractAddress;\\n        address proxy;\\n        uint32 round;\\n    }\\n\\n    struct Round {\\n        uint32 end;\\n        uint32 ttl;\\n        uint32 relays;\\n        uint32 requiredSignatures;\\n    }\\n\\n    struct TONAddress {\\n        int8 wid;\\n        uint256 addr;\\n    }\\n\\n    function updateMinimumRequiredSignatures(uint32 _minimumRequiredSignatures) external;\\n    function updateRoundRelaysConfiguration(TONAddress calldata _roundRelaysConfiguration) external;\\n    function updateRoundTTL(uint32 _roundTTL) external;\\n\\n    function isRelay(\\n        uint32 round,\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isBanned(\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isRoundRotten(\\n        uint32 round\\n    ) external view returns(bool);\\n\\n    function verifySignedTonEvent(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external view returns(uint32);\\n\\n    function setRoundRelays(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) external;\\n\\n    function forceRoundRelays(\\n        uint160[] calldata _relays,\\n        uint32 roundEnd\\n    ) external;\\n\\n    function banRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function unbanRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function pause() external;\\n    function unpause() external;\\n\\n    function setRoundSubmitter(address _roundSubmitter) external;\\n\\n    event EmergencyShutdown(bool active);\\n\\n    event UpdateMinimumRequiredSignatures(uint32 value);\\n    event UpdateRoundTTL(uint32 value);\\n    event UpdateRoundRelaysConfiguration(TONAddress configuration);\\n    event UpdateRoundSubmitter(address _roundSubmitter);\\n\\n    event NewRound(uint32 indexed round, Round meta);\\n    event RoundRelay(uint32 indexed round, address indexed relay);\\n    event BanRelay(address indexed relay, bool status);\\n}\\n\",\"keccak256\":\"0xecdb868ccae38fa3ceb8ce535e44e9c322422c6ab7c319bac85aecc5cd7f1c41\",\"license\":\"Apache-2.0\"},\"contracts/libraries/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nlibrary ECDSA {\\n\\n    /**\\n     * @dev Recover signer address from a message by using their signature\\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n    internal\\n    pure\\n    returns (address)\\n    {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            return (address(0));\\n        }\\n\\n        // Divide the signature in r, s and v variables with inline assembly.\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (v != 27 && v != 28) {\\n            return (address(0));\\n        } else {\\n            // solium-disable-next-line arg-overflow\\n            return ecrecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n      * toBytesPrefixed\\n      * @dev prefix a bytes32 value with \\\"\\\\x19Ethereum Signed Message:\\\"\\n      * and hash the result\\n      */\\n    function toBytesPrefixed(bytes32 hash)\\n    internal\\n    pure\\n    returns (bytes32)\\n    {\\n        return keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa4d6a3a831ec0ebf7f17743893965b14edd8262ff04f93efc79479987cc3d2f4\",\"license\":\"Apache-2.0\"},\"contracts/utils/Cache.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\ncontract Cache {\\n    mapping (bytes32 => bool) public cache;\\n\\n    modifier notCached(bytes memory payload) {\\n        bytes32 hash_ = keccak256(abi.encode(payload));\\n\\n        require(cache[hash_] == false, \\\"Cache: payload already seen\\\");\\n\\n        _;\\n\\n        cache[hash_] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xfbf832c15d7193fc6624a5a9c926e234a63fcaefb27ea08d6ceb7b951e538c3d\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612845806100206000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c806379a6d51f1161011a578063a40b9e73116100ad578063e17ddc411161007c578063e17ddc411461051f578063e35d165314610538578063f2fde38b1461054d578063f9f92be414610560578063fa78e3bf14610583576101fb565b8063a40b9e731461047d578063a8719e0014610490578063b91f4bbf146104be578063c46f602f146104de576101fb565b80638a2ef9d4116100e95780638a2ef9d4146104235780638da5cb5b1461043657806397f735d51461044757806399eb59b91461045a576101fb565b806379a6d51f1461037b57806382bc07e6146103f15780638456cb591461040857806387f24b7814610410576101fb565b80633f4ba83a1161019257806356db6fff1161016157806356db6fff1461032a5780635c975abb1461033d5780636399e83414610348578063715018a614610373576101fb565b80633f4ba83a146102e95780634145a9e0146102f15780634d6e855e14610304578063507b8ed214610317576101fb565b806331f25330116101ce57806331f253301461027a5780633403c2fc146102a65780633637f6a8146102c35780633b1e8156146102d6576101fb565b806304f5b8411461020057806311bbedb71461021557806320fb2ac81461024557806323f11f9914610267575b600080fd5b61021361020e366004611f5d565b6105b6565b005b609c54610228906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610258610253366004611fed565b61092c565b60405161023c93929190612581565b610213610275366004611de6565b61096f565b609b5461029190600160481b900463ffffffff1681565b60405163ffffffff909116815260200161023c565b609b546102b39060ff1681565b604051901515815260200161023c565b6102136102d13660046122ca565b6109f2565b6102136102e4366004611eb2565b610a6c565b610213610b95565b6102136102ff366004611ef1565b610bc9565b610228610312366004612092565b610cc9565b6102136103253660046122ca565b610d3a565b610213610338366004611eb2565b610dbc565b60655460ff166102b3565b609d54609e546103599160000b9082565b6040805160009390930b835260208301919091520161023c565b610213610ee0565b6103c16103893660046122ca565b609a6020526000908152604090205463ffffffff808216916401000000008104821691600160401b8204811691600160601b90041684565b6040805163ffffffff9586168152938516602085015291841691830191909152909116606082015260800161023c565b609b5461029190600160681b900463ffffffff1681565b610213610f14565b61021361041e3660046120e8565b610f46565b610213610431366004611e02565b610fb4565b6033546001600160a01b0316610228565b6102b3610455366004611de6565b611257565b6102b3610468366004611f45565b60976020526000908152604090205460ff1681565b61029161048b36600461201f565b611279565b6102b361049e3660046122e6565b609860209081526000928352604080842090915290825290205460ff1681565b6104d16104cc366004611fed565b611384565b60405161023c91906124c5565b6102b36104ec3660046122e6565b63ffffffff821660009081526098602090815260408083206001600160a01b038516845290915290205460ff1692915050565b609b546102919065010000000000900463ffffffff1681565b609b5461029190610100900463ffffffff1681565b61021361055b366004611de6565b6113e0565b6102b361056e366004611de6565b60996020526000908152604090205460ff1681565b6102b36105913660046122ca565b63ffffffff9081166000908152609a6020526040902054640100000000900416421190565b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040519093506105fe9250849150602001612409565b60408051601f1981840301815291815281516020928301206000818152609790935291205490915060ff161561067b5760405162461bcd60e51b815260206004820152601b60248201527f43616368653a207061796c6f616420616c7265616479207365656e000000000060448201526064015b60405180910390fd5b6106c186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061048b92508791508890506126f0565b63ffffffff16156107235760405162461bcd60e51b815260206004820152602660248201527f4272696467653a207369676e61747572657320766572696669636174696f6e2060448201526519985a5b195960d21b6064820152608401610672565b6000610731868801886120ff565b60e08101519091506001600160a01b031630146107905760405162461bcd60e51b815260206004820152601960248201527f4272696467653a2077726f6e67206576656e742070726f7879000000000000006044820152606401610672565b609d546060820151600091820b820b910b1480156107b35750609e546080820151145b6108095760405162461bcd60e51b815260206004820152602160248201527f4272696467653a2077726f6e67206576656e7420636f6e66696775726174696f6044820152603760f91b6064820152608401610672565b600080600061084d8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061092c92505050565b609b54929550909350915061087090600160681b900463ffffffff166001612664565b63ffffffff168363ffffffff16146108c05760405162461bcd60e51b8152602060048201526013602482015272109c9a5919d94e881ddc9bdb99c81c9bdd5b99606a1b6044820152606401610672565b6108cb83838361147b565b609b8054600160681b900463ffffffff1690600d6108e883612748565b825463ffffffff9182166101009390930a928302919092021990911617905550505060009283525050609760205260409020805460ff191660011790555050505050565b600060606000808480602001905181019061094791906121ec565b90508060400151806020019051810190610961919061231e565b919790965090945092505050565b6033546001600160a01b031633146109995760405162461bcd60e51b81526004016106729061246a565b609c80546001600160a01b0319166001600160a01b038381169190911791829055604051911681527f7ed72b9d012a44ff790c3eb9d7d6f5b03f04d47c5128249cf14d559126ba7656906020015b60405180910390a150565b6033546001600160a01b03163314610a1c5760405162461bcd60e51b81526004016106729061246a565b609b805464ffffffff00191661010063ffffffff8416908102919091179091556040519081527fb80014cbadaa4692dd31be5d87278068d67ed23b027c3063f855b3f828a00ea2906020016109e7565b6033546001600160a01b03163314610a965760405162461bcd60e51b81526004016106729061246a565b60005b81811015610b9057600160996000858585818110610ac757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610adc9190611de6565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055828282818110610b2457634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610b399190611de6565b6001600160a01b03167f8e91a79c752035dd825468c2990c5d65794e64e4025fa3b1800c4eef2bdd42496001604051610b76911515815260200190565b60405180910390a280610b888161272d565b915050610a99565b505050565b6033546001600160a01b03163314610bbf5760405162461bcd60e51b81526004016106729061246a565b610bc76116b3565b565b609c546001600160a01b03163314610c2e5760405162461bcd60e51b815260206004820152602260248201527f4272696467653a2073656e646572206e6f7420726f756e64207375626d69747460448201526132b960f11b6064820152608401610672565b609b54610c8890610c4d90600160681b900463ffffffff166001612664565b84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525086925061147b915050565b609b8054600160681b900463ffffffff1690600d610ca583612748565b91906101000a81548163ffffffff021916908363ffffffff16021790555050505050565b6000610d3382610d2d85805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90611746565b9392505050565b6033546001600160a01b03163314610d645760405162461bcd60e51b81526004016106729061246a565b609b805468ffffffff000000000019166501000000000063ffffffff8416908102919091179091556040519081527f33bf3241a8582c0b4d713c63761f4f809f651202e32748b335ec8bda0ac74f6c906020016109e7565b6033546001600160a01b03163314610de65760405162461bcd60e51b81526004016106729061246a565b60005b81811015610b9057600060996000858585818110610e1757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e2c9190611de6565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055828282818110610e7457634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e899190611de6565b6001600160a01b03167f8e91a79c752035dd825468c2990c5d65794e64e4025fa3b1800c4eef2bdd42496000604051610ec6911515815260200190565b60405180910390a280610ed88161272d565b915050610de9565b6033546001600160a01b03163314610f0a5760405162461bcd60e51b81526004016106729061246a565b610bc7600061181d565b6033546001600160a01b03163314610f3e5760405162461bcd60e51b81526004016106729061246a565b610bc761186f565b6033546001600160a01b03163314610f705760405162461bcd60e51b81526004016106729061246a565b7f0ae1c27ed06d996178e8dd8d5a4de962856a4a1896d7d93ffa83bbdb2960803d81604051610f9f919061249f565b60405180910390a180609d610b908282612798565b600054610100900460ff1680610fcd575060005460ff16155b610fe95760405162461bcd60e51b81526004016106729061241c565b600054610100900460ff16158015611014576000805460ff1961ff0019909116610100171660011790555b61101c6118ea565b61102461196e565b61102d896113e0565b609c80546001600160a01b0319166001600160a01b038a169081179091556040519081527f7ed72b9d012a44ff790c3eb9d7d6f5b03f04d47c5128249cf14d559126ba76569060200160405180910390a1609b805464ffffffff00191661010063ffffffff8a81168202929092179283905560405192041681527fb80014cbadaa4692dd31be5d87278068d67ed23b027c3063f855b3f828a00ea29060200160405180910390a1609b805468ffffffff000000000019166501000000000063ffffffff8981168202929092179283905560405192041681527f33bf3241a8582c0b4d713c63761f4f809f651202e32748b335ec8bda0ac74f6c9060200160405180910390a1428463ffffffff1610156111a25760405162461bcd60e51b815260206004820152603160248201527f4272696467653a20696e697469616c20726f756e6420656e642073686f756c6460448201527020626520696e207468652066757475726560781b6064820152608401610672565b84609b60096101000a81548163ffffffff021916908363ffffffff160217905550611214609b60099054906101000a900463ffffffff1684848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525089925061147b915050565b609b8054600160681b63ffffffff600160481b8304160263ffffffff60681b19909116179055801561124c576000805461ff00191690555b505050505050505050565b6001600160a01b03811660009081526099602052604090205460ff165b919050565b6000808380602001905181019061129091906121ec565b610100810151609b549192509063ffffffff600160481b909104811690821610156112c05760019250505061137e565b609b5463ffffffff600160681b909104811690821611156112e65760029250505061137e565b60006112f38686846119de565b63ffffffff8084166000908152609a6020526040902054919250600160601b9091048116908216101561132c576003935050505061137e565b63ffffffff8083166000908152609a602052604090205464010000000090041642111561135f576004935050505061137e565b60655460ff1615611376576005935050505061137e565b600093505050505b92915050565b60408051610120810182526000808252602080830182905260609383018490529282018190526080820181905260a0820181905260c0820181905260e082018190526101008201528251909161137e91840181019084016121ec565b6033546001600160a01b0316331461140a5760405162461bcd60e51b81526004016106729061246a565b6001600160a01b03811661146f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610672565b6114788161181d565b50565b600060038351600261148d91906126d1565b61149791906126b1565b6114a2906001612664565b905060405180608001604052808363ffffffff168152602001609b60059054906101000a900463ffffffff16846114d99190612664565b63ffffffff9081168252855181166020830152609b54604090920191610100900481169084161061150a5782611519565b609b54610100900463ffffffff165b63ffffffff9081169091528581166000818152609a60209081526040918290208551815487840151888601516060998a015163ffffffff199093169389169390931767ffffffff00000000191664010000000091891691909102176bffffffff00000000000000001916600160401b928816929092029190911763ffffffff60601b1916600160601b9187169190910217908190558251818616815281831c86169281019290925280831c851682840152851c9093169383019390935291517f640133a6dd957aa8ea6ee5bced590b08a2716453408d9473d007756d0d947e79916080908290030190a260005b83518110156116ac57600084828151811061163157634e487b7160e01b600052603260045260246000fd5b60209081029190910181015163ffffffff881660008181526098845260408082206001600160a01b0385168084529552808220805460ff191660011790555192945090917f94819138a8ba708dfe846523a28de6ec7c2838e707270e6be73644534e5979ef9190a350806116a48161272d565b915050611606565b5050505050565b60655460ff166116fc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610672565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000806000808451604114611761576000935050505061137e565b50505060208201516040830151606084015160001a601b81101561178d5761178a601b8261268c565b90505b8060ff16601b141580156117a557508060ff16601c14155b156117b6576000935050505061137e565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015611809573d6000803e3d6000fd5b50505060206040510351935050505061137e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16156118b55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610672565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117293390565b600054610100900460ff1680611903575060005460ff16155b61191f5760405162461bcd60e51b81526004016106729061241c565b600054610100900460ff1615801561194a576000805460ff1961ff0019909116610100171660011790555b611952611b01565b61195a611b74565b8015611478576000805461ff001916905550565b600054610100900460ff1680611987575060005460ff16155b6119a35760405162461bcd60e51b81526004016106729061241c565b600054610100900460ff161580156119ce576000805460ff1961ff0019909116610100171660011790555b6119d6611b01565b61195a611bf2565b60008080805b8551811015611af7576000611a2088888481518110611a1357634e487b7160e01b600052603260045260246000fd5b6020026020010151610cc9565b9050836001600160a01b0316816001600160a01b031611611a8d5760405162461bcd60e51b815260206004820152602160248201527f4272696467653a207369676e6174757265732073657175656e63652077726f6e6044820152606760f81b6064820152608401610672565b63ffffffff861660009081526098602090815260408083206001600160a01b0385168452909152902054909350839060ff168015611ad15750611acf81611257565b155b15611ae45782611ae081612748565b9350505b5080611aef8161272d565b9150506119e4565b5095945050505050565b600054610100900460ff1680611b1a575060005460ff16155b611b365760405162461bcd60e51b81526004016106729061241c565b600054610100900460ff1615801561195a576000805460ff1961ff0019909116610100171660011790558015611478576000805461ff001916905550565b600054610100900460ff1680611b8d575060005460ff16155b611ba95760405162461bcd60e51b81526004016106729061241c565b600054610100900460ff16158015611bd4576000805460ff1961ff0019909116610100171660011790555b6065805460ff191690558015611478576000805461ff001916905550565b600054610100900460ff1680611c0b575060005460ff16155b611c275760405162461bcd60e51b81526004016106729061241c565b600054610100900460ff16158015611c52576000805460ff1961ff0019909116610100171660011790555b61195a3361181d565b6000611c6e611c698461261a565b6125ea565b83815290506020808201908360005b86811015611ca457611c928883358801611d0d565b84529282019290820190600101611c7d565b505050509392505050565b8035611274816127c4565b8051611274816127c4565b60008083601f840112611cd6578182fd5b5081356001600160401b03811115611cec578182fd5b6020830191508360208083028501011115611d0657600080fd5b9250929050565b600082601f830112611d1d578081fd5b8135611d2b611c698261263d565b818152846020838601011115611d3f578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611d69578081fd5b8151611d77611c698261263d565b818152846020838601011115611d8b578283fd5b611d9c8260208301602087016126fd565b949350505050565b8035611274816127d9565b8051611274816127d9565b8035611274816127e8565b8051611274816127e8565b8035611274816127fa565b8051611274816127fa565b600060208284031215611df7578081fd5b8135610d33816127c4565b60008060008060008060008060e0898b031215611e1d578384fd5b8835611e28816127c4565b97506020890135611e38816127c4565b96506040890135611e48816127e8565b95506060890135611e58816127e8565b94506080890135611e68816127e8565b935060a0890135611e78816127e8565b925060c08901356001600160401b03811115611e92578283fd5b611e9e8b828c01611cc5565b999c989b5096995094979396929594505050565b60008060208385031215611ec4578182fd5b82356001600160401b03811115611ed9578283fd5b611ee585828601611cc5565b90969095509350505050565b600080600060408486031215611f05578081fd5b83356001600160401b03811115611f1a578182fd5b611f2686828701611cc5565b9094509250506020840135611f3a816127e8565b809150509250925092565b600060208284031215611f56578081fd5b5035919050565b60008060008060408587031215611f72578182fd5b84356001600160401b0380821115611f88578384fd5b818701915087601f830112611f9b578384fd5b813581811115611fa9578485fd5b886020828501011115611fba578485fd5b602092830196509450908601359080821115611fd4578384fd5b50611fe187828801611cc5565b95989497509550505050565b600060208284031215611ffe578081fd5b81356001600160401b03811115612013578182fd5b611d9c84828501611d0d565b60008060408385031215612031578182fd5b82356001600160401b0380821115612047578384fd5b61205386838701611d0d565b93506020850135915080821115612068578283fd5b508301601f81018513612079578182fd5b61208885823560208401611c5b565b9150509250929050565b600080604083850312156120a4578182fd5b82356001600160401b03808211156120ba578384fd5b6120c686838701611d0d565b935060208501359150808211156120db578283fd5b5061208885828601611d0d565b6000604082840312156120f9578081fd5b50919050565b600060208284031215612110578081fd5b81356001600160401b0380821115612126578283fd5b818401915061012080838703121561213c578384fd5b612145816125ea565b905061215083611dd0565b815261215e60208401611dba565b6020820152604083013582811115612174578485fd5b61218087828601611d0d565b60408301525061219260608401611da4565b6060820152608083013560808201526121ad60a08401611da4565b60a082015260c083013560c08201526121c860e08401611caf565b60e082015261010091506121dd828401611dba565b91810191909152949350505050565b6000602082840312156121fd578081fd5b81516001600160401b0380821115612213578283fd5b8184019150610120808387031215612229578384fd5b612232816125ea565b905061223d83611ddb565b815261224b60208401611dc5565b6020820152604083015182811115612261578485fd5b61226d87828601611d59565b60408301525061227f60608401611daf565b60608201526080830151608082015261229a60a08401611daf565b60a082015260c083015160c08201526122b560e08401611cba565b60e082015261010091506121dd828401611dc5565b6000602082840312156122db578081fd5b8135610d33816127e8565b600080604083850312156122f8578182fd5b8235612303816127e8565b91506020830135612313816127c4565b809150509250929050565b600080600060608486031215612332578081fd5b835161233d816127e8565b809350506020808501516001600160401b0381111561235a578283fd5b8501601f8101871361236a578283fd5b8051612378611c698261261a565b81815283810190838501858402850186018b1015612394578687fd5b8694505b838510156123bf5780516123ab816127c4565b835260019490940193918501918501612398565b5080965050505050506123d460408501611dc5565b90509250925092565b600081518084526123f58160208601602086016126fd565b601f01601f19169290920160200192915050565b600060208252610d3360208301846123dd565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6040810182356124ae816127d9565b8060000b8352506020830135602083015292915050565b6000602082526124e16020830184516001600160401b03169052565b602083015163ffffffff8116604084015250604083015161012080606085015261250f6101408501836123dd565b91506060850151612525608086018260000b9052565b50608085015160a085015260a085015161254460c086018260000b9052565b5060c085015160e085015260e085015161010061256b818701836001600160a01b03169052565b9095015163ffffffff1693019290925250919050565b60006060820163ffffffff808716845260206060818601528287518085526080870191508289019450855b818110156125d15785516001600160a01b0316835294830194918301916001016125ac565b5050809450505080851660408501525050949350505050565b604051601f8201601f191681016001600160401b038111828210171561261257612612612782565b604052919050565b60006001600160401b0382111561263357612633612782565b5060209081020190565b60006001600160401b0382111561265657612656612782565b50601f01601f191660200190565b600063ffffffff8083168185168083038211156126835761268361276c565b01949350505050565b600060ff821660ff84168060ff038211156126a9576126a961276c565b019392505050565b6000826126cc57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156126eb576126eb61276c565b500290565b6000610d33368484611c5b565b60005b83811015612718578181015183820152602001612700565b83811115612727576000848401525b50505050565b60006000198214156127415761274161276c565b5060010190565b600063ffffffff808316818114156127625761276261276c565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b81356127a3816127d9565b60ff1982541660ff8260000b16811783555050602082013560018201555050565b6001600160a01b038116811461147857600080fd5b8060000b811461147857600080fd5b63ffffffff8116811461147857600080fd5b6001600160401b038116811461147857600080fdfea26469706673582212205b060c203d46d232c85b5e3b11703dc373d4eb46d6e3d496d46eb8eeb8c396ba64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c806379a6d51f1161011a578063a40b9e73116100ad578063e17ddc411161007c578063e17ddc411461051f578063e35d165314610538578063f2fde38b1461054d578063f9f92be414610560578063fa78e3bf14610583576101fb565b8063a40b9e731461047d578063a8719e0014610490578063b91f4bbf146104be578063c46f602f146104de576101fb565b80638a2ef9d4116100e95780638a2ef9d4146104235780638da5cb5b1461043657806397f735d51461044757806399eb59b91461045a576101fb565b806379a6d51f1461037b57806382bc07e6146103f15780638456cb591461040857806387f24b7814610410576101fb565b80633f4ba83a1161019257806356db6fff1161016157806356db6fff1461032a5780635c975abb1461033d5780636399e83414610348578063715018a614610373576101fb565b80633f4ba83a146102e95780634145a9e0146102f15780634d6e855e14610304578063507b8ed214610317576101fb565b806331f25330116101ce57806331f253301461027a5780633403c2fc146102a65780633637f6a8146102c35780633b1e8156146102d6576101fb565b806304f5b8411461020057806311bbedb71461021557806320fb2ac81461024557806323f11f9914610267575b600080fd5b61021361020e366004611f5d565b6105b6565b005b609c54610228906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610258610253366004611fed565b61092c565b60405161023c93929190612581565b610213610275366004611de6565b61096f565b609b5461029190600160481b900463ffffffff1681565b60405163ffffffff909116815260200161023c565b609b546102b39060ff1681565b604051901515815260200161023c565b6102136102d13660046122ca565b6109f2565b6102136102e4366004611eb2565b610a6c565b610213610b95565b6102136102ff366004611ef1565b610bc9565b610228610312366004612092565b610cc9565b6102136103253660046122ca565b610d3a565b610213610338366004611eb2565b610dbc565b60655460ff166102b3565b609d54609e546103599160000b9082565b6040805160009390930b835260208301919091520161023c565b610213610ee0565b6103c16103893660046122ca565b609a6020526000908152604090205463ffffffff808216916401000000008104821691600160401b8204811691600160601b90041684565b6040805163ffffffff9586168152938516602085015291841691830191909152909116606082015260800161023c565b609b5461029190600160681b900463ffffffff1681565b610213610f14565b61021361041e3660046120e8565b610f46565b610213610431366004611e02565b610fb4565b6033546001600160a01b0316610228565b6102b3610455366004611de6565b611257565b6102b3610468366004611f45565b60976020526000908152604090205460ff1681565b61029161048b36600461201f565b611279565b6102b361049e3660046122e6565b609860209081526000928352604080842090915290825290205460ff1681565b6104d16104cc366004611fed565b611384565b60405161023c91906124c5565b6102b36104ec3660046122e6565b63ffffffff821660009081526098602090815260408083206001600160a01b038516845290915290205460ff1692915050565b609b546102919065010000000000900463ffffffff1681565b609b5461029190610100900463ffffffff1681565b61021361055b366004611de6565b6113e0565b6102b361056e366004611de6565b60996020526000908152604090205460ff1681565b6102b36105913660046122ca565b63ffffffff9081166000908152609a6020526040902054640100000000900416421190565b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040519093506105fe9250849150602001612409565b60408051601f1981840301815291815281516020928301206000818152609790935291205490915060ff161561067b5760405162461bcd60e51b815260206004820152601b60248201527f43616368653a207061796c6f616420616c7265616479207365656e000000000060448201526064015b60405180910390fd5b6106c186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061048b92508791508890506126f0565b63ffffffff16156107235760405162461bcd60e51b815260206004820152602660248201527f4272696467653a207369676e61747572657320766572696669636174696f6e2060448201526519985a5b195960d21b6064820152608401610672565b6000610731868801886120ff565b60e08101519091506001600160a01b031630146107905760405162461bcd60e51b815260206004820152601960248201527f4272696467653a2077726f6e67206576656e742070726f7879000000000000006044820152606401610672565b609d546060820151600091820b820b910b1480156107b35750609e546080820151145b6108095760405162461bcd60e51b815260206004820152602160248201527f4272696467653a2077726f6e67206576656e7420636f6e66696775726174696f6044820152603760f91b6064820152608401610672565b600080600061084d8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061092c92505050565b609b54929550909350915061087090600160681b900463ffffffff166001612664565b63ffffffff168363ffffffff16146108c05760405162461bcd60e51b8152602060048201526013602482015272109c9a5919d94e881ddc9bdb99c81c9bdd5b99606a1b6044820152606401610672565b6108cb83838361147b565b609b8054600160681b900463ffffffff1690600d6108e883612748565b825463ffffffff9182166101009390930a928302919092021990911617905550505060009283525050609760205260409020805460ff191660011790555050505050565b600060606000808480602001905181019061094791906121ec565b90508060400151806020019051810190610961919061231e565b919790965090945092505050565b6033546001600160a01b031633146109995760405162461bcd60e51b81526004016106729061246a565b609c80546001600160a01b0319166001600160a01b038381169190911791829055604051911681527f7ed72b9d012a44ff790c3eb9d7d6f5b03f04d47c5128249cf14d559126ba7656906020015b60405180910390a150565b6033546001600160a01b03163314610a1c5760405162461bcd60e51b81526004016106729061246a565b609b805464ffffffff00191661010063ffffffff8416908102919091179091556040519081527fb80014cbadaa4692dd31be5d87278068d67ed23b027c3063f855b3f828a00ea2906020016109e7565b6033546001600160a01b03163314610a965760405162461bcd60e51b81526004016106729061246a565b60005b81811015610b9057600160996000858585818110610ac757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610adc9190611de6565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055828282818110610b2457634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610b399190611de6565b6001600160a01b03167f8e91a79c752035dd825468c2990c5d65794e64e4025fa3b1800c4eef2bdd42496001604051610b76911515815260200190565b60405180910390a280610b888161272d565b915050610a99565b505050565b6033546001600160a01b03163314610bbf5760405162461bcd60e51b81526004016106729061246a565b610bc76116b3565b565b609c546001600160a01b03163314610c2e5760405162461bcd60e51b815260206004820152602260248201527f4272696467653a2073656e646572206e6f7420726f756e64207375626d69747460448201526132b960f11b6064820152608401610672565b609b54610c8890610c4d90600160681b900463ffffffff166001612664565b84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525086925061147b915050565b609b8054600160681b900463ffffffff1690600d610ca583612748565b91906101000a81548163ffffffff021916908363ffffffff16021790555050505050565b6000610d3382610d2d85805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90611746565b9392505050565b6033546001600160a01b03163314610d645760405162461bcd60e51b81526004016106729061246a565b609b805468ffffffff000000000019166501000000000063ffffffff8416908102919091179091556040519081527f33bf3241a8582c0b4d713c63761f4f809f651202e32748b335ec8bda0ac74f6c906020016109e7565b6033546001600160a01b03163314610de65760405162461bcd60e51b81526004016106729061246a565b60005b81811015610b9057600060996000858585818110610e1757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e2c9190611de6565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055828282818110610e7457634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e899190611de6565b6001600160a01b03167f8e91a79c752035dd825468c2990c5d65794e64e4025fa3b1800c4eef2bdd42496000604051610ec6911515815260200190565b60405180910390a280610ed88161272d565b915050610de9565b6033546001600160a01b03163314610f0a5760405162461bcd60e51b81526004016106729061246a565b610bc7600061181d565b6033546001600160a01b03163314610f3e5760405162461bcd60e51b81526004016106729061246a565b610bc761186f565b6033546001600160a01b03163314610f705760405162461bcd60e51b81526004016106729061246a565b7f0ae1c27ed06d996178e8dd8d5a4de962856a4a1896d7d93ffa83bbdb2960803d81604051610f9f919061249f565b60405180910390a180609d610b908282612798565b600054610100900460ff1680610fcd575060005460ff16155b610fe95760405162461bcd60e51b81526004016106729061241c565b600054610100900460ff16158015611014576000805460ff1961ff0019909116610100171660011790555b61101c6118ea565b61102461196e565b61102d896113e0565b609c80546001600160a01b0319166001600160a01b038a169081179091556040519081527f7ed72b9d012a44ff790c3eb9d7d6f5b03f04d47c5128249cf14d559126ba76569060200160405180910390a1609b805464ffffffff00191661010063ffffffff8a81168202929092179283905560405192041681527fb80014cbadaa4692dd31be5d87278068d67ed23b027c3063f855b3f828a00ea29060200160405180910390a1609b805468ffffffff000000000019166501000000000063ffffffff8981168202929092179283905560405192041681527f33bf3241a8582c0b4d713c63761f4f809f651202e32748b335ec8bda0ac74f6c9060200160405180910390a1428463ffffffff1610156111a25760405162461bcd60e51b815260206004820152603160248201527f4272696467653a20696e697469616c20726f756e6420656e642073686f756c6460448201527020626520696e207468652066757475726560781b6064820152608401610672565b84609b60096101000a81548163ffffffff021916908363ffffffff160217905550611214609b60099054906101000a900463ffffffff1684848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525089925061147b915050565b609b8054600160681b63ffffffff600160481b8304160263ffffffff60681b19909116179055801561124c576000805461ff00191690555b505050505050505050565b6001600160a01b03811660009081526099602052604090205460ff165b919050565b6000808380602001905181019061129091906121ec565b610100810151609b549192509063ffffffff600160481b909104811690821610156112c05760019250505061137e565b609b5463ffffffff600160681b909104811690821611156112e65760029250505061137e565b60006112f38686846119de565b63ffffffff8084166000908152609a6020526040902054919250600160601b9091048116908216101561132c576003935050505061137e565b63ffffffff8083166000908152609a602052604090205464010000000090041642111561135f576004935050505061137e565b60655460ff1615611376576005935050505061137e565b600093505050505b92915050565b60408051610120810182526000808252602080830182905260609383018490529282018190526080820181905260a0820181905260c0820181905260e082018190526101008201528251909161137e91840181019084016121ec565b6033546001600160a01b0316331461140a5760405162461bcd60e51b81526004016106729061246a565b6001600160a01b03811661146f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610672565b6114788161181d565b50565b600060038351600261148d91906126d1565b61149791906126b1565b6114a2906001612664565b905060405180608001604052808363ffffffff168152602001609b60059054906101000a900463ffffffff16846114d99190612664565b63ffffffff9081168252855181166020830152609b54604090920191610100900481169084161061150a5782611519565b609b54610100900463ffffffff165b63ffffffff9081169091528581166000818152609a60209081526040918290208551815487840151888601516060998a015163ffffffff199093169389169390931767ffffffff00000000191664010000000091891691909102176bffffffff00000000000000001916600160401b928816929092029190911763ffffffff60601b1916600160601b9187169190910217908190558251818616815281831c86169281019290925280831c851682840152851c9093169383019390935291517f640133a6dd957aa8ea6ee5bced590b08a2716453408d9473d007756d0d947e79916080908290030190a260005b83518110156116ac57600084828151811061163157634e487b7160e01b600052603260045260246000fd5b60209081029190910181015163ffffffff881660008181526098845260408082206001600160a01b0385168084529552808220805460ff191660011790555192945090917f94819138a8ba708dfe846523a28de6ec7c2838e707270e6be73644534e5979ef9190a350806116a48161272d565b915050611606565b5050505050565b60655460ff166116fc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610672565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000806000808451604114611761576000935050505061137e565b50505060208201516040830151606084015160001a601b81101561178d5761178a601b8261268c565b90505b8060ff16601b141580156117a557508060ff16601c14155b156117b6576000935050505061137e565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015611809573d6000803e3d6000fd5b50505060206040510351935050505061137e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16156118b55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610672565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117293390565b600054610100900460ff1680611903575060005460ff16155b61191f5760405162461bcd60e51b81526004016106729061241c565b600054610100900460ff1615801561194a576000805460ff1961ff0019909116610100171660011790555b611952611b01565b61195a611b74565b8015611478576000805461ff001916905550565b600054610100900460ff1680611987575060005460ff16155b6119a35760405162461bcd60e51b81526004016106729061241c565b600054610100900460ff161580156119ce576000805460ff1961ff0019909116610100171660011790555b6119d6611b01565b61195a611bf2565b60008080805b8551811015611af7576000611a2088888481518110611a1357634e487b7160e01b600052603260045260246000fd5b6020026020010151610cc9565b9050836001600160a01b0316816001600160a01b031611611a8d5760405162461bcd60e51b815260206004820152602160248201527f4272696467653a207369676e6174757265732073657175656e63652077726f6e6044820152606760f81b6064820152608401610672565b63ffffffff861660009081526098602090815260408083206001600160a01b0385168452909152902054909350839060ff168015611ad15750611acf81611257565b155b15611ae45782611ae081612748565b9350505b5080611aef8161272d565b9150506119e4565b5095945050505050565b600054610100900460ff1680611b1a575060005460ff16155b611b365760405162461bcd60e51b81526004016106729061241c565b600054610100900460ff1615801561195a576000805460ff1961ff0019909116610100171660011790558015611478576000805461ff001916905550565b600054610100900460ff1680611b8d575060005460ff16155b611ba95760405162461bcd60e51b81526004016106729061241c565b600054610100900460ff16158015611bd4576000805460ff1961ff0019909116610100171660011790555b6065805460ff191690558015611478576000805461ff001916905550565b600054610100900460ff1680611c0b575060005460ff16155b611c275760405162461bcd60e51b81526004016106729061241c565b600054610100900460ff16158015611c52576000805460ff1961ff0019909116610100171660011790555b61195a3361181d565b6000611c6e611c698461261a565b6125ea565b83815290506020808201908360005b86811015611ca457611c928883358801611d0d565b84529282019290820190600101611c7d565b505050509392505050565b8035611274816127c4565b8051611274816127c4565b60008083601f840112611cd6578182fd5b5081356001600160401b03811115611cec578182fd5b6020830191508360208083028501011115611d0657600080fd5b9250929050565b600082601f830112611d1d578081fd5b8135611d2b611c698261263d565b818152846020838601011115611d3f578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611d69578081fd5b8151611d77611c698261263d565b818152846020838601011115611d8b578283fd5b611d9c8260208301602087016126fd565b949350505050565b8035611274816127d9565b8051611274816127d9565b8035611274816127e8565b8051611274816127e8565b8035611274816127fa565b8051611274816127fa565b600060208284031215611df7578081fd5b8135610d33816127c4565b60008060008060008060008060e0898b031215611e1d578384fd5b8835611e28816127c4565b97506020890135611e38816127c4565b96506040890135611e48816127e8565b95506060890135611e58816127e8565b94506080890135611e68816127e8565b935060a0890135611e78816127e8565b925060c08901356001600160401b03811115611e92578283fd5b611e9e8b828c01611cc5565b999c989b5096995094979396929594505050565b60008060208385031215611ec4578182fd5b82356001600160401b03811115611ed9578283fd5b611ee585828601611cc5565b90969095509350505050565b600080600060408486031215611f05578081fd5b83356001600160401b03811115611f1a578182fd5b611f2686828701611cc5565b9094509250506020840135611f3a816127e8565b809150509250925092565b600060208284031215611f56578081fd5b5035919050565b60008060008060408587031215611f72578182fd5b84356001600160401b0380821115611f88578384fd5b818701915087601f830112611f9b578384fd5b813581811115611fa9578485fd5b886020828501011115611fba578485fd5b602092830196509450908601359080821115611fd4578384fd5b50611fe187828801611cc5565b95989497509550505050565b600060208284031215611ffe578081fd5b81356001600160401b03811115612013578182fd5b611d9c84828501611d0d565b60008060408385031215612031578182fd5b82356001600160401b0380821115612047578384fd5b61205386838701611d0d565b93506020850135915080821115612068578283fd5b508301601f81018513612079578182fd5b61208885823560208401611c5b565b9150509250929050565b600080604083850312156120a4578182fd5b82356001600160401b03808211156120ba578384fd5b6120c686838701611d0d565b935060208501359150808211156120db578283fd5b5061208885828601611d0d565b6000604082840312156120f9578081fd5b50919050565b600060208284031215612110578081fd5b81356001600160401b0380821115612126578283fd5b818401915061012080838703121561213c578384fd5b612145816125ea565b905061215083611dd0565b815261215e60208401611dba565b6020820152604083013582811115612174578485fd5b61218087828601611d0d565b60408301525061219260608401611da4565b6060820152608083013560808201526121ad60a08401611da4565b60a082015260c083013560c08201526121c860e08401611caf565b60e082015261010091506121dd828401611dba565b91810191909152949350505050565b6000602082840312156121fd578081fd5b81516001600160401b0380821115612213578283fd5b8184019150610120808387031215612229578384fd5b612232816125ea565b905061223d83611ddb565b815261224b60208401611dc5565b6020820152604083015182811115612261578485fd5b61226d87828601611d59565b60408301525061227f60608401611daf565b60608201526080830151608082015261229a60a08401611daf565b60a082015260c083015160c08201526122b560e08401611cba565b60e082015261010091506121dd828401611dc5565b6000602082840312156122db578081fd5b8135610d33816127e8565b600080604083850312156122f8578182fd5b8235612303816127e8565b91506020830135612313816127c4565b809150509250929050565b600080600060608486031215612332578081fd5b835161233d816127e8565b809350506020808501516001600160401b0381111561235a578283fd5b8501601f8101871361236a578283fd5b8051612378611c698261261a565b81815283810190838501858402850186018b1015612394578687fd5b8694505b838510156123bf5780516123ab816127c4565b835260019490940193918501918501612398565b5080965050505050506123d460408501611dc5565b90509250925092565b600081518084526123f58160208601602086016126fd565b601f01601f19169290920160200192915050565b600060208252610d3360208301846123dd565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6040810182356124ae816127d9565b8060000b8352506020830135602083015292915050565b6000602082526124e16020830184516001600160401b03169052565b602083015163ffffffff8116604084015250604083015161012080606085015261250f6101408501836123dd565b91506060850151612525608086018260000b9052565b50608085015160a085015260a085015161254460c086018260000b9052565b5060c085015160e085015260e085015161010061256b818701836001600160a01b03169052565b9095015163ffffffff1693019290925250919050565b60006060820163ffffffff808716845260206060818601528287518085526080870191508289019450855b818110156125d15785516001600160a01b0316835294830194918301916001016125ac565b5050809450505080851660408501525050949350505050565b604051601f8201601f191681016001600160401b038111828210171561261257612612612782565b604052919050565b60006001600160401b0382111561263357612633612782565b5060209081020190565b60006001600160401b0382111561265657612656612782565b50601f01601f191660200190565b600063ffffffff8083168185168083038211156126835761268361276c565b01949350505050565b600060ff821660ff84168060ff038211156126a9576126a961276c565b019392505050565b6000826126cc57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156126eb576126eb61276c565b500290565b6000610d33368484611c5b565b60005b83811015612718578181015183820152602001612700565b83811115612727576000848401525b50505050565b60006000198214156127415761274161276c565b5060010190565b600063ffffffff808316818114156127625761276261276c565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b81356127a3816127d9565b60ff1982541660ff8260000b16811783555050602082013560018201555050565b6001600160a01b038116811461147857600080fd5b8060000b811461147857600080fd5b63ffffffff8116811461147857600080fd5b6001600160401b038116811461147857600080fdfea26469706673582212205b060c203d46d232c85b5e3b11703dc373d4eb46d6e3d496d46eb8eeb8c396ba64736f6c63430008020033",
  "devdoc": {
    "author": "https://github.com/broxus",
    "details": "Stores relays for each round, implements slashing, helps in validating TON-ETH events",
    "kind": "dev",
    "methods": {
      "banRelays(address[])": {
        "params": {
          "_relays": "List of relay addresses to ban"
        }
      },
      "forceRoundRelays(uint160[],uint32)": {
        "details": "Can be called only by `roundSubmitter`",
        "params": {
          "_relays": "Next round relays",
          "roundEnd": "Round end"
        }
      },
      "initialize(address,address,uint32,uint32,uint32,uint32,uint160[])": {
        "details": "`roundRelaysConfiguration` should be specified later.",
        "params": {
          "_initialRound": "Initial round number. Useful in case new EVM network is connected to the bridge.",
          "_initialRoundEnd": "Initial round end timestamp.",
          "_minimumRequiredSignatures": "Minimum required signatures per round.",
          "_owner": "Bridge owner",
          "_relays": "Initial set of relays. Encode addresses as uint160",
          "_roundSubmitter": "Round submitter",
          "_roundTTL": "Round TTL after round ends."
        }
      },
      "isBanned(address)": {
        "details": "Check if relay is banned. Ban is global. If the relay is banned it means it lost relay power in all rounds, past and future.",
        "params": {
          "candidate": "Address to check"
        }
      },
      "isRelay(uint32,address)": {
        "details": "Check if some address is relay at specific round",
        "params": {
          "candidate": "Address to check",
          "round": "Round id"
        }
      },
      "isRoundRotten(uint32)": {
        "details": "Check if round is rotten",
        "params": {
          "round": "Round id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "When Bridge paused, signature verification fails."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recoverSignature(bytes,bytes)": {
        "params": {
          "payload": "Payload",
          "signature": "Signature"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRoundRelays(bytes,bytes[])": {
        "details": "Grant relay permission for set of addresses at specific round",
        "params": {
          "payload": "Bytes encoded TONEvent structure",
          "signatures": "Payload signatures"
        }
      },
      "setRoundSubmitter(address)": {
        "details": "Can be called only by owner",
        "params": {
          "_roundSubmitter": "New round submitter address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unbanRelays(address[])": {
        "params": {
          "_relays": "List of relay addresses to unban"
        }
      },
      "updateMinimumRequiredSignatures(uint32)": {
        "params": {
          "_minimumRequiredSignatures": "New value"
        }
      },
      "updateRoundRelaysConfiguration((int8,uint256))": {
        "params": {
          "_roundRelaysConfiguration": "TON address of configuration"
        }
      },
      "updateRoundTTL(uint32)": {
        "details": "This affects only future rounds. Rounds, that were already set, keep their current TTL.",
        "params": {
          "_roundTTL": "New TTL value"
        }
      },
      "verifySignedTonEvent(bytes,bytes[])": {
        "details": "Signatures should be sorted by the ascending signers. Error codes: 0. Verification passed (no error) 1. Specified round is less than `initialRound` 2. Specified round is more than `lastRound` 3. Not enough correct signatures. Possible reasons: - Some of the signers are not relays at the specified round - Some of the signers are banned 4. Round is rotten. 5. Everything is correct, but bridge is in \"paused\" state",
        "params": {
          "payload": "Bytes encoded TONEvent structure",
          "signatures": "Payload signatures"
        },
        "returns": {
          "errorCode": "Error code"
        }
      }
    },
    "title": "Ethereum Bridge contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "banRelays(address[])": {
        "notice": "Ban relays"
      },
      "forceRoundRelays(uint160[],uint32)": {
        "notice": "Forced set of next round relays"
      },
      "initialize(address,address,uint32,uint32,uint32,uint32,uint160[])": {
        "notice": "Bridge initializer"
      },
      "pause()": {
        "notice": "Pause Bridge contract."
      },
      "recoverSignature(bytes,bytes)": {
        "notice": "Recover signer from the payload and signature"
      },
      "setRoundSubmitter(address)": {
        "notice": "Set round submitter"
      },
      "unbanRelays(address[])": {
        "notice": "Unban relays"
      },
      "unpause()": {
        "notice": "Unpause Bridge contract."
      },
      "updateMinimumRequiredSignatures(uint32)": {
        "notice": "Update minimum amount of required signatures per round"
      },
      "updateRoundRelaysConfiguration((int8,uint256))": {
        "notice": "Update address of configuration, that emits event with next round relays."
      },
      "updateRoundTTL(uint32)": {
        "notice": "Update round TTL"
      },
      "verifySignedTonEvent(bytes,bytes[])": {
        "notice": "Verify payload signatures."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 325,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 191,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 282,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3641,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "cache",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 2373,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "relays",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2377,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "blacklist",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2382,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "rounds",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint32,t_struct(Round)3164_storage)"
      },
      {
        "astId": 2384,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "emergencyShutdown",
        "offset": 0,
        "slot": "155",
        "type": "t_bool"
      },
      {
        "astId": 2386,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "minimumRequiredSignatures",
        "offset": 1,
        "slot": "155",
        "type": "t_uint32"
      },
      {
        "astId": 2388,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "roundTTL",
        "offset": 5,
        "slot": "155",
        "type": "t_uint32"
      },
      {
        "astId": 2390,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "initialRound",
        "offset": 9,
        "slot": "155",
        "type": "t_uint32"
      },
      {
        "astId": 2392,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "lastRound",
        "offset": 13,
        "slot": "155",
        "type": "t_uint32"
      },
      {
        "astId": 2394,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "roundSubmitter",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      },
      {
        "astId": 2397,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "roundRelaysConfiguration",
        "offset": 0,
        "slot": "157",
        "type": "t_struct(TONAddress)3169_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint32,t_struct(Round)3164_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct IBridge.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)3164_storage"
      },
      "t_struct(Round)3164_storage": {
        "encoding": "inplace",
        "label": "struct IBridge.Round",
        "members": [
          {
            "astId": 3157,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "end",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3159,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "ttl",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3161,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "relays",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3163,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "requiredSignatures",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TONAddress)3169_storage": {
        "encoding": "inplace",
        "label": "struct IBridge.TONAddress",
        "members": [
          {
            "astId": 3166,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "wid",
            "offset": 0,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 3168,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "addr",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}