{
  "address": "0x2BBD50E174D935b928C02b8E74e29F162a7Ebb56",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "BanRelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "EmergencyShutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "round",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "end",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "ttl",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "requiredSignatures",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IBridge.Round",
          "name": "meta",
          "type": "tuple"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "round",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "relay",
          "type": "address"
        }
      ],
      "name": "RoundRelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "UpdateMinimumRequiredSignatures",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "int8",
              "name": "wid",
              "type": "int8"
            },
            {
              "internalType": "uint256",
              "name": "addr",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBridge.TONAddress",
          "name": "configuration",
          "type": "tuple"
        }
      ],
      "name": "UpdateRoundRelaysConfiguration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "UpdateRoundTTL",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_relays",
          "type": "address[]"
        }
      ],
      "name": "banRelays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyShutdown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialRound",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_minimumRequiredSignatures",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_roundTTL",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_initialRound",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_initialRoundEnd",
          "type": "uint32"
        },
        {
          "internalType": "uint160[]",
          "name": "_relays",
          "type": "uint160[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "isBanned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "round",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "isRelay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "round",
          "type": "uint32"
        }
      ],
      "name": "isRoundRotten",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRound",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumRequiredSignatures",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "recoverSignature",
      "outputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "relays",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundRelaysConfiguration",
      "outputs": [
        {
          "internalType": "int8",
          "name": "wid",
          "type": "int8"
        },
        {
          "internalType": "uint256",
          "name": "addr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundTTL",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "end",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "ttl",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "requiredSignatures",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "setRoundRelays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_relays",
          "type": "address[]"
        }
      ],
      "name": "unbanRelays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_minimumRequiredSignatures",
          "type": "uint32"
        }
      ],
      "name": "updateMinimumRequiredSignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int8",
              "name": "wid",
              "type": "int8"
            },
            {
              "internalType": "uint256",
              "name": "addr",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBridge.TONAddress",
          "name": "_roundRelaysConfiguration",
          "type": "tuple"
        }
      ],
      "name": "updateRoundRelaysConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_roundTTL",
          "type": "uint32"
        }
      ],
      "name": "updateRoundTTL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "verifySignedTonEvent",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "errorCode",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3537d48e8b19d70cc2193b897b17e4ac688d0fca499adcabf0cdc79c7287bb30",
  "receipt": {
    "to": null,
    "from": "0x18d0A2fd70e3A0c20DAd2C7dE40290BC8C2696F7",
    "contractAddress": "0x2BBD50E174D935b928C02b8E74e29F162a7Ebb56",
    "transactionIndex": 13,
    "gasUsed": "2068949",
    "logsBloom": "0x
    "blockHash": "0xf8978164714394789a7a560dc5e007d34eef57002bfeef6cb035cbeaef78ce87",
    "transactionHash": "0x3537d48e8b19d70cc2193b897b17e4ac688d0fca499adcabf0cdc79c7287bb30",
    "logs": [],
    "blockNumber": 5472916,
    "cumulativeGasUsed": "3276301",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f9fcb9efb6e7f633fac25888459f2944",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BanRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"ttl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"requiredSignatures\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IBridge.Round\",\"name\":\"meta\",\"type\":\"tuple\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"RoundRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"UpdateMinimumRequiredSignatures\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBridge.TONAddress\",\"name\":\"configuration\",\"type\":\"tuple\"}],\"name\":\"UpdateRoundRelaysConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"UpdateRoundTTL\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_relays\",\"type\":\"address[]\"}],\"name\":\"banRelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialRound\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_minimumRequiredSignatures\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_roundTTL\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_initialRound\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_initialRoundEnd\",\"type\":\"uint32\"},{\"internalType\":\"uint160[]\",\"name\":\"_relays\",\"type\":\"uint160[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isRelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"}],\"name\":\"isRoundRotten\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRound\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumRequiredSignatures\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recoverSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundRelaysConfiguration\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundTTL\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"ttl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"requiredSignatures\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setRoundRelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_relays\",\"type\":\"address[]\"}],\"name\":\"unbanRelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minimumRequiredSignatures\",\"type\":\"uint32\"}],\"name\":\"updateMinimumRequiredSignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IBridge.TONAddress\",\"name\":\"_roundRelaysConfiguration\",\"type\":\"tuple\"}],\"name\":\"updateRoundRelaysConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_roundTTL\",\"type\":\"uint32\"}],\"name\":\"updateRoundTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"verifySignedTonEvent\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"errorCode\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"https://github.com/broxus\",\"details\":\"Stores relays for each round, implements slashing, helps in validating TON-ETH events\",\"kind\":\"dev\",\"methods\":{\"banRelays(address[])\":{\"params\":{\"_relays\":\"List of relay addresses to ban\"}},\"initialize(address,uint32,uint32,uint32,uint32,uint160[])\":{\"details\":\"`roundRelaysConfiguration` should be specified later.\",\"params\":{\"_initialRound\":\"Initial round number. Useful in case new EVM network is connected to the bridge.\",\"_initialRoundEnd\":\"Initial round end timestamp.\",\"_minimumRequiredSignatures\":\"Minimum required signatures per round.\",\"_owner\":\"Bridge owner\",\"_relays\":\"Initial set of relays. Encode addresses as uint160\",\"_roundTTL\":\"Round TTL after round ends.\"}},\"isBanned(address)\":{\"details\":\"Check if relay is banned. Ban is global. If the relay is banned it means it lost relay power in all rounds, past and future.\",\"params\":{\"candidate\":\"Address to check\"}},\"isRelay(uint32,address)\":{\"details\":\"Check if some address is relay at specific round\",\"params\":{\"candidate\":\"Address to check\",\"round\":\"Round id\"}},\"isRoundRotten(uint32)\":{\"details\":\"Check if round is rotten\",\"params\":{\"round\":\"Round id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"When Bridge paused, signature verification fails.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoverSignature(bytes,bytes)\":{\"params\":{\"payload\":\"Payload\",\"signature\":\"Signature\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRoundRelays(bytes,bytes[])\":{\"details\":\"Grant relay permission for set of addresses at specific round\",\"params\":{\"payload\":\"Bytes encoded TONEvent structure\",\"signatures\":\"Payload signatures\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unbanRelays(address[])\":{\"params\":{\"_relays\":\"List of relay addresses to unban\"}},\"updateMinimumRequiredSignatures(uint32)\":{\"params\":{\"_minimumRequiredSignatures\":\"New value\"}},\"updateRoundRelaysConfiguration((int8,uint256))\":{\"params\":{\"_roundRelaysConfiguration\":\"TON address of configuration\"}},\"updateRoundTTL(uint32)\":{\"details\":\"This affects only future rounds. Rounds, that were already set, keep their current TTL.\",\"params\":{\"_roundTTL\":\"New TTL value\"}},\"verifySignedTonEvent(bytes,bytes[])\":{\"details\":\"Signatures should be sorted by the ascending signers. Error codes: 0. Verification passed (no error) 1. Specified round is less than `initialRound` 2. Specified round is more than `lastRound` 3. Not enough correct signatures. Possible reasons: - Some of the signers are not relays at the specified round - Some of the signers are banned 4. Round is rotten. 5. Everything is correct, but bridge is in \\\"paused\\\" state\",\"params\":{\"payload\":\"Bytes encoded TONEvent structure\",\"signatures\":\"Payload signatures\"},\"returns\":{\"errorCode\":\"Error code\"}}},\"title\":\"Ethereum Bridge contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"banRelays(address[])\":{\"notice\":\"Ban relays\"},\"initialize(address,uint32,uint32,uint32,uint32,uint160[])\":{\"notice\":\"Bridge initializer\"},\"pause()\":{\"notice\":\"Pause Bridge contract.\"},\"recoverSignature(bytes,bytes)\":{\"notice\":\"Recover signer from the payload and signature\"},\"unbanRelays(address[])\":{\"notice\":\"Unban relays\"},\"unpause()\":{\"notice\":\"Unpause Bridge contract.\"},\"updateMinimumRequiredSignatures(uint32)\":{\"notice\":\"Update minimum amount of required signatures per round\"},\"updateRoundRelaysConfiguration((int8,uint256))\":{\"notice\":\"Update address of configuration, that emits event with next round relays.\"},\"updateRoundTTL(uint32)\":{\"notice\":\"Update round TTL\"},\"verifySignedTonEvent(bytes,bytes[])\":{\"notice\":\"Verify payload signatures.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"contracts/bridge/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./../interfaces/IBridge.sol\\\";\\nimport \\\"./../libraries/ECDSA.sol\\\";\\n\\nimport \\\"./../utils/Cache.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n\\n/// @title Ethereum Bridge contract\\n/// @author https://github.com/broxus\\n/// @dev Stores relays for each round, implements slashing, helps in validating TON-ETH events\\ncontract Bridge is OwnableUpgradeable, PausableUpgradeable, Cache, IBridge {\\n    using ECDSA for bytes32;\\n\\n    // NOTE: round number -> address -> is relay?\\n    mapping (uint32 => mapping(address => bool)) public relays;\\n\\n    // NOTE: is relay banned or not\\n    mapping (address => bool) public blacklist;\\n\\n    // NOTE: round meta data\\n    mapping (uint32 => Round) public rounds;\\n\\n    // NOTE: signature verifications always fails is emergency is on\\n    bool public emergencyShutdown;\\n\\n    // NOTE: The required signatures per round can't be less than this\\n    uint32 public minimumRequiredSignatures;\\n\\n    // NOTE: how long round signatures are considered valid after the end of the round\\n    uint32 public roundTTL;\\n\\n    // NOTE: initial round number\\n    uint32 public initialRound;\\n\\n    // NOTE: last round with known relays\\n    uint32 public lastRound;\\n\\n    // NOTE: Broxus Bridge TON-ETH configuration address, that emits event with round relays\\n    TONAddress public roundRelaysConfiguration;\\n\\n    /**\\n        @notice\\n            Bridge initializer\\n        @dev\\n            `roundRelaysConfiguration` should be specified later.\\n        @param _owner Bridge owner\\n        @param _minimumRequiredSignatures Minimum required signatures per round.\\n        @param _roundTTL Round TTL after round ends.\\n        @param _initialRound Initial round number. Useful in case new EVM network is connected to the bridge.\\n        @param _initialRoundEnd Initial round end timestamp.\\n        @param _relays Initial set of relays. Encode addresses as uint160\\n    */\\n    function initialize(\\n        address _owner,\\n        uint32 _minimumRequiredSignatures,\\n        uint32 _roundTTL,\\n        uint32 _initialRound,\\n        uint32 _initialRoundEnd,\\n        uint160[] calldata _relays\\n    ) external initializer {\\n        __Pausable_init();\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n\\n        minimumRequiredSignatures = _minimumRequiredSignatures;\\n        emit UpdateMinimumRequiredSignatures(minimumRequiredSignatures);\\n\\n        roundTTL = _roundTTL;\\n        emit UpdateRoundTTL(roundTTL);\\n\\n        require(\\n            _initialRoundEnd >= block.timestamp,\\n            \\\"Bridge: initial round end should be in the future\\\"\\n        );\\n\\n        initialRound = _initialRound;\\n        _setRound(initialRound, _relays, _initialRoundEnd);\\n\\n        lastRound = initialRound;\\n    }\\n\\n    /**\\n        @notice\\n            Update address of configuration, that emits event with next round relays.\\n        @param _roundRelaysConfiguration TON address of configuration\\n    */\\n    function updateRoundRelaysConfiguration(\\n        TONAddress calldata _roundRelaysConfiguration\\n    ) external override onlyOwner {\\n        emit UpdateRoundRelaysConfiguration(_roundRelaysConfiguration);\\n\\n        roundRelaysConfiguration = _roundRelaysConfiguration;\\n    }\\n\\n    /**\\n        @notice\\n            Pause Bridge contract.\\n        @dev\\n            When Bridge paused, signature verification fails.\\n    */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n        @notice\\n            Unpause Bridge contract.\\n    */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n        @notice\\n            Update minimum amount of required signatures per round\\n        @param _minimumRequiredSignatures New value\\n    */\\n    function updateMinimumRequiredSignatures(\\n        uint32 _minimumRequiredSignatures\\n    ) external override onlyOwner {\\n        minimumRequiredSignatures = _minimumRequiredSignatures;\\n\\n        emit UpdateMinimumRequiredSignatures(_minimumRequiredSignatures);\\n    }\\n\\n    /**\\n        @notice\\n            Update round TTL\\n        @dev\\n            This affects only future rounds. Rounds, that were already set,\\n            keep their current TTL.\\n        @param _roundTTL New TTL value\\n    */\\n    function updateRoundTTL(\\n        uint32 _roundTTL\\n    ) external override onlyOwner {\\n        roundTTL = _roundTTL;\\n\\n        emit UpdateRoundTTL(_roundTTL);\\n    }\\n\\n    /// @dev Check if relay is banned.\\n    /// Ban is global. If the relay is banned it means it lost\\n    /// relay power in all rounds, past and future.\\n    /// @param candidate Address to check\\n    function isBanned(\\n        address candidate\\n    ) override public view returns(bool) {\\n        return blacklist[candidate];\\n    }\\n\\n    /// @dev Check if some address is relay at specific round\\n    /// @param round Round id\\n    /// @param candidate Address to check\\n    function isRelay(\\n        uint32 round,\\n        address candidate\\n    ) override public view returns (bool) {\\n        return relays[round][candidate];\\n    }\\n\\n    /// @dev Check if round is rotten\\n    /// @param round Round id\\n    function isRoundRotten(\\n        uint32 round\\n    ) override public view returns (bool) {\\n        return block.timestamp > rounds[round].ttl;\\n    }\\n\\n    /**\\n        @notice\\n            Verify payload signatures.\\n        @dev\\n            Signatures should be sorted by the ascending signers.\\n            Error codes:\\n                0. Verification passed (no error)\\n                1. Specified round is less than `initialRound`\\n                2. Specified round is more than `lastRound`\\n                3. Not enough correct signatures. Possible reasons:\\n                    - Some of the signers are not relays at the specified round\\n                    - Some of the signers are banned\\n                4. Round is rotten.\\n                5. Everything is correct, but bridge is in \\\"paused\\\" state\\n\\n        @param payload Bytes encoded TONEvent structure\\n        @param signatures Payload signatures\\n        @return errorCode Error code\\n    */\\n    function verifySignedTonEvent(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    )\\n        override\\n        public\\n        view\\n    returns (\\n        uint32 errorCode\\n    ) {\\n        (TONEvent memory tonEvent) = abi.decode(payload, (TONEvent));\\n\\n        if (tonEvent.round < initialRound) return 1;\\n        if (tonEvent.round > lastRound) return 2;\\n\\n        // Check there are enough correct signatures\\n        uint32 count = _countRelaySignatures(payload, signatures, tonEvent.round);\\n        if (count < rounds[tonEvent.round].requiredSignatures) return 3;\\n\\n        // Check round rotten\\n        if (isRoundRotten(tonEvent.round)) return 4;\\n\\n        // Check bridge has been paused\\n        if (paused()) return 5;\\n\\n        return 0;\\n    }\\n\\n    /**\\n        @notice\\n            Recover signer from the payload and signature\\n        @param payload Payload\\n        @param signature Signature\\n    */\\n    function recoverSignature(\\n        bytes memory payload,\\n        bytes memory signature\\n    ) public pure returns (address signer) {\\n        signer = keccak256(payload)\\n            .toBytesPrefixed()\\n            .recover(signature);\\n    }\\n\\n    /// @dev Grant relay permission for set of addresses at specific round\\n    /// @param payload Bytes encoded TONEvent structure\\n    /// @param signatures Payload signatures\\n    function setRoundRelays(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) override external notCached(payload) {\\n        require(\\n            verifySignedTonEvent(\\n                payload,\\n                signatures\\n            ) == 0,\\n            \\\"Bridge: signatures verification failed\\\"\\n        );\\n\\n        (TONEvent memory tonEvent) = abi.decode(payload, (TONEvent));\\n\\n        require(\\n            tonEvent.proxy == address(this),\\n            \\\"Bridge: wrong event proxy\\\"\\n        );\\n\\n        require(\\n            tonEvent.configurationWid == roundRelaysConfiguration.wid &&\\n            tonEvent.configurationAddress == roundRelaysConfiguration.addr,\\n            \\\"Bridge: wrong event configuration\\\"\\n        );\\n\\n        (uint32 round, uint160[] memory _relays, uint32 roundEnd) = abi.decode(\\n            tonEvent.eventData,\\n            (uint32, uint160[], uint32)\\n        );\\n\\n        require(round == lastRound + 1, \\\"Bridge: wrong round\\\");\\n\\n        _setRound(round, _relays, roundEnd);\\n\\n        lastRound++;\\n    }\\n\\n    /**\\n        @notice\\n            Ban relays\\n        @param _relays List of relay addresses to ban\\n    */\\n    function banRelays(\\n        address[] calldata _relays\\n    ) override external onlyOwner {\\n        for (uint i=0; i<_relays.length; i++) {\\n            blacklist[_relays[i]] = true;\\n\\n            emit BanRelay(_relays[i], true);\\n        }\\n    }\\n\\n    /**\\n        @notice\\n            Unban relays\\n        @param _relays List of relay addresses to unban\\n    */\\n    function unbanRelays(\\n        address[] calldata _relays\\n    ) override external onlyOwner {\\n        for (uint i=0; i<_relays.length; i++) {\\n            blacklist[_relays[i]] = false;\\n\\n            emit BanRelay(_relays[i], false);\\n        }\\n    }\\n\\n    function _setRound(\\n        uint32 round,\\n        uint160[] memory _relays,\\n        uint32 roundEnd\\n    ) internal {\\n        uint32 requiredSignatures = uint32(_relays.length * 2 / 3) + 1;\\n\\n        rounds[round] = Round(\\n            roundEnd,\\n            roundEnd + roundTTL,\\n            requiredSignatures < minimumRequiredSignatures ? minimumRequiredSignatures : requiredSignatures\\n        );\\n\\n        emit NewRound(round, rounds[round]);\\n\\n        for (uint i=0; i<_relays.length; i++) {\\n            address relay = address(_relays[i]);\\n\\n            relays[round][relay] = true;\\n\\n            emit RoundRelay(round, relay);\\n        }\\n    }\\n\\n    function _countRelaySignatures(\\n        bytes memory payload,\\n        bytes[] memory signatures,\\n        uint32 round\\n    ) internal view returns (uint32) {\\n        address lastSigner = address(0);\\n        uint32 count = 0;\\n\\n        for (uint i=0; i<signatures.length; i++) {\\n            address signer = recoverSignature(payload, signatures[i]);\\n\\n            require(signer > lastSigner, \\\"Bridge: signatures sequence wrong\\\");\\n            lastSigner = signer;\\n\\n            if (isRelay(round, signer) && !isBanned(signer)) {\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n\",\"keccak256\":\"0xe607ca4c242d8543ffca6cdcfaeb9a31f83c35c0af78b17da288c9c2ef71db67\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IBridge {\\n    struct TONEvent {\\n        uint64 eventTransactionLt;\\n        uint32 eventTimestamp;\\n        bytes eventData;\\n        int8 configurationWid;\\n        uint256 configurationAddress;\\n        int8 eventContractWid;\\n        uint256 eventContractAddress;\\n        address proxy;\\n        uint32 round;\\n    }\\n\\n    struct Round {\\n        uint32 end;\\n        uint32 ttl;\\n        uint32 requiredSignatures;\\n    }\\n\\n    struct TONAddress {\\n        int8 wid;\\n        uint256 addr;\\n    }\\n\\n    function updateMinimumRequiredSignatures(uint32 _minimumRequiredSignatures) external;\\n    function updateRoundRelaysConfiguration(TONAddress calldata _roundRelaysConfiguration) external;\\n    function updateRoundTTL(uint32 _roundTTL) external;\\n\\n    function isRelay(\\n        uint32 round,\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isBanned(\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isRoundRotten(\\n        uint32 round\\n    ) external view returns(bool);\\n\\n    function verifySignedTonEvent(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external view returns(uint32);\\n\\n    function setRoundRelays(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) external;\\n\\n    function banRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function unbanRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function pause() external;\\n    function unpause() external;\\n\\n    event EmergencyShutdown(bool active);\\n\\n    event UpdateMinimumRequiredSignatures(uint32 value);\\n    event UpdateRoundTTL(uint32 value);\\n    event UpdateRoundRelaysConfiguration(TONAddress configuration);\\n\\n    event NewRound(uint32 indexed round, Round meta);\\n    event RoundRelay(uint32 indexed round, address indexed relay);\\n    event BanRelay(address indexed relay, bool status);\\n}\\n\",\"keccak256\":\"0xbf338191557358051b0be1dcfd83963749e5380df42eae720cf08d7aa400e602\",\"license\":\"Apache-2.0\"},\"contracts/libraries/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nlibrary ECDSA {\\n\\n    /**\\n     * @dev Recover signer address from a message by using their signature\\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n    internal\\n    pure\\n    returns (address)\\n    {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            return (address(0));\\n        }\\n\\n        // Divide the signature in r, s and v variables with inline assembly.\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (v != 27 && v != 28) {\\n            return (address(0));\\n        } else {\\n            // solium-disable-next-line arg-overflow\\n            return ecrecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n      * toBytesPrefixed\\n      * @dev prefix a bytes32 value with \\\"\\\\x19Ethereum Signed Message:\\\"\\n      * and hash the result\\n      */\\n    function toBytesPrefixed(bytes32 hash)\\n    internal\\n    pure\\n    returns (bytes32)\\n    {\\n        return keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xef678ab25df3f1ae9dc38b295c2f0bb8ea21d11103bd87c6e355042ccdf5d142\",\"license\":\"Apache-2.0\"},\"contracts/utils/Cache.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ncontract Cache {\\n    mapping (bytes32 => bool) public cache;\\n\\n    modifier notCached(bytes memory payload) {\\n        bytes32 hash_ = keccak256(abi.encode(payload));\\n\\n        require(cache[hash_] == false, \\\"Cache: payload already seen\\\");\\n\\n        _;\\n\\n        cache[hash_] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x892ab15314f50ccc98be6da2bd21b0195e01a4d6fa8f01a5539dd42a8d17e753\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612479806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80638456cb59116100f9578063a8719e0011610097578063e35d165311610071578063e35d165314610372578063f2fde38b1461037a578063f9f92be41461038d578063fa78e3bf146103a0576101c4565b8063a8719e0014610344578063c46f602f14610357578063e17ddc411461036a576101c4565b806390bc2f7f116100d357806390bc2f7f146102f857806397f735d51461030b57806399eb59b91461031e578063a40b9e7314610331576101c4565b80638456cb59146102d557806387f24b78146102dd5780638da5cb5b146102f0576101c4565b8063507b8ed2116101665780636399e834116101405780636399e8341461028d578063715018a6146102a357806379a6d51f146102ab57806382bc07e6146102cd576101c4565b8063507b8ed21461025f57806356db6fff146102725780635c975abb14610285576101c4565b80633637f6a8116101a25780633637f6a8146102115780633b1e8156146102245780633f4ba83a146102375780634d6e855e1461023f576101c4565b806304f5b841146101c957806331f25330146101de5780633403c2fc146101fc575b600080fd5b6101dc6101d73660046119d0565b6103b3565b005b6101e6610607565b6040516101f391906121f4565b60405180910390f35b61020461061a565b6040516101f39190611e63565b6101dc61021f366004611d0b565b610623565b6101dc610232366004611979565b6106b7565b6101dc6107f1565b61025261024d366004611ad3565b61083a565b6040516101f39190611e4f565b6101dc61026d366004611d0b565b61085d565b6101dc610280366004611979565b6108ee565b610204610a23565b610295610a2c565b6040516101f3929190611ebf565b6101dc610a3c565b6102be6102b9366004611d0b565b610a85565b6040516101f393929190612205565b6101e6610ab4565b6101dc610ac7565b6101dc6102eb366004611b29565b610b0e565b610252610b91565b6101dc6103063660046118db565b610ba0565b6102046103193660046118bf565b610db7565b61020461032c3660046119b8565b610dd9565b6101e661033f366004611a60565b610dee565b610204610352366004611d27565b610eef565b610204610365366004611d27565b610f0f565b6101e6610f42565b6101e6610f57565b6101dc6103883660046118bf565b610f68565b61020461039b3660046118bf565b610fd9565b6102046103ae366004611d0b565b610fee565b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040519093506103fb9250849150602001611e8c565b60408051601f1981840301815291815281516020928301206000818152609790935291205490915060ff161561044c5760405162461bcd60e51b81526004016104439061207a565b60405180910390fd5b61049286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061033f9250879150889050612324565b63ffffffff16156104b55760405162461bcd60e51b815260040161044390612161565b60006104c386880188611b40565b60e08101519091506001600160a01b031630146104f25760405162461bcd60e51b815260040161044390611f46565b609c546060820151600091820b820b910b1480156105155750609d546080820151145b6105315760405162461bcd60e51b815260040161044390611fbe565b6000806000836040015180602001905181019061054e9190611d5f565b609b54929550909350915061057190600160681b900463ffffffff166001612298565b63ffffffff168363ffffffff161461059b5760405162461bcd60e51b815260040161044390612134565b6105a6838383611013565b609b8054600160681b900463ffffffff1690600d6105c38361237c565b825463ffffffff9182166101009390930a928302919092021990911617905550505060009283525050609760205260409020805460ff191660011790555050505050565b609b54600160481b900463ffffffff1681565b609b5460ff1681565b61062b611203565b6001600160a01b031661063c610b91565b6001600160a01b0316146106625760405162461bcd60e51b8152600401610443906120ff565b609b805464ffffffff00191661010063ffffffff8416021790556040517fb80014cbadaa4692dd31be5d87278068d67ed23b027c3063f855b3f828a00ea2906106ac9083906121f4565b60405180910390a150565b6106bf611203565b6001600160a01b03166106d0610b91565b6001600160a01b0316146106f65760405162461bcd60e51b8152600401610443906120ff565b60005b818110156107ec5760016099600085858581811061072757634e487b7160e01b600052603260045260246000fd5b905060200201602081019061073c91906118bf565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905582828281811061078457634e487b7160e01b600052603260045260246000fd5b905060200201602081019061079991906118bf565b6001600160a01b03167f8e91a79c752035dd825468c2990c5d65794e64e4025fa3b1800c4eef2bdd424960016040516107d29190611e63565b60405180910390a2806107e481612361565b9150506106f9565b505050565b6107f9611203565b6001600160a01b031661080a610b91565b6001600160a01b0316146108305760405162461bcd60e51b8152600401610443906120ff565b610838611207565b565b6000610856826108508580519060200120611275565b906112a5565b9392505050565b610865611203565b6001600160a01b0316610876610b91565b6001600160a01b03161461089c5760405162461bcd60e51b8152600401610443906120ff565b609b805468ffffffff000000000019166501000000000063ffffffff8416021790556040517f33bf3241a8582c0b4d713c63761f4f809f651202e32748b335ec8bda0ac74f6c906106ac9083906121f4565b6108f6611203565b6001600160a01b0316610907610b91565b6001600160a01b03161461092d5760405162461bcd60e51b8152600401610443906120ff565b60005b818110156107ec5760006099600085858581811061095e57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061097391906118bf565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558282828181106109bb57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109d091906118bf565b6001600160a01b03167f8e91a79c752035dd825468c2990c5d65794e64e4025fa3b1800c4eef2bdd42496000604051610a099190611e63565b60405180910390a280610a1b81612361565b915050610930565b60655460ff1690565b609c54609d5460009190910b9082565b610a44611203565b6001600160a01b0316610a55610b91565b6001600160a01b031614610a7b5760405162461bcd60e51b8152600401610443906120ff565b610838600061136e565b609a6020526000908152604090205463ffffffff808216916401000000008104821691600160401b9091041683565b609b54600160681b900463ffffffff1681565b610acf611203565b6001600160a01b0316610ae0610b91565b6001600160a01b031614610b065760405162461bcd60e51b8152600401610443906120ff565b6108386113c0565b610b16611203565b6001600160a01b0316610b27610b91565b6001600160a01b031614610b4d5760405162461bcd60e51b8152600401610443906120ff565b7f0ae1c27ed06d996178e8dd8d5a4de962856a4a1896d7d93ffa83bbdb2960803d81604051610b7c91906121ce565b60405180910390a180609c6107ec82826123cc565b6033546001600160a01b031690565b600054610100900460ff1680610bb9575060005460ff16155b610bd55760405162461bcd60e51b8152600401610443906120b1565b600054610100900460ff16158015610c00576000805460ff1961ff0019909116610100171660011790555b610c0861141b565b610c1061149f565b610c1988610f68565b609b805464ffffffff00191661010063ffffffff8a8116820292909217928390556040517fb80014cbadaa4692dd31be5d87278068d67ed23b027c3063f855b3f828a00ea293610c6f93929004909116906121f4565b60405180910390a1609b805468ffffffff000000000019166501000000000063ffffffff898116820292909217928390556040517f33bf3241a8582c0b4d713c63761f4f809f651202e32748b335ec8bda0ac74f6c93610cd593929004909116906121f4565b60405180910390a1428463ffffffff161015610d035760405162461bcd60e51b815260040161044390612029565b84609b60096101000a81548163ffffffff021916908363ffffffff160217905550610d75609b60099054906101000a900463ffffffff16848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611013915050565b609b8054600160681b63ffffffff600160481b8304160263ffffffff60681b199091161790558015610dad576000805461ff00191690555b5050505050505050565b6001600160a01b03811660009081526099602052604090205460ff165b919050565b60976020526000908152604090205460ff1681565b60008083806020019051810190610e059190611c2d565b609b5461010082015191925063ffffffff600160481b909104811691161015610e32576001915050610ee9565b609b5461010082015163ffffffff600160681b909204821691161115610e5c576002915050610ee9565b6000610e6e858584610100015161150f565b61010083015163ffffffff9081166000908152609a6020526040902054919250600160401b90910481169082161015610eac57600392505050610ee9565b610eba826101000151610fee565b15610eca57600492505050610ee9565b610ed2610a23565b15610ee257600592505050610ee9565b6000925050505b92915050565b609860209081526000928352604080842090915290825290205460ff1681565b63ffffffff821660009081526098602090815260408083206001600160a01b038516845290915290205460ff1692915050565b609b5465010000000000900463ffffffff1681565b609b54610100900463ffffffff1681565b610f70611203565b6001600160a01b0316610f81610b91565b6001600160a01b031614610fa75760405162461bcd60e51b8152600401610443906120ff565b6001600160a01b038116610fcd5760405162461bcd60e51b815260040161044390611f00565b610fd68161136e565b50565b60996020526000908152604090205460ff1681565b63ffffffff9081166000908152609a6020526040902054640100000000900416421190565b60006003835160026110259190612305565b61102f91906122e5565b61103a906001612298565b905060405180606001604052808363ffffffff168152602001609b60059054906101000a900463ffffffff16846110719190612298565b63ffffffff9081168252609b54602090920191610100900481169084161061109957826110a8565b609b54610100900463ffffffff165b63ffffffff9081169091528581166000818152609a60209081526040918290208551815492870151968401518616600160401b026bffffffff0000000000000000199787166401000000000267ffffffff00000000199290971663ffffffff199094169390931716949094179490941693909317825591517f2ce61c979b72a1395bdb012126e61daf9bd4debed80bce11325d00d0faa2f41b9161114b916121a7565b60405180910390a260005b83518110156111fc57600084828151811061118157634e487b7160e01b600052603260045260246000fd5b60209081029190910181015163ffffffff881660008181526098845260408082206001600160a01b0385168084529552808220805460ff191660011790555192945090917f94819138a8ba708dfe846523a28de6ec7c2838e707270e6be73644534e5979ef9190a350806111f481612361565b915050611156565b5050505050565b3390565b61120f610a23565b61122b5760405162461bcd60e51b815260040161044390611ed2565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61125e611203565b60405161126b9190611e4f565b60405180910390a1565b6000816040516020016112889190611e1e565b604051602081830303815290604052805190602001209050919050565b60008060008084516041146112c05760009350505050610ee9565b50505060208201516040830151606084015160001a601b8110156112ec576112e9601b826122c0565b90505b8060ff16601b1415801561130457508060ff16601c14155b156113155760009350505050610ee9565b600186828585604051600081526020016040526040516113389493929190611e6e565b6020604051602081039080840390855afa15801561135a573d6000803e3d6000fd5b505050602060405103519350505050610ee9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6113c8610a23565b156113e55760405162461bcd60e51b815260040161044390611fff565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861125e611203565b600054610100900460ff1680611434575060005460ff16155b6114505760405162461bcd60e51b8152600401610443906120b1565b600054610100900460ff1615801561147b576000805460ff1961ff0019909116610100171660011790555b6114836115d3565b61148b611646565b8015610fd6576000805461ff001916905550565b600054610100900460ff16806114b8575060005460ff16155b6114d45760405162461bcd60e51b8152600401610443906120b1565b600054610100900460ff161580156114ff576000805460ff1961ff0019909116610100171660011790555b6115076115d3565b61148b6116c4565b60008080805b85518110156115c95760006115518888848151811061154457634e487b7160e01b600052603260045260246000fd5b602002602001015161083a565b9050836001600160a01b0316816001600160a01b0316116115845760405162461bcd60e51b815260040161044390611f7d565b8093506115918682610f0f565b80156115a357506115a181610db7565b155b156115b657826115b28161237c565b9350505b50806115c181612361565b915050611515565b5095945050505050565b600054610100900460ff16806115ec575060005460ff16155b6116085760405162461bcd60e51b8152600401610443906120b1565b600054610100900460ff1615801561148b576000805460ff1961ff0019909116610100171660011790558015610fd6576000805461ff001916905550565b600054610100900460ff168061165f575060005460ff16155b61167b5760405162461bcd60e51b8152600401610443906120b1565b600054610100900460ff161580156116a6576000805460ff1961ff0019909116610100171660011790555b6065805460ff191690558015610fd6576000805461ff001916905550565b600054610100900460ff16806116dd575060005460ff16155b6116f95760405162461bcd60e51b8152600401610443906120b1565b600054610100900460ff16158015611724576000805460ff1961ff0019909116610100171660011790555b61148b61172f611203565b61136e565b60006117476117428461224e565b612225565b83815290506020808201908360005b8681101561177d5761176b88833588016117e6565b84529282019290820190600101611756565b505050509392505050565b8035610dd4816123f8565b8051610dd4816123f8565b60008083601f8401126117af578182fd5b5081356001600160401b038111156117c5578182fd5b60208301915083602080830285010111156117df57600080fd5b9250929050565b600082601f8301126117f6578081fd5b813561180461174282612271565b818152846020838601011115611818578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611842578081fd5b815161185061174282612271565b818152846020838601011115611864578283fd5b611875826020830160208701612331565b949350505050565b8035610dd48161240d565b8051610dd48161240d565b8035610dd48161241c565b8051610dd48161241c565b8035610dd48161242e565b8051610dd48161242e565b6000602082840312156118d0578081fd5b8135610856816123f8565b600080600080600080600060c0888a0312156118f5578283fd5b8735611900816123f8565b965060208801356119108161241c565b955060408801356119208161241c565b945060608801356119308161241c565b935060808801356119408161241c565b925060a08801356001600160401b0381111561195a578283fd5b6119668a828b0161179e565b989b979a50959850939692959293505050565b6000806020838503121561198b578182fd5b82356001600160401b038111156119a0578283fd5b6119ac8582860161179e565b90969095509350505050565b6000602082840312156119c9578081fd5b5035919050565b600080600080604085870312156119e5578182fd5b84356001600160401b03808211156119fb578384fd5b818701915087601f830112611a0e578384fd5b813581811115611a1c578485fd5b886020828501011115611a2d578485fd5b602092830196509450908601359080821115611a47578384fd5b50611a548782880161179e565b95989497509550505050565b60008060408385031215611a72578182fd5b82356001600160401b0380821115611a88578384fd5b611a94868387016117e6565b93506020850135915080821115611aa9578283fd5b508301601f81018513611aba578182fd5b611ac985823560208401611734565b9150509250929050565b60008060408385031215611ae5578182fd5b82356001600160401b0380821115611afb578384fd5b611b07868387016117e6565b93506020850135915080821115611b1c578283fd5b50611ac9858286016117e6565b600060408284031215611b3a578081fd5b50919050565b600060208284031215611b51578081fd5b81356001600160401b0380821115611b67578283fd5b8184019150610120808387031215611b7d578384fd5b611b8681612225565b9050611b91836118a9565b8152611b9f60208401611893565b6020820152604083013582811115611bb5578485fd5b611bc1878286016117e6565b604083015250611bd36060840161187d565b606082015260808301356080820152611bee60a0840161187d565b60a082015260c083013560c0820152611c0960e08401611788565b60e08201526101009150611c1e828401611893565b91810191909152949350505050565b600060208284031215611c3e578081fd5b81516001600160401b0380821115611c54578283fd5b8184019150610120808387031215611c6a578384fd5b611c7381612225565b9050611c7e836118b4565b8152611c8c6020840161189e565b6020820152604083015182811115611ca2578485fd5b611cae87828601611832565b604083015250611cc060608401611888565b606082015260808301516080820152611cdb60a08401611888565b60a082015260c083015160c0820152611cf660e08401611793565b60e08201526101009150611c1e82840161189e565b600060208284031215611d1c578081fd5b81356108568161241c565b60008060408385031215611d39578182fd5b8235611d448161241c565b91506020830135611d54816123f8565b809150509250929050565b600080600060608486031215611d73578081fd5b8351611d7e8161241c565b809350506020808501516001600160401b03811115611d9b578283fd5b8501601f81018713611dab578283fd5b8051611db96117428261224e565b81815283810190838501858402850186018b1015611dd5578687fd5b8694505b83851015611e00578051611dec816123f8565b835260019490940193918501918501611dd9565b508096505050505050611e156040850161189e565b90509250925092565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b6000602082528251806020840152611eab816040850160208701612331565b601f01601f19169190910160400192915050565b60009290920b8252602082015260400190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526019908201527f4272696467653a2077726f6e67206576656e742070726f787900000000000000604082015260600190565b60208082526021908201527f4272696467653a207369676e6174757265732073657175656e63652077726f6e6040820152606760f81b606082015260800190565b60208082526021908201527f4272696467653a2077726f6e67206576656e7420636f6e66696775726174696f6040820152603760f91b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526031908201527f4272696467653a20696e697469616c20726f756e6420656e642073686f756c6460408201527020626520696e207468652066757475726560781b606082015260800190565b6020808252601b908201527f43616368653a207061796c6f616420616c7265616479207365656e0000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260139082015272109c9a5919d94e881ddc9bdb99c81c9bdd5b99606a1b604082015260600190565b60208082526026908201527f4272696467653a207369676e61747572657320766572696669636174696f6e2060408201526519985a5b195960d21b606082015260800190565b905463ffffffff8082168352602082811c821690840152604091821c169082015260600190565b6040810182356121dd8161240d565b8060000b8352506020830135602083015292915050565b63ffffffff91909116815260200190565b63ffffffff93841681529183166020830152909116604082015260600190565b6040518181016001600160401b0381118282101715612246576122466123b6565b604052919050565b60006001600160401b03821115612267576122676123b6565b5060209081020190565b60006001600160401b0382111561228a5761228a6123b6565b50601f01601f191660200190565b600063ffffffff8083168185168083038211156122b7576122b76123a0565b01949350505050565b600060ff821660ff84168060ff038211156122dd576122dd6123a0565b019392505050565b60008261230057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561231f5761231f6123a0565b500290565b6000610856368484611734565b60005b8381101561234c578181015183820152602001612334565b8381111561235b576000848401525b50505050565b6000600019821415612375576123756123a0565b5060010190565b600063ffffffff80831681811415612396576123966123a0565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b81356123d78161240d565b60ff1982541660ff8260000b16811783555050602082013560018201555050565b6001600160a01b0381168114610fd657600080fd5b8060000b8114610fd657600080fd5b63ffffffff81168114610fd657600080fd5b6001600160401b0381168114610fd657600080fdfea2646970667358221220750779d00f6c708738c13cdefc5bb60c5faa3816bf91ac4d0632697c149e83df64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80638456cb59116100f9578063a8719e0011610097578063e35d165311610071578063e35d165314610372578063f2fde38b1461037a578063f9f92be41461038d578063fa78e3bf146103a0576101c4565b8063a8719e0014610344578063c46f602f14610357578063e17ddc411461036a576101c4565b806390bc2f7f116100d357806390bc2f7f146102f857806397f735d51461030b57806399eb59b91461031e578063a40b9e7314610331576101c4565b80638456cb59146102d557806387f24b78146102dd5780638da5cb5b146102f0576101c4565b8063507b8ed2116101665780636399e834116101405780636399e8341461028d578063715018a6146102a357806379a6d51f146102ab57806382bc07e6146102cd576101c4565b8063507b8ed21461025f57806356db6fff146102725780635c975abb14610285576101c4565b80633637f6a8116101a25780633637f6a8146102115780633b1e8156146102245780633f4ba83a146102375780634d6e855e1461023f576101c4565b806304f5b841146101c957806331f25330146101de5780633403c2fc146101fc575b600080fd5b6101dc6101d73660046119d0565b6103b3565b005b6101e6610607565b6040516101f391906121f4565b60405180910390f35b61020461061a565b6040516101f39190611e63565b6101dc61021f366004611d0b565b610623565b6101dc610232366004611979565b6106b7565b6101dc6107f1565b61025261024d366004611ad3565b61083a565b6040516101f39190611e4f565b6101dc61026d366004611d0b565b61085d565b6101dc610280366004611979565b6108ee565b610204610a23565b610295610a2c565b6040516101f3929190611ebf565b6101dc610a3c565b6102be6102b9366004611d0b565b610a85565b6040516101f393929190612205565b6101e6610ab4565b6101dc610ac7565b6101dc6102eb366004611b29565b610b0e565b610252610b91565b6101dc6103063660046118db565b610ba0565b6102046103193660046118bf565b610db7565b61020461032c3660046119b8565b610dd9565b6101e661033f366004611a60565b610dee565b610204610352366004611d27565b610eef565b610204610365366004611d27565b610f0f565b6101e6610f42565b6101e6610f57565b6101dc6103883660046118bf565b610f68565b61020461039b3660046118bf565b610fd9565b6102046103ae366004611d0b565b610fee565b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040519093506103fb9250849150602001611e8c565b60408051601f1981840301815291815281516020928301206000818152609790935291205490915060ff161561044c5760405162461bcd60e51b81526004016104439061207a565b60405180910390fd5b61049286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061033f9250879150889050612324565b63ffffffff16156104b55760405162461bcd60e51b815260040161044390612161565b60006104c386880188611b40565b60e08101519091506001600160a01b031630146104f25760405162461bcd60e51b815260040161044390611f46565b609c546060820151600091820b820b910b1480156105155750609d546080820151145b6105315760405162461bcd60e51b815260040161044390611fbe565b6000806000836040015180602001905181019061054e9190611d5f565b609b54929550909350915061057190600160681b900463ffffffff166001612298565b63ffffffff168363ffffffff161461059b5760405162461bcd60e51b815260040161044390612134565b6105a6838383611013565b609b8054600160681b900463ffffffff1690600d6105c38361237c565b825463ffffffff9182166101009390930a928302919092021990911617905550505060009283525050609760205260409020805460ff191660011790555050505050565b609b54600160481b900463ffffffff1681565b609b5460ff1681565b61062b611203565b6001600160a01b031661063c610b91565b6001600160a01b0316146106625760405162461bcd60e51b8152600401610443906120ff565b609b805464ffffffff00191661010063ffffffff8416021790556040517fb80014cbadaa4692dd31be5d87278068d67ed23b027c3063f855b3f828a00ea2906106ac9083906121f4565b60405180910390a150565b6106bf611203565b6001600160a01b03166106d0610b91565b6001600160a01b0316146106f65760405162461bcd60e51b8152600401610443906120ff565b60005b818110156107ec5760016099600085858581811061072757634e487b7160e01b600052603260045260246000fd5b905060200201602081019061073c91906118bf565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905582828281811061078457634e487b7160e01b600052603260045260246000fd5b905060200201602081019061079991906118bf565b6001600160a01b03167f8e91a79c752035dd825468c2990c5d65794e64e4025fa3b1800c4eef2bdd424960016040516107d29190611e63565b60405180910390a2806107e481612361565b9150506106f9565b505050565b6107f9611203565b6001600160a01b031661080a610b91565b6001600160a01b0316146108305760405162461bcd60e51b8152600401610443906120ff565b610838611207565b565b6000610856826108508580519060200120611275565b906112a5565b9392505050565b610865611203565b6001600160a01b0316610876610b91565b6001600160a01b03161461089c5760405162461bcd60e51b8152600401610443906120ff565b609b805468ffffffff000000000019166501000000000063ffffffff8416021790556040517f33bf3241a8582c0b4d713c63761f4f809f651202e32748b335ec8bda0ac74f6c906106ac9083906121f4565b6108f6611203565b6001600160a01b0316610907610b91565b6001600160a01b03161461092d5760405162461bcd60e51b8152600401610443906120ff565b60005b818110156107ec5760006099600085858581811061095e57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061097391906118bf565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558282828181106109bb57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109d091906118bf565b6001600160a01b03167f8e91a79c752035dd825468c2990c5d65794e64e4025fa3b1800c4eef2bdd42496000604051610a099190611e63565b60405180910390a280610a1b81612361565b915050610930565b60655460ff1690565b609c54609d5460009190910b9082565b610a44611203565b6001600160a01b0316610a55610b91565b6001600160a01b031614610a7b5760405162461bcd60e51b8152600401610443906120ff565b610838600061136e565b609a6020526000908152604090205463ffffffff808216916401000000008104821691600160401b9091041683565b609b54600160681b900463ffffffff1681565b610acf611203565b6001600160a01b0316610ae0610b91565b6001600160a01b031614610b065760405162461bcd60e51b8152600401610443906120ff565b6108386113c0565b610b16611203565b6001600160a01b0316610b27610b91565b6001600160a01b031614610b4d5760405162461bcd60e51b8152600401610443906120ff565b7f0ae1c27ed06d996178e8dd8d5a4de962856a4a1896d7d93ffa83bbdb2960803d81604051610b7c91906121ce565b60405180910390a180609c6107ec82826123cc565b6033546001600160a01b031690565b600054610100900460ff1680610bb9575060005460ff16155b610bd55760405162461bcd60e51b8152600401610443906120b1565b600054610100900460ff16158015610c00576000805460ff1961ff0019909116610100171660011790555b610c0861141b565b610c1061149f565b610c1988610f68565b609b805464ffffffff00191661010063ffffffff8a8116820292909217928390556040517fb80014cbadaa4692dd31be5d87278068d67ed23b027c3063f855b3f828a00ea293610c6f93929004909116906121f4565b60405180910390a1609b805468ffffffff000000000019166501000000000063ffffffff898116820292909217928390556040517f33bf3241a8582c0b4d713c63761f4f809f651202e32748b335ec8bda0ac74f6c93610cd593929004909116906121f4565b60405180910390a1428463ffffffff161015610d035760405162461bcd60e51b815260040161044390612029565b84609b60096101000a81548163ffffffff021916908363ffffffff160217905550610d75609b60099054906101000a900463ffffffff16848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611013915050565b609b8054600160681b63ffffffff600160481b8304160263ffffffff60681b199091161790558015610dad576000805461ff00191690555b5050505050505050565b6001600160a01b03811660009081526099602052604090205460ff165b919050565b60976020526000908152604090205460ff1681565b60008083806020019051810190610e059190611c2d565b609b5461010082015191925063ffffffff600160481b909104811691161015610e32576001915050610ee9565b609b5461010082015163ffffffff600160681b909204821691161115610e5c576002915050610ee9565b6000610e6e858584610100015161150f565b61010083015163ffffffff9081166000908152609a6020526040902054919250600160401b90910481169082161015610eac57600392505050610ee9565b610eba826101000151610fee565b15610eca57600492505050610ee9565b610ed2610a23565b15610ee257600592505050610ee9565b6000925050505b92915050565b609860209081526000928352604080842090915290825290205460ff1681565b63ffffffff821660009081526098602090815260408083206001600160a01b038516845290915290205460ff1692915050565b609b5465010000000000900463ffffffff1681565b609b54610100900463ffffffff1681565b610f70611203565b6001600160a01b0316610f81610b91565b6001600160a01b031614610fa75760405162461bcd60e51b8152600401610443906120ff565b6001600160a01b038116610fcd5760405162461bcd60e51b815260040161044390611f00565b610fd68161136e565b50565b60996020526000908152604090205460ff1681565b63ffffffff9081166000908152609a6020526040902054640100000000900416421190565b60006003835160026110259190612305565b61102f91906122e5565b61103a906001612298565b905060405180606001604052808363ffffffff168152602001609b60059054906101000a900463ffffffff16846110719190612298565b63ffffffff9081168252609b54602090920191610100900481169084161061109957826110a8565b609b54610100900463ffffffff165b63ffffffff9081169091528581166000818152609a60209081526040918290208551815492870151968401518616600160401b026bffffffff0000000000000000199787166401000000000267ffffffff00000000199290971663ffffffff199094169390931716949094179490941693909317825591517f2ce61c979b72a1395bdb012126e61daf9bd4debed80bce11325d00d0faa2f41b9161114b916121a7565b60405180910390a260005b83518110156111fc57600084828151811061118157634e487b7160e01b600052603260045260246000fd5b60209081029190910181015163ffffffff881660008181526098845260408082206001600160a01b0385168084529552808220805460ff191660011790555192945090917f94819138a8ba708dfe846523a28de6ec7c2838e707270e6be73644534e5979ef9190a350806111f481612361565b915050611156565b5050505050565b3390565b61120f610a23565b61122b5760405162461bcd60e51b815260040161044390611ed2565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61125e611203565b60405161126b9190611e4f565b60405180910390a1565b6000816040516020016112889190611e1e565b604051602081830303815290604052805190602001209050919050565b60008060008084516041146112c05760009350505050610ee9565b50505060208201516040830151606084015160001a601b8110156112ec576112e9601b826122c0565b90505b8060ff16601b1415801561130457508060ff16601c14155b156113155760009350505050610ee9565b600186828585604051600081526020016040526040516113389493929190611e6e565b6020604051602081039080840390855afa15801561135a573d6000803e3d6000fd5b505050602060405103519350505050610ee9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6113c8610a23565b156113e55760405162461bcd60e51b815260040161044390611fff565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861125e611203565b600054610100900460ff1680611434575060005460ff16155b6114505760405162461bcd60e51b8152600401610443906120b1565b600054610100900460ff1615801561147b576000805460ff1961ff0019909116610100171660011790555b6114836115d3565b61148b611646565b8015610fd6576000805461ff001916905550565b600054610100900460ff16806114b8575060005460ff16155b6114d45760405162461bcd60e51b8152600401610443906120b1565b600054610100900460ff161580156114ff576000805460ff1961ff0019909116610100171660011790555b6115076115d3565b61148b6116c4565b60008080805b85518110156115c95760006115518888848151811061154457634e487b7160e01b600052603260045260246000fd5b602002602001015161083a565b9050836001600160a01b0316816001600160a01b0316116115845760405162461bcd60e51b815260040161044390611f7d565b8093506115918682610f0f565b80156115a357506115a181610db7565b155b156115b657826115b28161237c565b9350505b50806115c181612361565b915050611515565b5095945050505050565b600054610100900460ff16806115ec575060005460ff16155b6116085760405162461bcd60e51b8152600401610443906120b1565b600054610100900460ff1615801561148b576000805460ff1961ff0019909116610100171660011790558015610fd6576000805461ff001916905550565b600054610100900460ff168061165f575060005460ff16155b61167b5760405162461bcd60e51b8152600401610443906120b1565b600054610100900460ff161580156116a6576000805460ff1961ff0019909116610100171660011790555b6065805460ff191690558015610fd6576000805461ff001916905550565b600054610100900460ff16806116dd575060005460ff16155b6116f95760405162461bcd60e51b8152600401610443906120b1565b600054610100900460ff16158015611724576000805460ff1961ff0019909116610100171660011790555b61148b61172f611203565b61136e565b60006117476117428461224e565b612225565b83815290506020808201908360005b8681101561177d5761176b88833588016117e6565b84529282019290820190600101611756565b505050509392505050565b8035610dd4816123f8565b8051610dd4816123f8565b60008083601f8401126117af578182fd5b5081356001600160401b038111156117c5578182fd5b60208301915083602080830285010111156117df57600080fd5b9250929050565b600082601f8301126117f6578081fd5b813561180461174282612271565b818152846020838601011115611818578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611842578081fd5b815161185061174282612271565b818152846020838601011115611864578283fd5b611875826020830160208701612331565b949350505050565b8035610dd48161240d565b8051610dd48161240d565b8035610dd48161241c565b8051610dd48161241c565b8035610dd48161242e565b8051610dd48161242e565b6000602082840312156118d0578081fd5b8135610856816123f8565b600080600080600080600060c0888a0312156118f5578283fd5b8735611900816123f8565b965060208801356119108161241c565b955060408801356119208161241c565b945060608801356119308161241c565b935060808801356119408161241c565b925060a08801356001600160401b0381111561195a578283fd5b6119668a828b0161179e565b989b979a50959850939692959293505050565b6000806020838503121561198b578182fd5b82356001600160401b038111156119a0578283fd5b6119ac8582860161179e565b90969095509350505050565b6000602082840312156119c9578081fd5b5035919050565b600080600080604085870312156119e5578182fd5b84356001600160401b03808211156119fb578384fd5b818701915087601f830112611a0e578384fd5b813581811115611a1c578485fd5b886020828501011115611a2d578485fd5b602092830196509450908601359080821115611a47578384fd5b50611a548782880161179e565b95989497509550505050565b60008060408385031215611a72578182fd5b82356001600160401b0380821115611a88578384fd5b611a94868387016117e6565b93506020850135915080821115611aa9578283fd5b508301601f81018513611aba578182fd5b611ac985823560208401611734565b9150509250929050565b60008060408385031215611ae5578182fd5b82356001600160401b0380821115611afb578384fd5b611b07868387016117e6565b93506020850135915080821115611b1c578283fd5b50611ac9858286016117e6565b600060408284031215611b3a578081fd5b50919050565b600060208284031215611b51578081fd5b81356001600160401b0380821115611b67578283fd5b8184019150610120808387031215611b7d578384fd5b611b8681612225565b9050611b91836118a9565b8152611b9f60208401611893565b6020820152604083013582811115611bb5578485fd5b611bc1878286016117e6565b604083015250611bd36060840161187d565b606082015260808301356080820152611bee60a0840161187d565b60a082015260c083013560c0820152611c0960e08401611788565b60e08201526101009150611c1e828401611893565b91810191909152949350505050565b600060208284031215611c3e578081fd5b81516001600160401b0380821115611c54578283fd5b8184019150610120808387031215611c6a578384fd5b611c7381612225565b9050611c7e836118b4565b8152611c8c6020840161189e565b6020820152604083015182811115611ca2578485fd5b611cae87828601611832565b604083015250611cc060608401611888565b606082015260808301516080820152611cdb60a08401611888565b60a082015260c083015160c0820152611cf660e08401611793565b60e08201526101009150611c1e82840161189e565b600060208284031215611d1c578081fd5b81356108568161241c565b60008060408385031215611d39578182fd5b8235611d448161241c565b91506020830135611d54816123f8565b809150509250929050565b600080600060608486031215611d73578081fd5b8351611d7e8161241c565b809350506020808501516001600160401b03811115611d9b578283fd5b8501601f81018713611dab578283fd5b8051611db96117428261224e565b81815283810190838501858402850186018b1015611dd5578687fd5b8694505b83851015611e00578051611dec816123f8565b835260019490940193918501918501611dd9565b508096505050505050611e156040850161189e565b90509250925092565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b6000602082528251806020840152611eab816040850160208701612331565b601f01601f19169190910160400192915050565b60009290920b8252602082015260400190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526019908201527f4272696467653a2077726f6e67206576656e742070726f787900000000000000604082015260600190565b60208082526021908201527f4272696467653a207369676e6174757265732073657175656e63652077726f6e6040820152606760f81b606082015260800190565b60208082526021908201527f4272696467653a2077726f6e67206576656e7420636f6e66696775726174696f6040820152603760f91b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526031908201527f4272696467653a20696e697469616c20726f756e6420656e642073686f756c6460408201527020626520696e207468652066757475726560781b606082015260800190565b6020808252601b908201527f43616368653a207061796c6f616420616c7265616479207365656e0000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260139082015272109c9a5919d94e881ddc9bdb99c81c9bdd5b99606a1b604082015260600190565b60208082526026908201527f4272696467653a207369676e61747572657320766572696669636174696f6e2060408201526519985a5b195960d21b606082015260800190565b905463ffffffff8082168352602082811c821690840152604091821c169082015260600190565b6040810182356121dd8161240d565b8060000b8352506020830135602083015292915050565b63ffffffff91909116815260200190565b63ffffffff93841681529183166020830152909116604082015260600190565b6040518181016001600160401b0381118282101715612246576122466123b6565b604052919050565b60006001600160401b03821115612267576122676123b6565b5060209081020190565b60006001600160401b0382111561228a5761228a6123b6565b50601f01601f191660200190565b600063ffffffff8083168185168083038211156122b7576122b76123a0565b01949350505050565b600060ff821660ff84168060ff038211156122dd576122dd6123a0565b019392505050565b60008261230057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561231f5761231f6123a0565b500290565b6000610856368484611734565b60005b8381101561234c578181015183820152602001612334565b8381111561235b576000848401525b50505050565b6000600019821415612375576123756123a0565b5060010190565b600063ffffffff80831681811415612396576123966123a0565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b81356123d78161240d565b60ff1982541660ff8260000b16811783555050602082013560018201555050565b6001600160a01b0381168114610fd657600080fd5b8060000b8114610fd657600080fd5b63ffffffff81168114610fd657600080fd5b6001600160401b0381168114610fd657600080fdfea2646970667358221220750779d00f6c708738c13cdefc5bb60c5faa3816bf91ac4d0632697c149e83df64736f6c63430008000033",
  "devdoc": {
    "author": "https://github.com/broxus",
    "details": "Stores relays for each round, implements slashing, helps in validating TON-ETH events",
    "kind": "dev",
    "methods": {
      "banRelays(address[])": {
        "params": {
          "_relays": "List of relay addresses to ban"
        }
      },
      "initialize(address,uint32,uint32,uint32,uint32,uint160[])": {
        "details": "`roundRelaysConfiguration` should be specified later.",
        "params": {
          "_initialRound": "Initial round number. Useful in case new EVM network is connected to the bridge.",
          "_initialRoundEnd": "Initial round end timestamp.",
          "_minimumRequiredSignatures": "Minimum required signatures per round.",
          "_owner": "Bridge owner",
          "_relays": "Initial set of relays. Encode addresses as uint160",
          "_roundTTL": "Round TTL after round ends."
        }
      },
      "isBanned(address)": {
        "details": "Check if relay is banned. Ban is global. If the relay is banned it means it lost relay power in all rounds, past and future.",
        "params": {
          "candidate": "Address to check"
        }
      },
      "isRelay(uint32,address)": {
        "details": "Check if some address is relay at specific round",
        "params": {
          "candidate": "Address to check",
          "round": "Round id"
        }
      },
      "isRoundRotten(uint32)": {
        "details": "Check if round is rotten",
        "params": {
          "round": "Round id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "When Bridge paused, signature verification fails."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recoverSignature(bytes,bytes)": {
        "params": {
          "payload": "Payload",
          "signature": "Signature"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRoundRelays(bytes,bytes[])": {
        "details": "Grant relay permission for set of addresses at specific round",
        "params": {
          "payload": "Bytes encoded TONEvent structure",
          "signatures": "Payload signatures"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unbanRelays(address[])": {
        "params": {
          "_relays": "List of relay addresses to unban"
        }
      },
      "updateMinimumRequiredSignatures(uint32)": {
        "params": {
          "_minimumRequiredSignatures": "New value"
        }
      },
      "updateRoundRelaysConfiguration((int8,uint256))": {
        "params": {
          "_roundRelaysConfiguration": "TON address of configuration"
        }
      },
      "updateRoundTTL(uint32)": {
        "details": "This affects only future rounds. Rounds, that were already set, keep their current TTL.",
        "params": {
          "_roundTTL": "New TTL value"
        }
      },
      "verifySignedTonEvent(bytes,bytes[])": {
        "details": "Signatures should be sorted by the ascending signers. Error codes: 0. Verification passed (no error) 1. Specified round is less than `initialRound` 2. Specified round is more than `lastRound` 3. Not enough correct signatures. Possible reasons: - Some of the signers are not relays at the specified round - Some of the signers are banned 4. Round is rotten. 5. Everything is correct, but bridge is in \"paused\" state",
        "params": {
          "payload": "Bytes encoded TONEvent structure",
          "signatures": "Payload signatures"
        },
        "returns": {
          "errorCode": "Error code"
        }
      }
    },
    "title": "Ethereum Bridge contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "banRelays(address[])": {
        "notice": "Ban relays"
      },
      "initialize(address,uint32,uint32,uint32,uint32,uint160[])": {
        "notice": "Bridge initializer"
      },
      "pause()": {
        "notice": "Pause Bridge contract."
      },
      "recoverSignature(bytes,bytes)": {
        "notice": "Recover signer from the payload and signature"
      },
      "unbanRelays(address[])": {
        "notice": "Unban relays"
      },
      "unpause()": {
        "notice": "Unpause Bridge contract."
      },
      "updateMinimumRequiredSignatures(uint32)": {
        "notice": "Update minimum amount of required signatures per round"
      },
      "updateRoundRelaysConfiguration((int8,uint256))": {
        "notice": "Update address of configuration, that emits event with next round relays."
      },
      "updateRoundTTL(uint32)": {
        "notice": "Update round TTL"
      },
      "verifySignedTonEvent(bytes,bytes[])": {
        "notice": "Verify payload signatures."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 325,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 191,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 282,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1586,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "cache",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 665,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "relays",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 669,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "blacklist",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 674,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "rounds",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint32,t_struct(Round)1338_storage)"
      },
      {
        "astId": 676,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "emergencyShutdown",
        "offset": 0,
        "slot": "155",
        "type": "t_bool"
      },
      {
        "astId": 678,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "minimumRequiredSignatures",
        "offset": 1,
        "slot": "155",
        "type": "t_uint32"
      },
      {
        "astId": 680,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "roundTTL",
        "offset": 5,
        "slot": "155",
        "type": "t_uint32"
      },
      {
        "astId": 682,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "initialRound",
        "offset": 9,
        "slot": "155",
        "type": "t_uint32"
      },
      {
        "astId": 684,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "lastRound",
        "offset": 13,
        "slot": "155",
        "type": "t_uint32"
      },
      {
        "astId": 687,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "roundRelaysConfiguration",
        "offset": 0,
        "slot": "156",
        "type": "t_struct(TONAddress)1343_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint32,t_struct(Round)1338_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct IBridge.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)1338_storage"
      },
      "t_struct(Round)1338_storage": {
        "encoding": "inplace",
        "label": "struct IBridge.Round",
        "members": [
          {
            "astId": 1333,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "end",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1335,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "ttl",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1337,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "requiredSignatures",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TONAddress)1343_storage": {
        "encoding": "inplace",
        "label": "struct IBridge.TONAddress",
        "members": [
          {
            "astId": 1340,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "wid",
            "offset": 0,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 1342,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "addr",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
