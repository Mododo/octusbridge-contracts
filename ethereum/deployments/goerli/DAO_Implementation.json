{
  "address": "0x9424BdAA153CA0a8dFdaa057164ae14B2bC23b2B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "UpdateBridge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "int8",
              "name": "wid",
              "type": "int8"
            },
            {
              "internalType": "uint256",
              "name": "addr",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBridge.TONAddress",
          "name": "configuration",
          "type": "tuple"
        }
      ],
      "name": "UpdateConfiguration",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configuration",
      "outputs": [
        {
          "internalType": "int8",
          "name": "wid",
          "type": "int8"
        },
        {
          "internalType": "uint256",
          "name": "addr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "responses",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "updateBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int8",
              "name": "wid",
              "type": "int8"
            },
            {
              "internalType": "uint256",
              "name": "addr",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBridge.TONAddress",
          "name": "_configuration",
          "type": "tuple"
        }
      ],
      "name": "updateConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x898f9973d8247b7e16282981f276bea5e3339f25167480514a4c71d23c2b18ab",
  "receipt": {
    "to": null,
    "from": "0x18d0A2fd70e3A0c20DAd2C7dE40290BC8C2696F7",
    "contractAddress": "0x9424BdAA153CA0a8dFdaa057164ae14B2bC23b2B",
    "transactionIndex": 12,
    "gasUsed": "1182829",
    "logsBloom": "0x
    "blockHash": "0xd10dd02fe4f2bd50c2d507f3f4adae5728f476f9870bad8081baed39be5343cf",
    "transactionHash": "0x898f9973d8247b7e16282981f276bea5e3339f25167480514a4c71d23c2b18ab",
    "logs": [],
    "blockNumber": 5472919,
    "cumulativeGasUsed": "2142958",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f9fcb9efb6e7f633fac25888459f2944",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"UpdateBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBridge.TONAddress\",\"name\":\"configuration\",\"type\":\"tuple\"}],\"name\":\"UpdateConfiguration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configuration\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"responses\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"updateBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IBridge.TONAddress\",\"name\":\"_configuration\",\"type\":\"tuple\"}],\"name\":\"updateConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Executes proposals confirmed in TON DAO. Proposals are submitted in form of payloads and signatures\",\"kind\":\"dev\",\"methods\":{\"execute(bytes,bytes[])\":{\"details\":\"@param payload Encoded TON event with payload details\",\"params\":{\"signatures\":\"Payload signatures\"},\"returns\":{\"responses\":\"Bytes-encoded payload action responses\"}},\"initialize(address,address)\":{\"params\":{\"_bridge\":\"Bridge address\",\"_owner\":\"DAO owner. Should be used only for initial set up, than ownership should be transferred to DAO itself.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBridge(address)\":{\"details\":\"Update bridge address\",\"params\":{\"_bridge\":\"New bridge address\"}},\"updateConfiguration((int8,uint256))\":{\"params\":{\"_configuration\":\"New configuration TON address\"}}},\"title\":\"DAO contract for Broxus TON-Ethereum bridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute(bytes,bytes[])\":{\"notice\":\"Execute set of actions.\"},\"initialize(address,address)\":{\"notice\":\"Initializer\"},\"updateConfiguration((int8,uint256))\":{\"notice\":\"Update address of the TON configuration, that emits actions for this DAO\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"DAO\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IBridge.sol\\\";\\nimport \\\"./interfaces/IDAO.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./utils/Cache.sol\\\";\\nimport \\\"./utils/ChainId.sol\\\";\\n\\n\\n/// @title DAO contract for Broxus TON-Ethereum bridge\\n/// @dev Executes proposals confirmed in TON DAO.\\n/// Proposals are submitted in form of payloads and signatures\\ncontract DAO is IDAO, ReentrancyGuard, OwnableUpgradeable, Cache, ChainId {\\n    address public bridge;\\n    IBridge.TONAddress public configuration;\\n\\n    /**\\n        @notice\\n            Initializer\\n        @param _owner DAO owner. Should be used only for initial set up,\\n            than ownership should be transferred to DAO itself.\\n        @param _bridge Bridge address\\n    */\\n    function initialize(\\n        address _owner,\\n        address _bridge\\n    ) public initializer {\\n        bridge = _bridge;\\n\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n    }\\n\\n    /**\\n        @notice\\n            Update address of the TON configuration, that emits actions for this DAO\\n        @param _configuration New configuration TON address\\n    */\\n    function updateConfiguration(\\n        IBridge.TONAddress calldata _configuration\\n    ) public onlyOwner {\\n        configuration = _configuration;\\n    }\\n\\n    /// @dev Update bridge address\\n    /// @param _bridge New bridge address\\n    function updateBridge(\\n        address _bridge\\n    ) override external onlyOwner {\\n        bridge = _bridge;\\n    }\\n\\n    /**\\n        @notice\\n            Execute set of actions.\\n        @dev\\n\\n        @param payload Encoded TON event with payload details\\n        @param signatures Payload signatures\\n        @return responses Bytes-encoded payload action responses\\n    */\\n    function execute(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) override external nonReentrant notCached(payload) returns(\\n        bytes[] memory responses\\n    ) {\\n        require(\\n            IBridge(bridge).verifySignedTonEvent(\\n                payload,\\n                signatures\\n            ) == 0,\\n            \\\"DAO: signatures verification failed\\\"\\n        );\\n\\n        (IBridge.TONEvent memory tonEvent) = abi.decode(payload, (IBridge.TONEvent));\\n\\n        require(\\n            tonEvent.proxy == address(this),\\n            \\\"DAO: wrong event proxy\\\"\\n        );\\n\\n        require(\\n            tonEvent.configurationWid == configuration.wid &&\\n            tonEvent.configurationAddress == configuration.addr,\\n            \\\"DAO: wrong event configuration\\\"\\n        );\\n\\n        (int8 _wid, uint256 _addr, uint32 chainId, EthAction[] memory actions) = abi.decode(\\n            tonEvent.eventData,\\n            (int8, uint256, uint32, EthAction[])\\n        );\\n\\n        require(\\n            chainId == getChainID(),\\n            \\\"DAO: wrong chain id\\\"\\n        );\\n\\n        responses = new bytes[](actions.length);\\n\\n        for (uint i=0; i<actions.length; i++) {\\n            EthAction memory action = actions[i];\\n\\n            bytes memory callData;\\n\\n            if (bytes(action.signature).length == 0) {\\n                callData = action.data;\\n            } else {\\n                callData = abi.encodePacked(\\n                    bytes4(keccak256(bytes(action.signature))),\\n                    action.data\\n                );\\n            }\\n\\n            (bool success, bytes memory response) = address(action.target)\\n                .call{value: action.value}(callData);\\n\\n            require(success, \\\"DAO: execution fail\\\");\\n\\n            responses[i] = response;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d8ee6a0c5fa1f95bf2285c062655f9167e1d20060ea67a91bd0e59169bb7cd2\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IBridge {\\n    struct TONEvent {\\n        uint64 eventTransactionLt;\\n        uint32 eventTimestamp;\\n        bytes eventData;\\n        int8 configurationWid;\\n        uint256 configurationAddress;\\n        int8 eventContractWid;\\n        uint256 eventContractAddress;\\n        address proxy;\\n        uint32 round;\\n    }\\n\\n    struct Round {\\n        uint32 end;\\n        uint32 ttl;\\n        uint32 requiredSignatures;\\n    }\\n\\n    struct TONAddress {\\n        int8 wid;\\n        uint256 addr;\\n    }\\n\\n    function updateMinimumRequiredSignatures(uint32 _minimumRequiredSignatures) external;\\n    function updateRoundRelaysConfiguration(TONAddress calldata _roundRelaysConfiguration) external;\\n    function updateRoundTTL(uint32 _roundTTL) external;\\n\\n    function isRelay(\\n        uint32 round,\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isBanned(\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isRoundRotten(\\n        uint32 round\\n    ) external view returns(bool);\\n\\n    function verifySignedTonEvent(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external view returns(uint32);\\n\\n    function setRoundRelays(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) external;\\n\\n    function banRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function unbanRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function pause() external;\\n    function unpause() external;\\n\\n    event EmergencyShutdown(bool active);\\n\\n    event UpdateMinimumRequiredSignatures(uint32 value);\\n    event UpdateRoundTTL(uint32 value);\\n    event UpdateRoundRelaysConfiguration(TONAddress configuration);\\n\\n    event NewRound(uint32 indexed round, Round meta);\\n    event RoundRelay(uint32 indexed round, address indexed relay);\\n    event BanRelay(address indexed relay, bool status);\\n}\\n\",\"keccak256\":\"0xbf338191557358051b0be1dcfd83963749e5380df42eae720cf08d7aa400e602\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n\\nimport \\\"./IBridge.sol\\\";\\n\\n\\ninterface IDAO {\\n    struct EthAction {\\n        uint value;\\n        uint160 target;\\n        string signature;\\n        bytes data;\\n    }\\n\\n    function updateBridge(\\n        address _bridge\\n    ) external;\\n\\n    function execute(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external returns(bytes[] memory responses);\\n\\n    event UpdateBridge(address indexed bridge);\\n    event UpdateConfiguration(IBridge.TONAddress configuration);\\n}\\n\",\"keccak256\":\"0xf756e60b633f4ed6fe4a47cfe0b85fadcf4f9d35abde287e20cca2f1523d561e\",\"license\":\"Apache-2.0\"},\"contracts/utils/Cache.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ncontract Cache {\\n    mapping (bytes32 => bool) public cache;\\n\\n    modifier notCached(bytes memory payload) {\\n        bytes32 hash_ = keccak256(abi.encode(payload));\\n\\n        require(cache[hash_] == false, \\\"Cache: payload already seen\\\");\\n\\n        _;\\n\\n        cache[hash_] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x892ab15314f50ccc98be6da2bd21b0195e01a4d6fa8f01a5539dd42a8d17e753\",\"license\":\"Apache-2.0\"},\"contracts/utils/ChainId.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n\\ncontract ChainId {\\n    function getChainID() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\",\"keccak256\":\"0x734835d87f3f990e85b363c40721d8d3fc98a688b0e48b51cfceaec4fe010a53\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Executes proposals confirmed in TON DAO. Proposals are submitted in form of payloads and signatures",
    "kind": "dev",
    "methods": {
      "execute(bytes,bytes[])": {
        "details": "@param payload Encoded TON event with payload details",
        "params": {
          "signatures": "Payload signatures"
        },
        "returns": {
          "responses": "Bytes-encoded payload action responses"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_bridge": "Bridge address",
          "_owner": "DAO owner. Should be used only for initial set up, than ownership should be transferred to DAO itself."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBridge(address)": {
        "details": "Update bridge address",
        "params": {
          "_bridge": "New bridge address"
        }
      },
      "updateConfiguration((int8,uint256))": {
        "params": {
          "_configuration": "New configuration TON address"
        }
      }
    },
    "title": "DAO contract for Broxus TON-Ethereum bridge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "execute(bytes,bytes[])": {
        "notice": "Execute set of actions."
      },
      "initialize(address,address)": {
        "notice": "Initializer"
      },
      "updateConfiguration((int8,uint256))": {
        "notice": "Update address of the TON configuration, that emits actions for this DAO"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 337,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 130,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 325,
        "contract": "contracts/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_owner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1586,
        "contract": "contracts/DAO.sol:DAO",
        "label": "cache",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 388,
        "contract": "contracts/DAO.sol:DAO",
        "label": "bridge",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 391,
        "contract": "contracts/DAO.sol:DAO",
        "label": "configuration",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(TONAddress)1343_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(TONAddress)1343_storage": {
        "encoding": "inplace",
        "label": "struct IBridge.TONAddress",
        "members": [
          {
            "astId": 1340,
            "contract": "contracts/DAO.sol:DAO",
            "label": "wid",
            "offset": 0,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 1342,
            "contract": "contracts/DAO.sol:DAO",
            "label": "addr",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
