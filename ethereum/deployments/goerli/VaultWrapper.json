{
  "address": "0xC4F15ff7e02A3DEDfBE6F3e469B47F02cD15F69F",
  "abi": [
    {
      "inputs": [],
      "name": "getChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        }
      ],
      "name": "saveWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f4fd82278263401a453c3ac205bd31ad3c938c6863bc3d1430747d2fd10f5d4",
  "receipt": {
    "to": null,
    "from": "0x18d0A2fd70e3A0c20DAd2C7dE40290BC8C2696F7",
    "contractAddress": "0xC4F15ff7e02A3DEDfBE6F3e469B47F02cD15F69F",
    "transactionIndex": 10,
    "gasUsed": "689861",
    "logsBloom": "0x
    "blockHash": "0x8beaa3f4297803543650fce7ba24a1a443e6baae3275f36717ef7a5cd006c895",
    "transactionHash": "0x9f4fd82278263401a453c3ac205bd31ad3c938c6863bc3d1430747d2fd10f5d4",
    "logs": [],
    "blockNumber": 5472922,
    "cumulativeGasUsed": "1641056",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f9fcb9efb6e7f633fac25888459f2944",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"saveWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/VaultWrapper.sol\":\"VaultWrapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IBridge {\\n    struct TONEvent {\\n        uint64 eventTransactionLt;\\n        uint32 eventTimestamp;\\n        bytes eventData;\\n        int8 configurationWid;\\n        uint256 configurationAddress;\\n        int8 eventContractWid;\\n        uint256 eventContractAddress;\\n        address proxy;\\n        uint32 round;\\n    }\\n\\n    struct Round {\\n        uint32 end;\\n        uint32 ttl;\\n        uint32 requiredSignatures;\\n    }\\n\\n    struct TONAddress {\\n        int8 wid;\\n        uint256 addr;\\n    }\\n\\n    function updateMinimumRequiredSignatures(uint32 _minimumRequiredSignatures) external;\\n    function updateRoundRelaysConfiguration(TONAddress calldata _roundRelaysConfiguration) external;\\n    function updateRoundTTL(uint32 _roundTTL) external;\\n\\n    function isRelay(\\n        uint32 round,\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isBanned(\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isRoundRotten(\\n        uint32 round\\n    ) external view returns(bool);\\n\\n    function verifySignedTonEvent(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external view returns(uint32);\\n\\n    function setRoundRelays(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) external;\\n\\n    function banRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function unbanRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function pause() external;\\n    function unpause() external;\\n\\n    event EmergencyShutdown(bool active);\\n\\n    event UpdateMinimumRequiredSignatures(uint32 value);\\n    event UpdateRoundTTL(uint32 value);\\n    event UpdateRoundRelaysConfiguration(TONAddress configuration);\\n\\n    event NewRound(uint32 indexed round, Round meta);\\n    event RoundRelay(uint32 indexed round, address indexed relay);\\n    event BanRelay(address indexed relay, bool status);\\n}\\n\",\"keccak256\":\"0xbf338191557358051b0be1dcfd83963749e5380df42eae720cf08d7aa400e602\",\"license\":\"Apache-2.0\"},\"contracts/utils/ChainId.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n\\ncontract ChainId {\\n    function getChainID() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\",\"keccak256\":\"0x734835d87f3f990e85b363c40721d8d3fc98a688b0e48b51cfceaec4fe010a53\",\"license\":\"Apache-2.0\"},\"contracts/vault/VaultWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./../interfaces/IBridge.sol\\\";\\nimport \\\"../utils/ChainId.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n\\ninterface IVault {\\n    struct TONAddress {\\n        int128 wid;\\n        uint256 addr;\\n    }\\n\\n    function saveWithdraw(\\n        bytes32 id,\\n        address recipient,\\n        uint256 amount,\\n        uint256 bounty\\n    ) external;\\n\\n    function configuration() external view returns(TONAddress memory _configuration);\\n    function bridge() external view returns(address);\\n}\\n\\ncontract VaultWrapper is ChainId, Initializable {\\n    address public vault;\\n\\n    function initialize(\\n        address _vault\\n    ) initializer external {\\n        vault = _vault;\\n    }\\n\\n    function saveWithdraw(\\n        bytes calldata payload,\\n        bytes[] calldata signatures,\\n        uint256 bounty\\n    ) external {\\n        address bridge = IVault(vault).bridge();\\n\\n        // Check signatures correct\\n        require(\\n            IBridge(bridge).verifySignedTonEvent(\\n                payload,\\n                signatures\\n            ) == 0,\\n            \\\"Vault wrapper: signatures verification failed\\\"\\n        );\\n\\n        // Decode TON event\\n        (IBridge.TONEvent memory tonEvent) = abi.decode(payload, (IBridge.TONEvent));\\n\\n        // Check event proxy is correct\\n        require(\\n            tonEvent.proxy == vault,\\n            \\\"Vault wrapper: wrong event proxy\\\"\\n        );\\n\\n        // dev: fix stack too deep\\n        {\\n            // Check event configuration matches Vault's configuration\\n            IVault.TONAddress memory configuration = IVault(vault).configuration();\\n\\n            require(\\n                tonEvent.configurationWid == configuration.wid &&\\n                tonEvent.configurationAddress == configuration.addr,\\n                \\\"Vault wrapper: wrong event configuration\\\"\\n            );\\n        }\\n\\n        // Decode event data\\n        (\\n            int8 sender_wid,\\n            uint256 sender_addr,\\n            uint128 amount,\\n            uint160 _recipient,\\n            uint32 chainId\\n        ) = abi.decode(\\n            tonEvent.eventData,\\n            (int8, uint256, uint128, uint160, uint32)\\n        );\\n\\n        // Check chain id\\n        require(chainId == getChainID(), \\\"Vault wrapper: wrong chain id\\\");\\n\\n        address recipient = address(_recipient);\\n\\n        IVault(vault).saveWithdraw(\\n            keccak256(payload),\\n            recipient,\\n            amount,\\n            recipient == msg.sender ? bounty : 0\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe15bbc9e9de6a4d442a893a57d125d1e62ee3bfab81985ffeb3463ed1d626535\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b85806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632a2f435f14610051578063564b81ef14610066578063c4d66de814610084578063fbfa77cf14610097575b600080fd5b61006461005f3660046105b3565b6100ac565b005b61006e61041a565b60405161007b9190610acd565b60405180910390f35b610064610092366004610574565b61041e565b61009f6104b6565b60405161007b9190610891565b60008060029054906101000a90046001600160a01b03166001600160a01b031663e78cea926040518163ffffffff1660e01b815260040160206040518083038186803b1580156100fb57600080fd5b505afa15801561010f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101339190610597565b60405163a40b9e7360e01b81529091506001600160a01b0382169063a40b9e73906101689089908990899089906004016108d2565b60206040518083038186803b15801561018057600080fd5b505afa158015610194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b8919061083b565b63ffffffff16156101e45760405162461bcd60e51b81526004016101db90610a80565b60405180910390fd5b60006101f28688018861074d565b9050600060029054906101000a90046001600160a01b03166001600160a01b03168160e001516001600160a01b03161461023e5760405162461bcd60e51b81526004016101db906109c6565b60008060029054906101000a90046001600160a01b03166001600160a01b0316636c70bee96040518163ffffffff1660e01b8152600401604080518083038186803b15801561028c57600080fd5b505afa1580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c491906106f0565b90508060000151600f0b826060015160000b1480156102ea575080602001518260800151145b6103065760405162461bcd60e51b81526004016101db9061097e565b5060008060008060008560400151806020019051810190610327919061067b565b9450945094509450945061033961041a565b8163ffffffff161461035d5760405162461bcd60e51b81526004016101db90610a49565b6000829050600060029054906101000a90046001600160a01b03166001600160a01b031663f297dbac8e8e604051610396929190610881565b60405190819003902083876001600160a01b03821633146103b85760006103ba565b8d5b6040518563ffffffff1660e01b81526004016103d994939291906108a5565b600060405180830381600087803b1580156103f357600080fd5b505af1158015610407573d6000803e3d6000fd5b5050505050505050505050505050505050565b4690565b600054610100900460ff1680610437575060005460ff16155b6104535760405162461bcd60e51b81526004016101db906109fb565b600054610100900460ff1615801561047e576000805460ff1961ff0019909116610100171660011790555b6000805462010000600160b01b031916620100006001600160a01b0385160217905580156104b2576000805461ff00191690555b5050565b6000546201000090046001600160a01b031681565b80356104d681610b16565b919050565b600082601f8301126104eb578081fd5b813567ffffffffffffffff81111561050557610505610b00565b610518601f8201601f1916602001610ad6565b81815284602083860101111561052c578283fd5b816020850160208301379081016020019190915292915050565b80356104d681610b2e565b80356104d681610b3d565b803567ffffffffffffffff811681146104d657600080fd5b600060208284031215610585578081fd5b813561059081610b16565b9392505050565b6000602082840312156105a8578081fd5b815161059081610b16565b6000806000806000606086880312156105ca578081fd5b853567ffffffffffffffff808211156105e1578283fd5b818801915088601f8301126105f4578283fd5b813581811115610602578384fd5b60208a81838601011115610614578485fd5b8084019850819750808a013593508284111561062e578485fd5b838a0193508a601f850112610641578485fd5b8335915082821115610651578485fd5b8a818284028601011115610663578485fd5b979a9699509190960196909550604001359392505050565b600080600080600060a08688031215610692578081fd5b855161069d81610b2e565b6020870151604088015191965094506001600160801b03811681146106c0578182fd5b60608701519093506106d181610b16565b60808701519092506106e281610b3d565b809150509295509295909350565b600060408284031215610701578081fd5b6040516040810181811067ffffffffffffffff8211171561072457610724610b00565b6040528251600f81900b8114610738578283fd5b81526020928301519281019290925250919050565b60006020828403121561075e578081fd5b813567ffffffffffffffff80821115610775578283fd5b818401915061012080838703121561078b578384fd5b61079481610ad6565b905061079f8361055c565b81526107ad60208401610551565b60208201526040830135828111156107c3578485fd5b6107cf878286016104db565b6040830152506107e160608401610546565b6060820152608083013560808201526107fc60a08401610546565b60a082015260c083013560c082015261081760e084016104cb565b60e0820152610100915061082c828401610551565b91810191909152949350505050565b60006020828403121561084c578081fd5b815161059081610b3d565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b9384526001600160a01b039290921660208401526001600160801b03166040830152606082015260800190565b6000604082526108e6604083018688610857565b6020838203818501528185835281830190508182870284010187855b8881101561096e57858303601f190184528135368b9003601e19018112610927578788fd5b8a01803567ffffffffffffffff81111561093f578889fd5b8036038c131561094d578889fd5b61095a8582898501610857565b958701959450505090840190600101610902565b50909a9950505050505050505050565b60208082526028908201527f5661756c7420777261707065723a2077726f6e67206576656e7420636f6e666960408201526733bab930ba34b7b760c11b606082015260800190565b6020808252818101527f5661756c7420777261707065723a2077726f6e67206576656e742070726f7879604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601d908201527f5661756c7420777261707065723a2077726f6e6720636861696e206964000000604082015260600190565b6020808252602d908201527f5661756c7420777261707065723a207369676e6174757265732076657269666960408201526c18d85d1a5bdb8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715610af857610af8610b00565b604052919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b2b57600080fd5b50565b8060000b8114610b2b57600080fd5b63ffffffff81168114610b2b57600080fdfea2646970667358221220ccf8a3468ab6431a7164cdef4b4723c8e09822e4418c6817618e3bf49d8542c064736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632a2f435f14610051578063564b81ef14610066578063c4d66de814610084578063fbfa77cf14610097575b600080fd5b61006461005f3660046105b3565b6100ac565b005b61006e61041a565b60405161007b9190610acd565b60405180910390f35b610064610092366004610574565b61041e565b61009f6104b6565b60405161007b9190610891565b60008060029054906101000a90046001600160a01b03166001600160a01b031663e78cea926040518163ffffffff1660e01b815260040160206040518083038186803b1580156100fb57600080fd5b505afa15801561010f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101339190610597565b60405163a40b9e7360e01b81529091506001600160a01b0382169063a40b9e73906101689089908990899089906004016108d2565b60206040518083038186803b15801561018057600080fd5b505afa158015610194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b8919061083b565b63ffffffff16156101e45760405162461bcd60e51b81526004016101db90610a80565b60405180910390fd5b60006101f28688018861074d565b9050600060029054906101000a90046001600160a01b03166001600160a01b03168160e001516001600160a01b03161461023e5760405162461bcd60e51b81526004016101db906109c6565b60008060029054906101000a90046001600160a01b03166001600160a01b0316636c70bee96040518163ffffffff1660e01b8152600401604080518083038186803b15801561028c57600080fd5b505afa1580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c491906106f0565b90508060000151600f0b826060015160000b1480156102ea575080602001518260800151145b6103065760405162461bcd60e51b81526004016101db9061097e565b5060008060008060008560400151806020019051810190610327919061067b565b9450945094509450945061033961041a565b8163ffffffff161461035d5760405162461bcd60e51b81526004016101db90610a49565b6000829050600060029054906101000a90046001600160a01b03166001600160a01b031663f297dbac8e8e604051610396929190610881565b60405190819003902083876001600160a01b03821633146103b85760006103ba565b8d5b6040518563ffffffff1660e01b81526004016103d994939291906108a5565b600060405180830381600087803b1580156103f357600080fd5b505af1158015610407573d6000803e3d6000fd5b5050505050505050505050505050505050565b4690565b600054610100900460ff1680610437575060005460ff16155b6104535760405162461bcd60e51b81526004016101db906109fb565b600054610100900460ff1615801561047e576000805460ff1961ff0019909116610100171660011790555b6000805462010000600160b01b031916620100006001600160a01b0385160217905580156104b2576000805461ff00191690555b5050565b6000546201000090046001600160a01b031681565b80356104d681610b16565b919050565b600082601f8301126104eb578081fd5b813567ffffffffffffffff81111561050557610505610b00565b610518601f8201601f1916602001610ad6565b81815284602083860101111561052c578283fd5b816020850160208301379081016020019190915292915050565b80356104d681610b2e565b80356104d681610b3d565b803567ffffffffffffffff811681146104d657600080fd5b600060208284031215610585578081fd5b813561059081610b16565b9392505050565b6000602082840312156105a8578081fd5b815161059081610b16565b6000806000806000606086880312156105ca578081fd5b853567ffffffffffffffff808211156105e1578283fd5b818801915088601f8301126105f4578283fd5b813581811115610602578384fd5b60208a81838601011115610614578485fd5b8084019850819750808a013593508284111561062e578485fd5b838a0193508a601f850112610641578485fd5b8335915082821115610651578485fd5b8a818284028601011115610663578485fd5b979a9699509190960196909550604001359392505050565b600080600080600060a08688031215610692578081fd5b855161069d81610b2e565b6020870151604088015191965094506001600160801b03811681146106c0578182fd5b60608701519093506106d181610b16565b60808701519092506106e281610b3d565b809150509295509295909350565b600060408284031215610701578081fd5b6040516040810181811067ffffffffffffffff8211171561072457610724610b00565b6040528251600f81900b8114610738578283fd5b81526020928301519281019290925250919050565b60006020828403121561075e578081fd5b813567ffffffffffffffff80821115610775578283fd5b818401915061012080838703121561078b578384fd5b61079481610ad6565b905061079f8361055c565b81526107ad60208401610551565b60208201526040830135828111156107c3578485fd5b6107cf878286016104db565b6040830152506107e160608401610546565b6060820152608083013560808201526107fc60a08401610546565b60a082015260c083013560c082015261081760e084016104cb565b60e0820152610100915061082c828401610551565b91810191909152949350505050565b60006020828403121561084c578081fd5b815161059081610b3d565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b9384526001600160a01b039290921660208401526001600160801b03166040830152606082015260800190565b6000604082526108e6604083018688610857565b6020838203818501528185835281830190508182870284010187855b8881101561096e57858303601f190184528135368b9003601e19018112610927578788fd5b8a01803567ffffffffffffffff81111561093f578889fd5b8036038c131561094d578889fd5b61095a8582898501610857565b958701959450505090840190600101610902565b50909a9950505050505050505050565b60208082526028908201527f5661756c7420777261707065723a2077726f6e67206576656e7420636f6e666960408201526733bab930ba34b7b760c11b606082015260800190565b6020808252818101527f5661756c7420777261707065723a2077726f6e67206576656e742070726f7879604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601d908201527f5661756c7420777261707065723a2077726f6e6720636861696e206964000000604082015260600190565b6020808252602d908201527f5661756c7420777261707065723a207369676e6174757265732076657269666960408201526c18d85d1a5bdb8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715610af857610af8610b00565b604052919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b2b57600080fd5b50565b8060000b8114610b2b57600080fd5b63ffffffff81168114610b2b57600080fdfea2646970667358221220ccf8a3468ab6431a7164cdef4b4723c8e09822e4418c6817618e3bf49d8542c064736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/vault/VaultWrapper.sol:VaultWrapper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/vault/VaultWrapper.sol:VaultWrapper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1671,
        "contract": "contracts/vault/VaultWrapper.sol:VaultWrapper",
        "label": "vault",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}
