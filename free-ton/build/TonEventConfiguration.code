.globl	constructor
.public	constructor
.type	constructor, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7_with_init_storage$
}
IF
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; constructor TonEventConfiguration
ACCEPT
; end constructor TonEventConfiguration
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	confirmEvent
.public	confirmEvent
.type	confirmEvent, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode eventTransaction
LDU 256
; Decode eventIndex
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode eventData
;; decode TvmCell
DUP
SREFS
EQINT 1
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDREF
; Decode eventBlockNumber
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode eventBlock
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode eventDataSignature
LDREF
; Decode relayKey
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: eventTransaction
;; param: eventIndex
;; param: eventData
;; param: eventBlockNumber
;; param: eventBlock
;; param: eventDataSignature
;; param: relayKey
; modifier onlyBridge
;; push identifier MSG_SENDER_NOT_BRIDGE
GETGLOB 18
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; get member sender
GETGLOB 9
;; push identifier bridgeAddress
GETGLOB 16
SDEQ
THROWANYIFNOT
; modifier transferAfter
;; push identifier bridgeAddress
GETGLOB 16
;; get member value
CALL $message_balance_macro$
; function confirmEvent
NEWDICT
GETGLOB 2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventTransaction
PUSH S9
NEWC
STU 256
PUSHINT 1
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventIndex
PUSH S8
NEWC
STU 256
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventData
PUSH S7
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
;; push identifier eventBlockNumber
PUSH S6
NEWC
STU 256
PUSHINT 4
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventBlock
PUSH S5
NEWC
STU 256
PUSHINT 5
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 6
ROT
PUSHINT 64
DICTUSET
;; push identifier eventRequiredConfirmations
GETGLOB 12
NEWC
STU 256
PUSHINT 7
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventRequiredConfirmations
GETGLOB 12
NEWC
STU 256
PUSHINT 8
ROT
PUSHINT 64
DICTUSETB
NEWC
STDICT
ENDC
;; push identifier eventCode
GETGLOB 17
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
;; push identifier eventInitialBalance
GETGLOB 14
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x1a711165
;; relayKey
;; push identifier relayKey
PUSH S5
STUR 256
;; eventDataSignature
;; push identifier eventDataSignature
PUSH S6
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: tonEventAddress
;; Remote call TonEvent.confirm
;; push identifier tonEventAddress
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca00000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x586a42e6
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
;; eventDataSignature
;; push identifier eventDataSignature
PUSH S5
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; emit EventConfirmation
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x0c075cbc
;; addr
;; push identifier tonEventAddress
PUSH S1
STSLICER
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function confirmEvent
;; transfer()
;; push identifier value
DUP
;; push identifier receiver
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end modifier transferAfter
BLKDROP 7
; end modifier onlyBridge
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	confirmEvent_internal
.type	confirmEvent_internal, @function
;; param: eventTransaction
;; param: eventIndex
;; param: eventData
;; param: eventBlockNumber
;; param: eventBlock
;; param: eventDataSignature
;; param: relayKey
; modifier onlyBridge
;; push identifier MSG_SENDER_NOT_BRIDGE
GETGLOB 18
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; get member sender
GETGLOB 9
;; push identifier bridgeAddress
GETGLOB 16
SDEQ
THROWANYIFNOT
; modifier transferAfter
;; push identifier bridgeAddress
GETGLOB 16
;; get member value
CALL $message_balance_macro$
; function confirmEvent
NEWDICT
GETGLOB 2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventTransaction
PUSH S9
NEWC
STU 256
PUSHINT 1
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventIndex
PUSH S8
NEWC
STU 256
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventData
PUSH S7
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
;; push identifier eventBlockNumber
PUSH S6
NEWC
STU 256
PUSHINT 4
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventBlock
PUSH S5
NEWC
STU 256
PUSHINT 5
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 6
ROT
PUSHINT 64
DICTUSET
;; push identifier eventRequiredConfirmations
GETGLOB 12
NEWC
STU 256
PUSHINT 7
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventRequiredConfirmations
GETGLOB 12
NEWC
STU 256
PUSHINT 8
ROT
PUSHINT 64
DICTUSETB
NEWC
STDICT
ENDC
;; push identifier eventCode
GETGLOB 17
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
;; push identifier eventInitialBalance
GETGLOB 14
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x1a711165
;; relayKey
;; push identifier relayKey
PUSH S5
STUR 256
;; eventDataSignature
;; push identifier eventDataSignature
PUSH S6
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: tonEventAddress
;; Remote call TonEvent.confirm
;; push identifier tonEventAddress
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca00000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x586a42e6
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
;; eventDataSignature
;; push identifier eventDataSignature
PUSH S5
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; emit EventConfirmation
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x0c075cbc
;; addr
;; push identifier tonEventAddress
PUSH S1
STSLICER
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function confirmEvent
;; transfer()
;; push identifier value
DUP
;; push identifier receiver
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end modifier transferAfter
BLKDROP 7
; end modifier onlyBridge

.globl	rejectEvent
.public	rejectEvent
.type	rejectEvent, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode eventTransaction
LDU 256
; Decode eventIndex
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode eventData
;; decode TvmCell
DUP
SBITREFS
EQINT 1
SWAP
EQINT 0
AND
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDREF
; Decode eventBlockNumber
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode eventBlock
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode relayKey
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: eventTransaction
;; param: eventIndex
;; param: eventData
;; param: eventBlockNumber
;; param: eventBlock
;; param: relayKey
; modifier onlyBridge
;; push identifier MSG_SENDER_NOT_BRIDGE
GETGLOB 18
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; get member sender
GETGLOB 9
;; push identifier bridgeAddress
GETGLOB 16
SDEQ
THROWANYIFNOT
; modifier transferAfter
;; push identifier bridgeAddress
GETGLOB 16
;; get member value
CALL $message_balance_macro$
; function rejectEvent
NEWDICT
GETGLOB 2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventTransaction
PUSH S8
NEWC
STU 256
PUSHINT 1
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventIndex
PUSH S7
NEWC
STU 256
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventData
PUSH S6
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
;; push identifier eventBlockNumber
PUSH S5
NEWC
STU 256
PUSHINT 4
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventBlock
PUSH S4
NEWC
STU 256
PUSHINT 5
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 6
ROT
PUSHINT 64
DICTUSET
;; push identifier eventRequiredConfirmations
GETGLOB 12
NEWC
STU 256
PUSHINT 7
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventRequiredConfirmations
GETGLOB 12
NEWC
STU 256
PUSHINT 8
ROT
PUSHINT 64
DICTUSETB
NEWC
STDICT
ENDC
;; push identifier eventCode
GETGLOB 17
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
PUSHINT 0
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x1a711165
;; relayKey
;; push identifier relayKey
PUSH S5
STUR 256
;; eventDataSignature
NEWC
ENDC
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: tonEventAddress
;; Remote call TonEvent.reject
;; push identifier tonEventAddress
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca00000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x70151477
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
;; emit EventReject
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x06cb52f7
;; addr
;; push identifier tonEventAddress
PUSH S1
STSLICER
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function rejectEvent
;; transfer()
;; push identifier value
DUP
;; push identifier receiver
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end modifier transferAfter
BLKDROP 6
; end modifier onlyBridge
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	rejectEvent_internal
.type	rejectEvent_internal, @function
;; param: eventTransaction
;; param: eventIndex
;; param: eventData
;; param: eventBlockNumber
;; param: eventBlock
;; param: relayKey
; modifier onlyBridge
;; push identifier MSG_SENDER_NOT_BRIDGE
GETGLOB 18
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; get member sender
GETGLOB 9
;; push identifier bridgeAddress
GETGLOB 16
SDEQ
THROWANYIFNOT
; modifier transferAfter
;; push identifier bridgeAddress
GETGLOB 16
;; get member value
CALL $message_balance_macro$
; function rejectEvent
NEWDICT
GETGLOB 2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventTransaction
PUSH S8
NEWC
STU 256
PUSHINT 1
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventIndex
PUSH S7
NEWC
STU 256
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventData
PUSH S6
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
;; push identifier eventBlockNumber
PUSH S5
NEWC
STU 256
PUSHINT 4
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventBlock
PUSH S4
NEWC
STU 256
PUSHINT 5
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 6
ROT
PUSHINT 64
DICTUSET
;; push identifier eventRequiredConfirmations
GETGLOB 12
NEWC
STU 256
PUSHINT 7
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventRequiredConfirmations
GETGLOB 12
NEWC
STU 256
PUSHINT 8
ROT
PUSHINT 64
DICTUSETB
NEWC
STDICT
ENDC
;; push identifier eventCode
GETGLOB 17
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
PUSHINT 0
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x1a711165
;; relayKey
;; push identifier relayKey
PUSH S5
STUR 256
;; eventDataSignature
NEWC
ENDC
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: tonEventAddress
;; Remote call TonEvent.reject
;; push identifier tonEventAddress
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca00000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x70151477
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
;; emit EventReject
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x06cb52f7
;; addr
;; push identifier tonEventAddress
PUSH S1
STSLICER
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function rejectEvent
;; transfer()
;; push identifier value
DUP
;; push identifier receiver
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end modifier transferAfter
BLKDROP 6
; end modifier onlyBridge

.globl	getDetails
.public	getDetails
.type	getDetails, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
ENDS
; function getDetails
;; ret param: _eventABI
NEWC
ENDC
;; ret param: _eventAddress
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: _eventRequiredConfirmations
PUSHINT 0
;; ret param: _eventRequiredRejects
PUSHINT 0
;; ret param: _eventInitialBalance
PUSHINT 0
;; ret param: _proxyAddress
PUSHINT 0
;; ret param: _bridgeAddress
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: _eventCode
NEWC
ENDC
;; return
;; push identifier eventABI
GETGLOB 10
;; push identifier eventAddress
GETGLOB 11
;; push identifier eventRequiredConfirmations
GETGLOB 12
;; push identifier eventRequiredRejects
GETGLOB 13
;; push identifier eventInitialBalance
GETGLOB 14
;; push identifier proxyAddress
GETGLOB 15
;; push identifier bridgeAddress
GETGLOB 16
;; push identifier eventCode
GETGLOB 17
BLKDROP2 8, 8
;; emitting 8 value(s)
PUSH S8
EQINT -1
PUSHCONT {
	PUSH S10
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST x86e05b2b
	PUSH S9
	STREFR
	PUSH S8
	STSLICER
	PUSH S7
	STUR 256
	PUSH S6
	STUR 256
	PUSH S5
	STUR 128
	NEWC
	PUSH S5
	STUR 160
	PUSH S4
	STSLICER
	PUSH S3
	STREFR
	STBREFR
	STBREFR
	ENDC
	PUSHINT 1
	SENDRAWMSG
}
IF
BLKDROP 8
; end function getDetails
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	getDetails_internal
.type	getDetails_internal, @function
; function getDetails
;; ret param: _eventABI
NEWC
ENDC
;; ret param: _eventAddress
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: _eventRequiredConfirmations
PUSHINT 0
;; ret param: _eventRequiredRejects
PUSHINT 0
;; ret param: _eventInitialBalance
PUSHINT 0
;; ret param: _proxyAddress
PUSHINT 0
;; ret param: _bridgeAddress
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: _eventCode
NEWC
ENDC
;; return
;; push identifier eventABI
GETGLOB 10
;; push identifier eventAddress
GETGLOB 11
;; push identifier eventRequiredConfirmations
GETGLOB 12
;; push identifier eventRequiredRejects
GETGLOB 13
;; push identifier eventInitialBalance
GETGLOB 14
;; push identifier proxyAddress
GETGLOB 15
;; push identifier bridgeAddress
GETGLOB 16
;; push identifier eventCode
GETGLOB 17
BLKDROP2 8, 8
; end function getDetails

.globl	c7_to_c4
.type	c7_to_c4, @function
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 13
GETGLOB 15
GETGLOB 16
GETGLOB 18
REVERSE 5, 0
STU 256
STU 160
STSLICE
STU 256
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 14
GETGLOB 17
REVERSE 7, 0
STBREF
STREF
STSLICE
STU 256
STU 128
STREF
ENDC
POP C4

.globl	c4_to_c7
.type	c4_to_c7, @function
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDU 256
LDU 160
LDMSGADDR
PLDU 256
SETGLOB 18
SETGLOB 16
SETGLOB 15
SETGLOB 13
LDREF
LDMSGADDR
LDU 256
LDU 128
PLDREF
SETGLOB 17
SETGLOB 14
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDU 256
	LDU 160
	LDMSGADDR
	PLDU 256
	SETGLOB 18
	SETGLOB 16
	SETGLOB 15
	SETGLOB 13
	LDREF
	LDMSGADDR
	LDU 256
	LDU 128
	PLDREF
	SETGLOB 17
	SETGLOB 14
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init eventABI
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGETREF
	PUSHCONT {
		NEWC
		ENDC
	}
	IFNOT
	SETGLOB 10
	; init eventAddress
	PUSHINT 2
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 11
	; init eventRequiredConfirmations
	PUSHINT 3
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 256
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 12
	; init eventRequiredRejects
	PUSHINT 4
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 256
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 13
	; init eventInitialBalance
	PUSHINT 5
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 128
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 14
	; init proxyAddress
	PUSHINT 6
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 160
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 15
	; init bridgeAddress
	PUSHINT 7
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 16
	; init eventCode
	PUSHINT 8
	PUSH S1
	PUSHINT 64
	DICTUGETREF
	PUSHCONT {
		NEWC
		ENDC
	}
	IFNOT
	SETGLOB 17
	; init MSG_SENDER_NOT_BRIDGE
	PUSHINT 0
	SETGLOB 18
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
	;; init state var: MSG_SENDER_NOT_BRIDGE
	PUSHINT 202
	SETGLOB 18
}
IFELSE

.internal-alias :main_internal,        0
.internal	:main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
PUSH S1 ; funcId body' funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	THROW 60
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	THROW 60
}
IF

.internal-alias :main_external,        -1
.internal	:main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALL $c4_to_c7_with_init_storage$
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
PUSH S1 ; funcId body funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	THROW 60
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	THROW 60
}
IF

