.globl	constructor
.public	constructor
.type	constructor, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7_with_init_storage$
}
IF
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; constructor TonEventConfiguration
ACCEPT
; end constructor TonEventConfiguration
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	confirmEvent
.public	confirmEvent
.type	confirmEvent, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode eventInitData
;; decode struct TonEventInitData eventInitData
;; decode TonEventInitData.eventTransaction
LDU 256
;; decode TonEventInitData.eventIndex
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; decode TonEventInitData.eventData
;; decode TvmCell
DUP
SREFS
EQINT 1
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDREF
;; decode TonEventInitData.eventBlockNumber
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; decode TonEventInitData.eventBlock
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; decode TonEventInitData.tonEventConfiguration
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode TonEventInitData.requiredConfirmations
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; decode TonEventInitData.requiredRejects
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; build struct TonEventInitData ss:9
BLKSWAP 8, 1
TUPLE 8
SWAP
; Decode eventDataSignature
DUP
SBITREFS
EQINT 1
SWAP
EQINT 0
AND
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDREF
; Decode relayKey
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: eventInitData
;; param: eventDataSignature
;; param: relayKey
; modifier onlyBridge
;; push identifier MSG_SENDER_NOT_BRIDGE
GETGLOB 12
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; get member sender
GETGLOB 9
;; get member bridgeAddress
;; push identifier basicInitData
GETGLOB 10
INDEX 4
SDEQ
THROWANYIFNOT
; modifier transferAfter
;; get member bridgeAddress
;; push identifier basicInitData
GETGLOB 10
INDEX 4
;; get member value
CALL $message_balance_macro$
; function confirmEvent
MYADDR
; expValue
PUSH S5
; end expValue
SWAP
; colValue
SETINDEX 5
POP S5
; end colValue
; expValue
PUSH S4
; end expValue
;; get member eventRequiredConfirmations
;; push identifier basicInitData
GETGLOB 10
INDEX 1
; colValue
SETINDEX 6
POP S5
; end colValue
; expValue
PUSH S4
; end expValue
;; get member eventRequiredConfirmations
;; push identifier basicInitData
GETGLOB 10
INDEX 1
; colValue
SETINDEX 7
POP S5
; end colValue
NEWDICT
GETGLOB 2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventInitData
PUSH S5
UNTUPLE 8
NEWC
NEWC
PUSH S5
STUR 256
PUSH S4
STSLICER
PUSH S3
STUR 256
STBREFR
NEWC
PUSH S2
STUR 256
STBREFR
PUSH S8
STUR 256
PUSH S7
STUR 256
PUSH S6
STREFR
PUSH S5
STUR 256
XCHG s8
BLKDROP 8
ENDC
PUSHINT 1
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; get member eventCode
;; push identifier basicInitData
GETGLOB 10
INDEX 3
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
;; get member eventInitialBalance
;; push identifier basicInitData
GETGLOB 10
INDEX 5
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x1a711165
;; relayKey
;; push identifier relayKey
PUSH S5
STUR 256
;; eventDataSignature
;; push identifier eventDataSignature
PUSH S6
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: tonEventAddress
;; Remote call TonEvent.confirm
;; push identifier tonEventAddress
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca00000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x586a42e6
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
;; eventDataSignature
;; push identifier eventDataSignature
PUSH S5
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; emit EventConfirmation
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x0c075cbc
;; addr
;; push identifier tonEventAddress
PUSH S1
STSLICER
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function confirmEvent
;; transfer()
;; push identifier value
DUP
;; push identifier receiver
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end modifier transferAfter
BLKDROP 3
; end modifier onlyBridge
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	confirmEvent_internal
.type	confirmEvent_internal, @function
;; param: eventInitData
;; param: eventDataSignature
;; param: relayKey
; modifier onlyBridge
;; push identifier MSG_SENDER_NOT_BRIDGE
GETGLOB 12
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; get member sender
GETGLOB 9
;; get member bridgeAddress
;; push identifier basicInitData
GETGLOB 10
INDEX 4
SDEQ
THROWANYIFNOT
; modifier transferAfter
;; get member bridgeAddress
;; push identifier basicInitData
GETGLOB 10
INDEX 4
;; get member value
CALL $message_balance_macro$
; function confirmEvent
MYADDR
; expValue
PUSH S5
; end expValue
SWAP
; colValue
SETINDEX 5
POP S5
; end colValue
; expValue
PUSH S4
; end expValue
;; get member eventRequiredConfirmations
;; push identifier basicInitData
GETGLOB 10
INDEX 1
; colValue
SETINDEX 6
POP S5
; end colValue
; expValue
PUSH S4
; end expValue
;; get member eventRequiredConfirmations
;; push identifier basicInitData
GETGLOB 10
INDEX 1
; colValue
SETINDEX 7
POP S5
; end colValue
NEWDICT
GETGLOB 2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventInitData
PUSH S5
UNTUPLE 8
NEWC
NEWC
PUSH S5
STUR 256
PUSH S4
STSLICER
PUSH S3
STUR 256
STBREFR
NEWC
PUSH S2
STUR 256
STBREFR
PUSH S8
STUR 256
PUSH S7
STUR 256
PUSH S6
STREFR
PUSH S5
STUR 256
XCHG s8
BLKDROP 8
ENDC
PUSHINT 1
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; get member eventCode
;; push identifier basicInitData
GETGLOB 10
INDEX 3
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
;; get member eventInitialBalance
;; push identifier basicInitData
GETGLOB 10
INDEX 5
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x1a711165
;; relayKey
;; push identifier relayKey
PUSH S5
STUR 256
;; eventDataSignature
;; push identifier eventDataSignature
PUSH S6
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: tonEventAddress
;; Remote call TonEvent.confirm
;; push identifier tonEventAddress
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca00000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x586a42e6
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
;; eventDataSignature
;; push identifier eventDataSignature
PUSH S5
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; emit EventConfirmation
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x0c075cbc
;; addr
;; push identifier tonEventAddress
PUSH S1
STSLICER
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function confirmEvent
;; transfer()
;; push identifier value
DUP
;; push identifier receiver
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end modifier transferAfter
BLKDROP 3
; end modifier onlyBridge

.globl	rejectEvent
.public	rejectEvent
.type	rejectEvent, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode eventInitData
;; decode struct TonEventInitData eventInitData
;; decode TonEventInitData.eventTransaction
LDU 256
;; decode TonEventInitData.eventIndex
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; decode TonEventInitData.eventData
;; decode TvmCell
DUP
SBITREFS
EQINT 1
SWAP
EQINT 0
AND
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDREF
;; decode TonEventInitData.eventBlockNumber
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; decode TonEventInitData.eventBlock
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; decode TonEventInitData.tonEventConfiguration
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode TonEventInitData.requiredConfirmations
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; decode TonEventInitData.requiredRejects
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; build struct TonEventInitData ss:9
BLKSWAP 8, 1
TUPLE 8
SWAP
; Decode relayKey
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: eventInitData
;; param: relayKey
; modifier onlyBridge
;; push identifier MSG_SENDER_NOT_BRIDGE
GETGLOB 12
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; get member sender
GETGLOB 9
;; get member bridgeAddress
;; push identifier basicInitData
GETGLOB 10
INDEX 4
SDEQ
THROWANYIFNOT
; modifier transferAfter
;; get member bridgeAddress
;; push identifier basicInitData
GETGLOB 10
INDEX 4
;; get member value
CALL $message_balance_macro$
; function rejectEvent
MYADDR
; expValue
PUSH S4
; end expValue
SWAP
; colValue
SETINDEX 5
POP S4
; end colValue
; expValue
PUSH S3
; end expValue
;; get member eventRequiredConfirmations
;; push identifier basicInitData
GETGLOB 10
INDEX 1
; colValue
SETINDEX 6
POP S4
; end colValue
; expValue
PUSH S3
; end expValue
;; get member eventRequiredConfirmations
;; push identifier basicInitData
GETGLOB 10
INDEX 1
; colValue
SETINDEX 7
POP S4
; end colValue
NEWDICT
GETGLOB 2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventInitData
PUSH S4
UNTUPLE 8
NEWC
NEWC
PUSH S5
STUR 256
PUSH S4
STSLICER
PUSH S3
STUR 256
STBREFR
NEWC
PUSH S2
STUR 256
STBREFR
PUSH S8
STUR 256
PUSH S7
STUR 256
PUSH S6
STREFR
PUSH S5
STUR 256
XCHG s8
BLKDROP 8
ENDC
PUSHINT 1
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; get member eventCode
;; push identifier basicInitData
GETGLOB 10
INDEX 3
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
PUSHINT 0
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x1a711165
;; relayKey
;; push identifier relayKey
PUSH S5
STUR 256
;; eventDataSignature
NEWC
ENDC
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: tonEventAddress
;; Remote call TonEvent.reject
;; push identifier tonEventAddress
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca00000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x70151477
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
;; emit EventReject
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x06cb52f7
;; addr
;; push identifier tonEventAddress
PUSH S1
STSLICER
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function rejectEvent
;; transfer()
;; push identifier value
DUP
;; push identifier receiver
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end modifier transferAfter
DROP2
; end modifier onlyBridge
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	rejectEvent_internal
.type	rejectEvent_internal, @function
;; param: eventInitData
;; param: relayKey
; modifier onlyBridge
;; push identifier MSG_SENDER_NOT_BRIDGE
GETGLOB 12
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; get member sender
GETGLOB 9
;; get member bridgeAddress
;; push identifier basicInitData
GETGLOB 10
INDEX 4
SDEQ
THROWANYIFNOT
; modifier transferAfter
;; get member bridgeAddress
;; push identifier basicInitData
GETGLOB 10
INDEX 4
;; get member value
CALL $message_balance_macro$
; function rejectEvent
MYADDR
; expValue
PUSH S4
; end expValue
SWAP
; colValue
SETINDEX 5
POP S4
; end colValue
; expValue
PUSH S3
; end expValue
;; get member eventRequiredConfirmations
;; push identifier basicInitData
GETGLOB 10
INDEX 1
; colValue
SETINDEX 6
POP S4
; end colValue
; expValue
PUSH S3
; end expValue
;; get member eventRequiredConfirmations
;; push identifier basicInitData
GETGLOB 10
INDEX 1
; colValue
SETINDEX 7
POP S4
; end colValue
NEWDICT
GETGLOB 2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier eventInitData
PUSH S4
UNTUPLE 8
NEWC
NEWC
PUSH S5
STUR 256
PUSH S4
STSLICER
PUSH S3
STUR 256
STBREFR
NEWC
PUSH S2
STUR 256
STBREFR
PUSH S8
STUR 256
PUSH S7
STUR 256
PUSH S6
STREFR
PUSH S5
STUR 256
XCHG s8
BLKDROP 8
ENDC
PUSHINT 1
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; get member eventCode
;; push identifier basicInitData
GETGLOB 10
INDEX 3
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
PUSHINT 0
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x1a711165
;; relayKey
;; push identifier relayKey
PUSH S5
STUR 256
;; eventDataSignature
NEWC
ENDC
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: tonEventAddress
;; Remote call TonEvent.reject
;; push identifier tonEventAddress
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca00000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x70151477
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
;; emit EventReject
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x06cb52f7
;; addr
;; push identifier tonEventAddress
PUSH S1
STSLICER
;; relayKey
;; push identifier relayKey
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function rejectEvent
;; transfer()
;; push identifier value
DUP
;; push identifier receiver
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end modifier transferAfter
DROP2
; end modifier onlyBridge

.globl	getDetails
.public	getDetails
.type	getDetails, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
ENDS
; function getDetails
;; ret param: _basicInitData
NEWC
ENDC
PUSHINT 0
PUSHINT 0
NEWC
ENDC
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
PUSHINT 0
TUPLE 6
;; ret param: _initData
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
PUSHINT 0
TUPLE 2
;; ret param: _type
PUSHINT 0
;; return
;; push identifier basicInitData
GETGLOB 10
;; push identifier initData
GETGLOB 11
;; get member TON
PUSHINT 1
BLKDROP2 3, 3
;; emitting 3 value(s)
PUSH S3
EQINT -1
PUSHCONT {
	PUSH S5
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST xee3c0c35
	PUSH S4
	UNTUPLE 6
	BLKSWAP 1, 6
	PUSH S6
	STREFR
	PUSH S5
	STUR 16
	PUSH S4
	STUR 16
	PUSH S3
	STREFR
	PUSH S2
	STSLICER
	PUSH S1
	STUR 128
	XCHG s6
	BLKDROP 6
	PUSH S3
	UNTUPLE 2
	ROT
	PUSH S2
	STSLICER
	PUSH S1
	STUR 160
	NIP
	NIP
	PUSH S2
	STUR 8
	STBREFR
	ENDC
	PUSHINT 1
	SENDRAWMSG
}
IF
BLKDROP 3
; end function getDetails
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	getDetails_internal
.type	getDetails_internal, @function
; function getDetails
;; ret param: _basicInitData
NEWC
ENDC
PUSHINT 0
PUSHINT 0
NEWC
ENDC
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
PUSHINT 0
TUPLE 6
;; ret param: _initData
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
PUSHINT 0
TUPLE 2
;; ret param: _type
PUSHINT 0
;; return
;; push identifier basicInitData
GETGLOB 10
;; push identifier initData
GETGLOB 11
;; get member TON
PUSHINT 1
BLKDROP2 3, 3
; end function getDetails

.globl	updateInitData
.public	updateInitData
.type	updateInitData, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode _basicInitData
;; decode struct BasicConfigurationInitData _basicInitData
;; decode BasicConfigurationInitData.eventABI
LDREF
;; decode BasicConfigurationInitData.eventRequiredConfirmations
LDU 16
;; decode BasicConfigurationInitData.eventRequiredRejects
LDU 16
;; decode BasicConfigurationInitData.eventCode
;; decode TvmCell
LDREF
;; decode BasicConfigurationInitData.bridgeAddress
LDMSGADDR
;; decode BasicConfigurationInitData.eventInitialBalance
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
;; build struct BasicConfigurationInitData ss:7
BLKSWAP 6, 1
TUPLE 6
SWAP
; Decode _initData
;; decode struct TonEventConfigurationInitData _initData
;; decode TonEventConfigurationInitData.eventAddress
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode TonEventConfigurationInitData.proxyAddress
LDUQ 160
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 160
}
IFNOT
;; build struct TonEventConfigurationInitData ss:4
ROTREV
TUPLE 2
SWAP
ENDS
;; param: _basicInitData
;; param: _initData
; modifier onlyBridge
;; push identifier MSG_SENDER_NOT_BRIDGE
GETGLOB 12
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; get member sender
GETGLOB 9
;; get member bridgeAddress
;; push identifier basicInitData
GETGLOB 10
INDEX 4
SDEQ
THROWANYIFNOT
; function updateInitData
; expValue
; end expValue
;; push identifier _basicInitData
PUSH S1
; colValue
SETGLOB 10
; end colValue
; expValue
; end expValue
;; push identifier _initData
DUP
; colValue
SETGLOB 11
; end colValue
; end function updateInitData
DROP2
; end modifier onlyBridge
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	updateInitData_internal
.type	updateInitData_internal, @function
;; param: _basicInitData
;; param: _initData
; modifier onlyBridge
;; push identifier MSG_SENDER_NOT_BRIDGE
GETGLOB 12
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; get member sender
GETGLOB 9
;; get member bridgeAddress
;; push identifier basicInitData
GETGLOB 10
INDEX 4
SDEQ
THROWANYIFNOT
; function updateInitData
; expValue
; end expValue
;; push identifier _basicInitData
PUSH S1
; colValue
SETGLOB 10
; end colValue
; expValue
; end expValue
;; push identifier _initData
DUP
; colValue
SETGLOB 11
; end colValue
; end function updateInitData
DROP2
; end modifier onlyBridge

.globl	c7_to_c4
.type	c7_to_c4, @function
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 10
GETGLOB 11
GETGLOB 12
REVERSE 4, 0
SWAP
UNTUPLE 6
NEWC
PUSH S6
STREFR
PUSH S5
STUR 16
PUSH S4
STUR 16
PUSH S3
STREFR
PUSH S2
STSLICER
PUSH S1
STUR 128
XCHG s6
BLKDROP 6
STBREFR
SWAP
UNTUPLE 2
NEWC
PUSH S2
STSLICER
PUSH S1
STUR 160
NIP
NIP
STBREFR
STU 256
ENDC
POP C4

.globl	c4_to_c7
.type	c4_to_c7, @function
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDREF
LDU 16
LDU 16
LDREF
LDMSGADDR
PLDU 128
TUPLE 6
SETGLOB 10
LDREFRTOS
LDMSGADDR
PLDU 160
TUPLE 2
SETGLOB 11
PLDU 256
SETGLOB 12
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDREF
	LDU 16
	LDU 16
	LDREF
	LDMSGADDR
	PLDU 128
	TUPLE 6
	SETGLOB 10
	LDREFRTOS
	LDMSGADDR
	PLDU 160
	TUPLE 2
	SETGLOB 11
	PLDU 256
	SETGLOB 12
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init basicInitData
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		LDREF
		LDU 16
		LDU 16
		LDREF
		LDMSGADDR
		PLDU 128
		TUPLE 6
	}
	PUSHCONT {
		NEWC
		ENDC
		PUSHINT 0
		PUSHINT 0
		NEWC
		ENDC
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		TUPLE 6
	}
	IFELSE
	SETGLOB 10
	; init initData
	PUSHINT 2
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		LDMSGADDR
		PLDU 160
		TUPLE 2
	}
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		TUPLE 2
	}
	IFELSE
	SETGLOB 11
	; init MSG_SENDER_NOT_BRIDGE
	PUSHINT 0
	SETGLOB 12
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
	;; init state var: MSG_SENDER_NOT_BRIDGE
	PUSHINT 202
	SETGLOB 12
}
IFELSE

.internal-alias :main_internal,        0
.internal	:main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
PUSH S1 ; funcId body' funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	THROW 60
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	THROW 60
}
IF

.internal-alias :main_external,        -1
.internal	:main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALL $c4_to_c7_with_init_storage$
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
PUSH S1 ; funcId body funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	THROW 60
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	THROW 60
}
IF

