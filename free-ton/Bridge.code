.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
; Decode _owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode _bridgeConfiguration
;; decode struct BridgeConfiguration _bridgeConfiguration
;; decode BridgeConfiguration.staking
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode BridgeConfiguration.active
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
;; build struct BridgeConfiguration ss:4
ROTREV
TUPLE 2
SWAP
ENDS
;; param: _owner
;; param: _bridgeConfiguration
; modifier checkPubKey
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
GETGLOB 2
EQUAL
THROWIFNOT 1103
; constructor Bridge
ACCEPT
; expValue
; end expValue
;; push identifier _bridgeConfiguration
DUP
; colValue
SETGLOB 12
; end colValue
;; emit BridgeConfigurationUpdate
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x066fdde7
;; bridgeConfiguration
;; push identifier _bridgeConfiguration
PUSH S1
UNTUPLE 2
ROT
PUSH S2
STSLICER
PUSH S1
STIR 1
BLKDROP2 2, 1
ENDC
PUSHINT 0
SENDRAWMSG
;; push identifier _owner
PUSH S1
CALLREF {
	CALL $setOwnership_internal_macro$
}
; end constructor Bridge
; end modifier checkPubKey
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro createEventConfiguration
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode id
LDU 32
; Decode eventConfiguration
;; decode struct EventConfiguration eventConfiguration
;; decode EventConfiguration.addr
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode EventConfiguration.status
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
;; decode EventConfiguration._type
LDUQ 8
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 8
}
IFNOT
;; build struct EventConfiguration ss:5
BLKSWAP 3, 1
TUPLE 3
SWAP
ENDS
;; param: id
;; param: eventConfiguration
CALLREF {
	CALL $createEventConfiguration_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	createEventConfiguration_internal
.type	createEventConfiguration_internal, @function
CALL $createEventConfiguration_internal_macro$

.macro createEventConfiguration_internal_macro
;; param: id
;; param: eventConfiguration
; modifier cashBack
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 10
SDEQ
THROWIFNOT 1101
; function createEventConfiguration
;; emit EventConfigurationCreated
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x4604aa87
;; id
;; push identifier id
PUSH S2
STUR 32
;; eventConfiguration
;; push identifier eventConfiguration
PUSH S1
UNTUPLE 3
BLKSWAP 1, 3
PUSH S3
STSLICER
PUSH S2
STIR 1
PUSH S1
STUR 8
BLKDROP2 3, 1
ENDC
PUSHINT 0
SENDRAWMSG
; end function createEventConfiguration
; end modifier onlyOwner
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 129
SENDRAWMSG
; end modifier cashBack
DROP2

.macro removeEventConfiguration
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode id
LDU 32
ENDS
;; param: id
CALLREF {
	CALL $removeEventConfiguration_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	removeEventConfiguration_internal
.type	removeEventConfiguration_internal, @function
CALL $removeEventConfiguration_internal_macro$

.macro removeEventConfiguration_internal_macro
;; param: id
; modifier cashBack
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 10
SDEQ
THROWIFNOT 1101
; function removeEventConfiguration
;; emit EventConfigurationRemoved
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x4dfabf71
;; id
;; push identifier id
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
; end function removeEventConfiguration
; end modifier onlyOwner
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 129
SENDRAWMSG
; end modifier cashBack
DROP

.macro updateEventConfiguration
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode id
LDU 32
; Decode eventConfiguration
;; decode struct EventConfiguration eventConfiguration
;; decode EventConfiguration.addr
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode EventConfiguration.status
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
;; decode EventConfiguration._type
LDUQ 8
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 8
}
IFNOT
;; build struct EventConfiguration ss:5
BLKSWAP 3, 1
TUPLE 3
SWAP
ENDS
;; param: id
;; param: eventConfiguration
CALLREF {
	CALL $updateEventConfiguration_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	updateEventConfiguration_internal
.type	updateEventConfiguration_internal, @function
CALL $updateEventConfiguration_internal_macro$

.macro updateEventConfiguration_internal_macro
;; param: id
;; param: eventConfiguration
; modifier cashBack
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 10
SDEQ
THROWIFNOT 1101
; function updateEventConfiguration
;; emit EventConfigurationUpdated
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x31ebca0a
;; id
;; push identifier id
PUSH S2
STUR 32
;; eventConfiguration
;; push identifier eventConfiguration
PUSH S1
UNTUPLE 3
BLKSWAP 1, 3
PUSH S3
STSLICER
PUSH S2
STIR 1
PUSH S1
STUR 8
BLKDROP2 3, 1
ENDC
PUSHINT 0
SENDRAWMSG
; end function updateEventConfiguration
; end modifier onlyOwner
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 129
SENDRAWMSG
; end modifier cashBack
DROP2

.macro updateBridgeConfiguration
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode _bridgeConfiguration
;; decode struct BridgeConfiguration _bridgeConfiguration
;; decode BridgeConfiguration.staking
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode BridgeConfiguration.active
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
;; build struct BridgeConfiguration ss:3
ROTREV
TUPLE 2
SWAP
ENDS
;; param: _bridgeConfiguration
CALLREF {
	CALL $updateBridgeConfiguration_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	updateBridgeConfiguration_internal
.type	updateBridgeConfiguration_internal, @function
CALL $updateBridgeConfiguration_internal_macro$

.macro updateBridgeConfiguration_internal_macro
;; param: _bridgeConfiguration
; modifier cashBack
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 10
SDEQ
THROWIFNOT 1101
; function updateBridgeConfiguration
; expValue
; end expValue
;; push identifier _bridgeConfiguration
DUP
; colValue
SETGLOB 12
; end colValue
;; emit BridgeConfigurationUpdate
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x066fdde7
;; bridgeConfiguration
;; push identifier _bridgeConfiguration
PUSH S1
UNTUPLE 2
ROT
PUSH S2
STSLICER
PUSH S1
STIR 1
BLKDROP2 2, 1
ENDC
PUSHINT 0
SENDRAWMSG
; end function updateBridgeConfiguration
; end modifier onlyOwner
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 129
SENDRAWMSG
; end modifier cashBack
DROP

.globl	transferAll_internal
.type	transferAll_internal, @function
CALL $transferAll_internal_macro$

.macro transferAll_internal_macro
;; param: receiver
; function transferAll
;; transfer()
;; push identifier receiver
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 129
SENDRAWMSG
; end function transferAll
DROP

.globl	setOwnership_internal
.type	setOwnership_internal, @function
CALL $setOwnership_internal_macro$

.macro setOwnership_internal_macro
;; param: newOwner
; function setOwnership
;; push identifier owner
GETGLOB 10
;; decl: oldOwner
; expValue
; end expValue
;; push identifier newOwner
PUSH S1
; colValue
SETGLOB 10
; end colValue
;; emit OwnershipTransferred
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x6115f072
;; previousOwner
;; push identifier oldOwner
PUSH S1
STSLICER
;; newOwner
;; push identifier newOwner
PUSH S2
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
DROP
; end function setOwnership
DROP

.macro transferOwnership
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode newOwner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: newOwner
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 10
SDEQ
THROWIFNOT 1101
; function transferOwnership
;; push identifier newOwner
DUP
;; address.makeAddrStd()
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SDEQ
NOT
THROWIFNOT 1102
;; push identifier newOwner
DUP
CALLREF {
	CALL $setOwnership_internal_macro$
}
; end function transferOwnership
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro renounceOwnership
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 10
SDEQ
THROWIFNOT 1101
; function renounceOwnership
;; address.makeAddrStd()
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; decl: newOwner
;; push identifier newOwner
DUP
CALLREF {
	CALL $setOwnership_internal_macro$
}
DROP
; end function renounceOwnership
; end modifier onlyOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 13
REVERSE 5, 0
STSLICE
STU 256
SWAP
UNTUPLE 2
NEWC
PUSH S2
STSLICER
PUSH S1
STIR 1
BLKDROP2 2, 1
STBREFR
STDICT
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDMSGADDR
LDU 256
LDREFRTOS
LDMSGADDR
PLDI 1
TUPLE 2
SETGLOB 12
PLDDICT
SETGLOB 13
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDMSGADDR
	LDU 256
	LDREFRTOS
	LDMSGADDR
	PLDI 1
	TUPLE 2
	SETGLOB 12
	PLDDICT
	SETGLOB 13
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init owner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 10
	; init _randomNonce
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 256
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 11
	; init bridgeConfiguration
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	TUPLE 2
	SETGLOB 12
	; init eventConfigurations
	NEWDICT
	SETGLOB 13
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro owner
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 10
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xdf0bcfde
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro _randomNonce
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 11
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xbb53331f
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro bridgeConfiguration
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 12
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xc8b8a3cb
	PUSH S1
	UNTUPLE 2
	ROT
	PUSH S2
	STSLICER
	PUSH S1
	STIR 1
	BLKDROP2 2, 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 712669603
LEQ
PUSHCONT {
	DUP
	PUSHINT 235197086
	EQUAL
	IFJMPREF {
		CALL $transferOwnership$
	}
	DUP
	PUSHINT 625130089
	EQUAL
	IFJMPREF {
		CALL $updateBridgeConfiguration$
	}
	DUP
	PUSHINT 712669603
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
}
IFJMP
DUP
PUSHINT 1220060107
LEQ
PUSHCONT {
	DUP
	PUSHINT 995308319
	EQUAL
	IFJMPREF {
		CALL $_randomNonce$
	}
	DUP
	PUSHINT 1077527492
	EQUAL
	IFJMPREF {
		CALL $updateEventConfiguration$
	}
	DUP
	PUSHINT 1220060107
	EQUAL
	IFJMPREF {
		CALL $bridgeConfiguration$
	}
}
IFJMP
DUP
PUSHINT 1729444094
LEQ
PUSHCONT {
	DUP
	PUSHINT 1549591111
	EQUAL
	IFJMPREF {
		CALL $removeEventConfiguration$
	}
	DUP
	PUSHINT 1594609630
	EQUAL
	IFJMPREF {
		CALL $owner$
	}
	DUP
	PUSHINT 1729444094
	EQUAL
	IFJMPREF {
		CALL $renounceOwnership$
	}
}
IFJMP
DUP
PUSHINT 2089424448
EQUAL
IFJMPREF {
	CALL $createEventConfiguration$
}
